{
  "ActionEventInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ActionEventInfo.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ActionEventInfo.errorCode": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ActionEventInfo.errorText": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "AdaptiveDetailRowPreparingInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "AdaptiveDetailRowPreparingInfo.formOptions": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Alert": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Alert.id": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Alert.message": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "AnimationConfig": {
    "shortDescription": "Defines animation properties."
  },
  "AnimationConfig.complete": {
    "shortDescription": "A function called after animation is completed."
  },
  "AnimationConfig.delay": {
    "shortDescription": "A number specifying wait time before animation execution."
  },
  "AnimationConfig.direction": {
    "shortDescription": "Specifies the animation direction for the \"slideIn\" and \"slideOut\" animation types."
  },
  "AnimationConfig.duration": {
    "shortDescription": "A number specifying the time in milliseconds spent on animation."
  },
  "AnimationConfig.easing": {
    "shortDescription": "A string specifying the easing function for animation."
  },
  "AnimationConfig.from": {
    "shortDescription": "Specifies an initial animation state. Use the [to](/api-reference/50%20Common/Object%20Structures/animationConfig/to.md '/Documentation/ApiReference/Common/Object_Structures/animationConfig/to/') property to specify the final state."
  },
  "AnimationConfig.staggerDelay": {
    "shortDescription": "A number specifying the time period to wait before the animation of the next stagger item starts."
  },
  "AnimationConfig.start": {
    "shortDescription": "A function called before animation is started."
  },
  "AnimationConfig.to": {
    "shortDescription": "Specifies a final animation state. Use the [from](/api-reference/50%20Common/Object%20Structures/animationConfig/from.md '/Documentation/ApiReference/Common/Object_Structures/animationConfig/from/') property to specify an initial state."
  },
  "AnimationConfig.type": {
    "shortDescription": "A string value specifying the animation type."
  },
  "animationPresets": {
    "shortDescription": "A repository of animations."
  },
  "animationPresets.applyChanges()": {
    "shortDescription": "Applies the changes made in the animation repository."
  },
  "animationPresets.clear()": {
    "shortDescription": "Removes all animations from the repository."
  },
  "animationPresets.clear(name)": {
    "shortDescription": "Deletes an animation with a specific name."
  },
  "animationPresets.getPreset(name)": {
    "shortDescription": "Gets the configuration of an animation with a specific name."
  },
  "animationPresets.registerDefaultPresets()": {
    "shortDescription": "Registers [predefined animations](/api-reference/50%20Common/utils/animationPresets '/Documentation/ApiReference/Common/Utils/animationPresets/') in the animation repository."
  },
  "animationPresets.registerPreset(name, config)": {
    "shortDescription": "Adds an animation with a specific name to the animation repository."
  },
  "animationPresets.resetToDefaults()": {
    "shortDescription": "Deletes all custom animations."
  },
  "AnimationState": {
    "shortDescription": "Describes an animation state."
  },
  "AnimationState.left": {
    "shortDescription": "A shortcut that positions the element's left side relative to the parent element."
  },
  "AnimationState.opacity": {
    "shortDescription": "Element opacity."
  },
  "AnimationState.position": {
    "shortDescription": "Element position."
  },
  "AnimationState.scale": {
    "shortDescription": "A value that controls element size."
  },
  "AnimationState.top": {
    "shortDescription": "A shortcut that positions the element's top side relative to the parent element."
  },
  "AppointmentTemplateData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "AppointmentTooltipShowingAppointmentInfo": {
    "shortDescription": "Specifies appointments information in AppointmentTooltipShowingEvent."
  },
  "AppointmentTooltipTemplateData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "AppointmentTooltipTemplateData.isButtonClicked": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ArrayStore": {
    "shortDescription": "The **ArrayStore** is a store that provides an interface for loading and editing an in-memory array and handling related events."
  },
  "ArrayStore.byKey(key)": {
    "shortDescription": "Gets a data item with a specific key."
  },
  "ArrayStore.clear()": {
    "shortDescription": "Clears all the **ArrayStore**'s associated data."
  },
  "ArrayStore.createQuery()": {
    "shortDescription": "Creates a **Query** for the underlying array."
  },
  "ArrayStoreOptions.data": {
    "shortDescription": "Specifies the store's associated array."
  },
  "AsyncCancelable": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "AsyncCancelable.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "AsyncRule": {
    "shortDescription": "A custom validation rule that is checked asynchronously. Use async rules for server-side validation."
  },
  "AsyncRule.ignoreEmptyValue": {
    "shortDescription": "If **true**, the [validationCallback](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/AsyncRule/validationCallback.md '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/AsyncRule/#validationCallback') is not executed for **null**, **undefined**, **false**, and empty strings."
  },
  "AsyncRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "AsyncRule.reevaluate": {
    "shortDescription": "Indicates whether the rule should always be checked for the target value or only when the value changes."
  },
  "AsyncRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"async\"* to use the **AsyncRule**."
  },
  "AsyncRule.validationCallback": {
    "shortDescription": "A function that validates the target value."
  },
  "BarGaugeBarInfo": {
    "shortDescription": "An object that provides information about a bar in the [BarGauge](/api-reference/10%20UI%20Components/dxBarGauge '/Documentation/ApiReference/UI_Components/dxBarGauge/') UI component."
  },
  "BarGaugeBarInfo.color": {
    "shortDescription": "The bar's hexadecimal color code."
  },
  "BarGaugeBarInfo.index": {
    "shortDescription": "The bar's zero-based index. Bars closest to the gauge's center have higher indexes."
  },
  "BarGaugeBarInfo.value": {
    "shortDescription": "The bar's [value](/api-reference/10%20UI%20Components/dxBarGauge/1%20Configuration/values.md '/Documentation/ApiReference/UI_Components/dxBarGauge/Configuration/#values')."
  },
  "BarGaugeLegendItem": {
    "shortDescription": "An object that provides information about a legend item in the [BarGauge](/api-reference/10%20UI%20Components/dxBarGauge '/Documentation/ApiReference/UI_Components/dxBarGauge/') UI component."
  },
  "BarGaugeLegendItem.item": {
    "shortDescription": "The bar that the legend item represents."
  },
  "BaseChart": {
    "shortDescription": "A base class for all chart UI components included in the ChartJS library."
  },
  "BaseChart.clearSelection()": {
    "shortDescription": "Deselects the chart's selected series. The series is displayed in an initial style."
  },
  "BaseChart.done": {
    "shortDescription": "Raised when all series are ready."
  },
  "BaseChart.getAllSeries()": {
    "shortDescription": "Gets all the series."
  },
  "BaseChart.getSeriesByName(seriesName)": {
    "shortDescription": "Gets a series with a specific name."
  },
  "BaseChart.getSeriesByPos(seriesIndex)": {
    "shortDescription": "Gets a series with a specific index."
  },
  "BaseChart.hideTooltip()": {
    "shortDescription": "Hides all UI component tooltips."
  },
  "BaseChart.pointClick": {
    "shortDescription": "Raised when a series point is clicked or tapped."
  },
  "BaseChart.pointHoverChanged": {
    "shortDescription": "Raised after the pointer enters or leaves a series point."
  },
  "BaseChart.pointSelectionChanged": {
    "shortDescription": "Raised when a series point is selected or selection is canceled."
  },
  "BaseChart.refresh()": {
    "shortDescription": "Reloads data and repaints the UI component."
  },
  "BaseChart.render(renderOptions)": {
    "shortDescription": "Redraws the UI component."
  },
  "BaseChart.tooltipHidden": {
    "shortDescription": "Raised when a tooltip becomes hidden."
  },
  "BaseChart.tooltipShown": {
    "shortDescription": "Raised when a tooltip appears."
  },
  "BaseChartAdaptiveLayout": {
    "shortDescription": "Specifies adaptive layout properties."
  },
  "BaseChartAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "BaseChartAnnotationConfig.argument": {
    "shortDescription": "Positions the annotation relative to a specific argument."
  },
  "BaseChartAnnotationConfig.series": {
    "shortDescription": "Anchors the annotation to a series point. Accepts the [name](/api-reference/_hidden/PolarChartSeries/name.md '{basewidgetpath}/Configuration/series/#name') of the point's series."
  },
  "BaseChartAnnotationConfig.value": {
    "shortDescription": "Positions the annotation relative to a value on the specified [value axis](/api-reference/_hidden/dxChartCommonAnnotationConfig/axis.md '{basewidgetpath}/Configuration/annotations/#axis')."
  },
  "BaseChartLegend": {
    "shortDescription": "Specifies properties of the legend."
  },
  "BaseChartOptions.adaptiveLayout": {
    "shortDescription": "Specifies adaptive layout properties."
  },
  "BaseChartOptions.adaptiveLayout.height": {
    "shortDescription": "Specifies the minimum container height at which the layout begins to adapt."
  },
  "BaseChartOptions.adaptiveLayout.keepLabels": {
    "shortDescription": "Specifies whether [point labels](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/label '{basewidgetpath}/Configuration/commonSeriesSettings/label') should be kept when the UI component adapts the layout."
  },
  "BaseChartOptions.adaptiveLayout.width": {
    "shortDescription": "Specifies the minimum container width at which the layout begins to adapt."
  },
  "BaseChartOptions.animation": {
    "shortDescription": "Specifies animation properties."
  },
  "BaseChartOptions.animation.duration": {
    "shortDescription": "Specifies how long the animation runs in milliseconds."
  },
  "BaseChartOptions.animation.easing": {
    "shortDescription": "Specifies the easing function of the animation."
  },
  "BaseChartOptions.animation.enabled": {
    "shortDescription": "Enables the animation in the UI component."
  },
  "BaseChartOptions.animation.maxPointCountSupported": {
    "shortDescription": "Specifies how many series points the UI component should have before the animation will be disabled."
  },
  "BaseChartOptions.customizeLabel": {
    "shortDescription": "Customizes the appearance of an individual point label."
  },
  "BaseChartOptions.customizePoint": {
    "shortDescription": "Customizes the appearance of an individual series point."
  },
  "BaseChartOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "BaseChartOptions.legend": {
    "shortDescription": "Specifies properties of the legend."
  },
  "BaseChartOptions.legend.customizeItems": {
    "shortDescription": "Allows you to change the order, text, and visibility of legend items."
  },
  "BaseChartOptions.legend.markerTemplate": {
    "shortDescription": "Specifies an SVG element that serves as a custom legend item marker."
  },
  "BaseChartOptions.onDone": {
    "shortDescription": "A function that is executed when all series are ready."
  },
  "BaseChartOptions.onPointClick": {
    "shortDescription": "A function that is executed when a series point is clicked or tapped."
  },
  "BaseChartOptions.onPointHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a series point."
  },
  "BaseChartOptions.onPointSelectionChanged": {
    "shortDescription": "A function that is executed when a series point is selected or selection is canceled."
  },
  "BaseChartOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "BaseChartOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "BaseChartOptions.palette": {
    "shortDescription": "Sets the palette to be used for colorizing series and their elements."
  },
  "BaseChartOptions.paletteExtensionMode": {
    "shortDescription": "Specifies what to do with colors in the [palette](/api-reference/10%20UI%20Components/BaseChart/1%20Configuration/palette.md '{basewidgetpath}/Configuration/#palette') when their number is less than the number of series (in the Chart UI component) or points in a series (in the PieChart UI component)."
  },
  "BaseChartOptions.pointSelectionMode": {
    "shortDescription": "Specifies whether a single point or multiple points can be selected in the chart."
  },
  "BaseChartOptions.series": {
    "shortDescription": "Specifies properties for series."
  },
  "BaseChartOptions.tooltip": {
    "shortDescription": "Configures tooltips."
  },
  "BaseChartOptions.tooltip.argumentFormat": {
    "shortDescription": "Formats the point argument before it is displayed in the tooltip. To format the point value, use the [format](/api-reference/10%20UI%20Components/BaseWidget/1%20Configuration/tooltip/format.md '{basewidgetpath}/Configuration/tooltip/#format') property."
  },
  "BaseChartOptions.tooltip.contentTemplate": {
    "shortDescription": "Specifies a custom template for a tooltip."
  },
  "BaseChartOptions.tooltip.customizeTooltip": {
    "shortDescription": "Allows you to change tooltip appearance."
  },
  "BaseChartOptions.tooltip.interactive": {
    "shortDescription": "Allows users to interact with the tooltip content."
  },
  "BaseChartOptions.tooltip.shared": {
    "shortDescription": "Specifies whether the tooltip is shared across all series points with the same argument."
  },
  "BaseChartTooltip": {
    "shortDescription": "Configures tooltips."
  },
  "BaseGauge": {
    "shortDescription": "A gauge UI component."
  },
  "BaseGauge.subvalues()": {
    "shortDescription": "Gets subvalues."
  },
  "BaseGauge.subvalues(subvalues)": {
    "shortDescription": "Updates subvalues."
  },
  "BaseGauge.tooltipHidden": {
    "shortDescription": "Raised when a tooltip becomes hidden."
  },
  "BaseGauge.tooltipShown": {
    "shortDescription": "Raised when a tooltip appears."
  },
  "BaseGauge.value()": {
    "shortDescription": "Gets the [main value](/api-reference/10%20UI%20Components/BaseGauge/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value')."
  },
  "BaseGauge.value(value)": {
    "shortDescription": "Updates the [main value](/api-reference/10%20UI%20Components/BaseGauge/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value')."
  },
  "BaseGaugeAnimation": {
    "shortDescription": "Specifies animation properties."
  },
  "BaseGaugeLoadingIndicator": {
    "shortDescription": "Configures the loading indicator."
  },
  "BaseGaugeOptions.animation": {
    "shortDescription": "Specifies animation properties."
  },
  "BaseGaugeOptions.animation.duration": {
    "shortDescription": "Determines how long animation runs."
  },
  "BaseGaugeOptions.animation.easing": {
    "shortDescription": "Specifies the animation easing mode."
  },
  "BaseGaugeOptions.animation.enabled": {
    "shortDescription": "Indicates whether or not animation is enabled."
  },
  "BaseGaugeOptions.containerBackgroundColor": {
    "shortDescription": "Specifies the color of the parent page element."
  },
  "BaseGaugeOptions.loadingIndicator": {
    "shortDescription": "Configures the loading indicator."
  },
  "BaseGaugeOptions.loadingIndicator.enabled": {
    "shortDescription": "Specifies whether the loading indicator should be displayed and hidden automatically."
  },
  "BaseGaugeOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "BaseGaugeOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "BaseGaugeOptions.rangeContainer": {
    "shortDescription": "Specifies properties of the gauge's range container."
  },
  "BaseGaugeOptions.rangeContainer.backgroundColor": {
    "shortDescription": "Specifies a range container's background color."
  },
  "BaseGaugeOptions.rangeContainer.offset": {
    "shortDescription": "Specifies the offset of the range container from an invisible scale line in pixels."
  },
  "BaseGaugeOptions.rangeContainer.palette": {
    "shortDescription": "Specifies the palette to be used for colorizing ranges in the range container."
  },
  "BaseGaugeOptions.rangeContainer.paletteExtensionMode": {
    "shortDescription": "Specifies what to do with colors in the [palette](/api-reference/10%20UI%20Components/BaseGauge/1%20Configuration/rangeContainer/palette.md '{basewidgetpath}/Configuration/rangeContainer/#palette') when their number is less than the number of ranges in the range container."
  },
  "BaseGaugeOptions.rangeContainer.ranges": {
    "shortDescription": "An array of objects representing ranges contained in the range container."
  },
  "BaseGaugeOptions.rangeContainer.ranges.color": {
    "shortDescription": "Specifies the color of a range."
  },
  "BaseGaugeOptions.rangeContainer.ranges.endValue": {
    "shortDescription": "Specifies an end value of a range."
  },
  "BaseGaugeOptions.rangeContainer.ranges.startValue": {
    "shortDescription": "Specifies a start value of a range."
  },
  "BaseGaugeOptions.scale": {
    "shortDescription": "Specifies properties of the gauge's scale."
  },
  "BaseGaugeOptions.scale.allowDecimals": {
    "shortDescription": "Specifies whether to allow decimal values on the scale. When **false**, the scale contains integer values only."
  },
  "BaseGaugeOptions.scale.customMinorTicks": {
    "shortDescription": "Specifies an array of custom minor ticks."
  },
  "BaseGaugeOptions.scale.customTicks": {
    "shortDescription": "Specifies an array of custom major ticks."
  },
  "BaseGaugeOptions.scale.endValue": {
    "shortDescription": "Specifies the end value for the scale of the gauge."
  },
  "BaseGaugeOptions.scale.label": {
    "shortDescription": "Specifies common properties for scale labels."
  },
  "BaseGaugeOptions.scale.label.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed in scale labels."
  },
  "BaseGaugeOptions.scale.label.font": {
    "shortDescription": "Specifies font properties for the text displayed in the scale labels of the gauge."
  },
  "BaseGaugeOptions.scale.label.format": {
    "shortDescription": "Formats a value before it is displayed in a scale label. Accepts only numeric formats."
  },
  "BaseGaugeOptions.scale.label.overlappingBehavior": {
    "shortDescription": "Decides how to arrange scale labels when there is not enough space to keep all of them."
  },
  "BaseGaugeOptions.scale.label.useRangeColors": {
    "shortDescription": "Specifies whether or not scale labels should be colored similarly to their corresponding ranges in the [range container](/api-reference/10%20UI%20Components/dxLinearGauge/1%20Configuration/rangeContainer '/Documentation/ApiReference/UI_Components/dxLinearGauge/Configuration/rangeContainer/')."
  },
  "BaseGaugeOptions.scale.label.visible": {
    "shortDescription": "Specifies whether or not scale labels are visible on the gauge."
  },
  "BaseGaugeOptions.scale.minorTick": {
    "shortDescription": "Specifies properties of the gauge's minor ticks."
  },
  "BaseGaugeOptions.scale.minorTick.color": {
    "shortDescription": "Specifies the color of the scale's minor ticks."
  },
  "BaseGaugeOptions.scale.minorTick.length": {
    "shortDescription": "Specifies the length of the scale's minor ticks."
  },
  "BaseGaugeOptions.scale.minorTick.opacity": {
    "shortDescription": "Specifies the opacity of the scale's minor ticks."
  },
  "BaseGaugeOptions.scale.minorTick.visible": {
    "shortDescription": "Indicates whether scale minor ticks are visible or not."
  },
  "BaseGaugeOptions.scale.minorTick.width": {
    "shortDescription": "Specifies the width of the scale's minor ticks."
  },
  "BaseGaugeOptions.scale.minorTickInterval": {
    "shortDescription": "Specifies an interval between minor ticks."
  },
  "BaseGaugeOptions.scale.scaleDivisionFactor": {
    "shortDescription": "Specifies the minimum distance between two neighboring [major ticks](/api-reference/10%20UI%20Components/BaseGauge/1%20Configuration/scale/tick '{basewidgetpath}/Configuration/scale/tick/') in pixels."
  },
  "BaseGaugeOptions.scale.startValue": {
    "shortDescription": "Specifies the start value for the scale of the gauge."
  },
  "BaseGaugeOptions.scale.tick": {
    "shortDescription": "Specifies properties of the gauge's major ticks."
  },
  "BaseGaugeOptions.scale.tick.color": {
    "shortDescription": "Specifies the color of the scale's major ticks."
  },
  "BaseGaugeOptions.scale.tick.length": {
    "shortDescription": "Specifies the length of the scale's major ticks."
  },
  "BaseGaugeOptions.scale.tick.opacity": {
    "shortDescription": "Specifies the opacity of the scale's major ticks."
  },
  "BaseGaugeOptions.scale.tick.visible": {
    "shortDescription": "Indicates whether scale major ticks are visible or not."
  },
  "BaseGaugeOptions.scale.tick.width": {
    "shortDescription": "Specifies the width of the scale's major ticks."
  },
  "BaseGaugeOptions.scale.tickInterval": {
    "shortDescription": "Specifies an interval between major ticks."
  },
  "BaseGaugeOptions.subvalues": {
    "shortDescription": "Specifies a set of subvalues to be designated by the subvalue indicators."
  },
  "BaseGaugeOptions.tooltip": {
    "shortDescription": "Configures tooltips."
  },
  "BaseGaugeOptions.tooltip.contentTemplate": {
    "shortDescription": "Specifies a custom template for a tooltip."
  },
  "BaseGaugeOptions.tooltip.customizeTooltip": {
    "shortDescription": "Allows you to change the appearance of specified tooltips."
  },
  "BaseGaugeOptions.tooltip.interactive": {
    "shortDescription": "<!-- %shortDescription% -->"
  },
  "BaseGaugeOptions.value": {
    "shortDescription": "Specifies the main value on a gauge."
  },
  "BaseGaugeRangeContainer": {
    "shortDescription": "Specifies properties of the gauge's range container."
  },
  "BaseGaugeScale": {
    "shortDescription": "Specifies properties of the gauge's scale."
  },
  "BaseGaugeScaleLabel": {
    "shortDescription": "Specifies common properties for scale labels."
  },
  "BaseGaugeTooltip": {
    "shortDescription": "Configures tooltips."
  },
  "baseLabelObject": {
    "shortDescription": "This section describes the **Label** object, which represents a point label."
  },
  "baseLabelObject.getBoundingRect()": {
    "shortDescription": "Gets the parameters of the label's <a href=\"http://en.wikipedia.org/wiki/Minimum_bounding_rectangle\" target=\"_blank\">minimum bounding rectangle</a> (MBR)."
  },
  "baseLabelObject.hide()": {
    "shortDescription": "Hides the point label."
  },
  "baseLabelObject.hide(holdInvisible)": {
    "shortDescription": "Hides the point label and keeps it invisible until the [show()](/api-reference/10%20UI%20Components/BaseChart/7%20Chart%20Elements/Label/3%20Methods/show().md '{basewidgetpath}/Chart_Elements/Label/Methods/#show') method is called."
  },
  "baseLabelObject.isVisible()": {
    "shortDescription": "Checks whether the point label is visible."
  },
  "baseLabelObject.shift(x, y)": {
    "shortDescription": "Moves label to the specified location."
  },
  "baseLabelObject.show()": {
    "shortDescription": "Shows the point label."
  },
  "baseLabelObject.show(holdVisible)": {
    "shortDescription": "Shows the point label and keeps it visible until the [hide()](/api-reference/10%20UI%20Components/BaseChart/7%20Chart%20Elements/Label/3%20Methods/hide().md '{basewidgetpath}/Chart_Elements/Label/Methods/#hide') method is called."
  },
  "BaseLegend": {
    "shortDescription": ""
  },
  "BaseLegend.backgroundColor": {
    "shortDescription": "Colors the legend's background."
  },
  "BaseLegend.border": {
    "shortDescription": "Configures the legend's border."
  },
  "BaseLegend.border.color": {
    "shortDescription": "Colors the legend's border."
  },
  "BaseLegend.border.cornerRadius": {
    "shortDescription": "Makes all the legend's corners rounded."
  },
  "BaseLegend.border.dashStyle": {
    "shortDescription": "Sets a dash style for the legend's border."
  },
  "BaseLegend.border.opacity": {
    "shortDescription": "Specifies the transparency of the legend's border."
  },
  "BaseLegend.border.visible": {
    "shortDescription": "Shows the legend's border."
  },
  "BaseLegend.border.width": {
    "shortDescription": "Specifies the width of the legend's border in pixels."
  },
  "BaseLegend.columnCount": {
    "shortDescription": "Arranges legend items into several columns."
  },
  "BaseLegend.columnItemSpacing": {
    "shortDescription": "Specifies an empty space between item columns in pixels."
  },
  "BaseLegend.font": {
    "shortDescription": "Specifies the legend items' font properties."
  },
  "BaseLegend.horizontalAlignment": {
    "shortDescription": "Along with [verticalAlignment](/api-reference/10%20UI%20Components/BaseLegend/verticalAlignment.md '{basewidgetpath}/Configuration/legend/#verticalAlignment'), specifies the legend's position."
  },
  "BaseLegend.itemsAlignment": {
    "shortDescription": "Aligns items in the last column or row (depending on the legend's [orientation](/api-reference/10%20UI%20Components/BaseLegend/orientation.md '{basewidgetpath}/Configuration/legend/#orientation')). Applies when legend items are not divided into columns or rows equally."
  },
  "BaseLegend.itemTextPosition": {
    "shortDescription": "Specifies the text's position relative to the marker in a legend item."
  },
  "BaseLegend.margin": {
    "shortDescription": "Generates an empty space, measured in pixels, around the legend."
  },
  "BaseLegend.margin.bottom": {
    "shortDescription": "Specifies the legend's bottom margin in pixels."
  },
  "BaseLegend.margin.left": {
    "shortDescription": "Specifies the legend's left margin in pixels."
  },
  "BaseLegend.margin.right": {
    "shortDescription": "Specifies the legend's right margin in pixels."
  },
  "BaseLegend.margin.top": {
    "shortDescription": "Specifies the legend's top margin in pixels."
  },
  "BaseLegend.markerSize": {
    "shortDescription": "Specifies the marker's size in a legend item in pixels."
  },
  "BaseLegend.orientation": {
    "shortDescription": "Arranges legend items vertically (in a column) or horizontally (in a row). The default value is *\"horizontal\"* if the **legend**.[horizontalAlignment](/api-reference/10%20UI%20Components/BaseLegend/horizontalAlignment.md '{basewidgetpath}/Configuration/legend/#horizontalAlignment') is *\"center\"*. Otherwise, it is *\"vertical\"*."
  },
  "BaseLegend.paddingLeftRight": {
    "shortDescription": "Generates an empty space, measured in pixels, between the legend's left/right border and its items."
  },
  "BaseLegend.paddingTopBottom": {
    "shortDescription": "Generates an empty space, measured in pixels, between the legend's top/bottom border and its items."
  },
  "BaseLegend.rowCount": {
    "shortDescription": "Arranges legend items in several rows."
  },
  "BaseLegend.rowItemSpacing": {
    "shortDescription": "Specifies an empty space between item rows in pixels."
  },
  "BaseLegend.title": {
    "shortDescription": "Configures the legend title."
  },
  "BaseLegend.title.font": {
    "shortDescription": "Specifies the legend title's font properties."
  },
  "BaseLegend.title.horizontalAlignment": {
    "shortDescription": "Along with [verticalAlignment](/api-reference/10%20UI%20Components/BaseLegend/title/verticalAlignment.md '{basewidgetpath}/Configuration/legend/title/#verticalAlignment'), specifies the legend title's position."
  },
  "BaseLegend.title.margin": {
    "shortDescription": "Generates space around the legend title."
  },
  "BaseLegend.title.margin.bottom": {
    "shortDescription": "Specifies the legend title's bottom margin."
  },
  "BaseLegend.title.margin.left": {
    "shortDescription": "Specifies the legend title's left margin."
  },
  "BaseLegend.title.margin.right": {
    "shortDescription": "Specifies the legend title's right margin."
  },
  "BaseLegend.title.margin.top": {
    "shortDescription": "Specifies the legend title's top margin."
  },
  "BaseLegend.title.placeholderSize": {
    "shortDescription": "Reserves a pixel-measured space for the legend title."
  },
  "BaseLegend.title.subtitle": {
    "shortDescription": "Configures the legend subtitle. The subtitle appears only if the [title](/api-reference/10%20UI%20Components/BaseLegend/title '{basewidgetpath}/Configuration/legend/title/') is specified."
  },
  "BaseLegend.title.subtitle.font": {
    "shortDescription": "Specifies the legend subtitle's font properties."
  },
  "BaseLegend.title.subtitle.offset": {
    "shortDescription": "Specifies the distance between the legend's [title](/api-reference/10%20UI%20Components/BaseLegend/title '{basewidgetpath}/Configuration/legend/title/') and subtitle in pixels."
  },
  "BaseLegend.title.subtitle.text": {
    "shortDescription": "Specifies the subtitle's text."
  },
  "BaseLegend.title.text": {
    "shortDescription": "Specifies the legend title's text."
  },
  "BaseLegend.title.verticalAlignment": {
    "shortDescription": "Specifies the legend title's vertical alignment."
  },
  "BaseLegend.verticalAlignment": {
    "shortDescription": "Along with [horizontalAlignment](/api-reference/10%20UI%20Components/BaseLegend/horizontalAlignment.md '{basewidgetpath}/Configuration/legend/#horizontalAlignment'), specifies the legend's position."
  },
  "BaseLegend.visible": {
    "shortDescription": "Specifies the legend's visibility."
  },
  "BaseLegendItem": {
    "shortDescription": ""
  },
  "BaseLegendItem.marker": {
    "shortDescription": "A legend item marker."
  },
  "BaseLegendItem.marker.fill": {
    "shortDescription": "The marker's color."
  },
  "BaseLegendItem.marker.opacity": {
    "shortDescription": "The marker's opacity."
  },
  "BaseLegendItem.marker.size": {
    "shortDescription": "The [markerSize](/api-reference/10%20UI%20Components/BaseLegend/markerSize.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/legend/#markerSize') in pixels."
  },
  "BaseLegendItem.marker.state": {
    "shortDescription": "The marker's state."
  },
  "BaseLegendItem.text": {
    "shortDescription": "The text that the legend item displays."
  },
  "BaseLegendItem.visible": {
    "shortDescription": "Indicates and specifies whether the legend item is visible."
  },
  "basePointObject": {
    "shortDescription": "This section describes the **Point** object, which represents a series point."
  },
  "basePointObject.clearHover()": {
    "shortDescription": "Switches the point from the hover state back to normal."
  },
  "basePointObject.clearSelection()": {
    "shortDescription": "Deselects the point."
  },
  "basePointObject.data": {
    "shortDescription": "Contains the data object that the series point represents."
  },
  "basePointObject.fullState": {
    "shortDescription": "Provides information about the state of the **point** object."
  },
  "basePointObject.getColor()": {
    "shortDescription": "Gets the color of a particular point."
  },
  "basePointObject.getLabel()": {
    "shortDescription": "Allows you to obtain the label(s) of the series point."
  },
  "basePointObject.hideTooltip()": {
    "shortDescription": "Hides the tooltip of the point."
  },
  "basePointObject.hover()": {
    "shortDescription": "Switches the point into the hover state, the same as when a user places the mouse pointer on it."
  },
  "basePointObject.isHovered()": {
    "shortDescription": "Provides information about the hover state of a point."
  },
  "basePointObject.isSelected()": {
    "shortDescription": "Provides information about the selection state of a point."
  },
  "basePointObject.originalArgument": {
    "shortDescription": "Returns the point's argument value that was set in the data source."
  },
  "basePointObject.originalValue": {
    "shortDescription": "Returns the point's value that was set in the data source."
  },
  "basePointObject.select()": {
    "shortDescription": "Selects the point. The point is displayed in a 'selected' style until another point is selected or the current point is deselected programmatically."
  },
  "basePointObject.series": {
    "shortDescription": "Returns the series object to which the point belongs."
  },
  "basePointObject.showTooltip()": {
    "shortDescription": "Shows the tooltip of the point."
  },
  "basePointObject.tag": {
    "shortDescription": "Returns the tag of the point."
  },
  "baseSeriesObject": {
    "shortDescription": "This section describes the **Series** object, which represents a series."
  },
  "baseSeriesObject.clearHover()": {
    "shortDescription": "Switches the series from the hover state back to normal."
  },
  "baseSeriesObject.clearSelection()": {
    "shortDescription": "Cancels the [selection](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/selectionMode.md '{basewidgetpath}/Configuration/series/#selectionMode') of this particular series. The series is displayed in its initial style."
  },
  "baseSeriesObject.deselectPoint(point)": {
    "shortDescription": "Deselects the specified point. The point is displayed in an initial style."
  },
  "baseSeriesObject.fullState": {
    "shortDescription": "Provides information about the state of the **series** object."
  },
  "baseSeriesObject.getAllPoints()": {
    "shortDescription": "Gets all points in the series."
  },
  "baseSeriesObject.getColor()": {
    "shortDescription": "Gets the color of a particular series."
  },
  "baseSeriesObject.getPointByPos(positionIndex)": {
    "shortDescription": "Gets a series point with the specified index."
  },
  "baseSeriesObject.getPointsByArg(pointArg)": {
    "shortDescription": "Gets a series point with the specified argument value."
  },
  "baseSeriesObject.getVisiblePoints()": {
    "shortDescription": "Gets visible series points."
  },
  "baseSeriesObject.hide()": {
    "shortDescription": "Hides a series at runtime."
  },
  "baseSeriesObject.hover()": {
    "shortDescription": "Switches the series into the hover state, the same as when a user places the mouse pointer on it."
  },
  "baseSeriesObject.isHovered()": {
    "shortDescription": "Provides information about the hover state of a series."
  },
  "baseSeriesObject.isSelected()": {
    "shortDescription": "Provides information about the selection state of a series."
  },
  "baseSeriesObject.isVisible()": {
    "shortDescription": "Provides information about the visibility state of a series."
  },
  "baseSeriesObject.name": {
    "shortDescription": "Returns the name of the series."
  },
  "baseSeriesObject.select()": {
    "shortDescription": "Selects the series."
  },
  "baseSeriesObject.selectPoint(point)": {
    "shortDescription": "Selects the specified point. The point is displayed in a 'selected' style."
  },
  "baseSeriesObject.show()": {
    "shortDescription": "Makes a particular series visible."
  },
  "baseSeriesObject.tag": {
    "shortDescription": "Returns the [tag](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/ChartSeries/tag.md '{basewidgetpath}/Configuration/series/#tag') of the series."
  },
  "baseSeriesObject.type": {
    "shortDescription": "Returns the [type](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/ChartSeries/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/#type') of the series."
  },
  "BaseSparkline": {
    "shortDescription": "Overridden by descriptions for particular UI components."
  },
  "BaseSparkline.hideLoadingIndicator()": {
    "shortDescription": "Hides the loading indicator."
  },
  "BaseSparkline.showLoadingIndicator()": {
    "shortDescription": "Shows the loading indicator."
  },
  "BaseSparkline.tooltipHidden": {
    "shortDescription": "Raised when a tooltip becomes hidden."
  },
  "BaseSparkline.tooltipShown": {
    "shortDescription": "Raised when a tooltip appears."
  },
  "BaseSparklineOptions.export": {
    "shortDescription": "Configures the exporting and printing features."
  },
  "BaseSparklineOptions.loadingIndicator": {
    "shortDescription": "Configures the loading indicator."
  },
  "BaseSparklineOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "BaseSparklineOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "BaseSparklineOptions.redrawOnResize": {
    "shortDescription": "Specifies whether to redraw the UI component when the size of the container changes or a mobile device rotates."
  },
  "BaseSparklineOptions.title": {
    "shortDescription": "Configures the UI component's title."
  },
  "BaseSparklineOptions.tooltip": {
    "shortDescription": "Configures the tooltip."
  },
  "BaseSparklineOptions.tooltip.contentTemplate": {
    "shortDescription": "Specifies a custom template for tooltips."
  },
  "BaseSparklineOptions.tooltip.customizeTooltip": {
    "shortDescription": "Allows you to change tooltip appearance."
  },
  "BaseSparklineOptions.tooltip.enabled": {
    "shortDescription": "Specifies whether a tooltip is enabled."
  },
  "BaseSparklineOptions.tooltip.interactive": {
    "shortDescription": "<!-- %shortDescription% -->"
  },
  "BaseSparklineTooltip": {
    "shortDescription": "Configures the tooltip."
  },
  "BaseWidget": {
    "shortDescription": "This section describes properties and methods that are common to all UI components."
  },
  "BaseWidget.defaultOptions(rule)": {
    "shortDescription": "Specifies the device-dependent default configuration properties for this component."
  },
  "BaseWidget.drawn": {
    "shortDescription": "Raised when the UI component's rendering has finished."
  },
  "BaseWidget.exported": {
    "shortDescription": "Raised after the UI component is exported."
  },
  "BaseWidget.exporting": {
    "shortDescription": "Raised before the UI component is exported."
  },
  "BaseWidget.exportTo(fileName, format)": {
    "shortDescription": "Exports the UI component."
  },
  "BaseWidget.fileSaving": {
    "shortDescription": "Raised before a file with exported UI component is saved to the user's local storage."
  },
  "BaseWidget.getSize()": {
    "shortDescription": "Gets the current UI component size."
  },
  "BaseWidget.hideLoadingIndicator()": {
    "shortDescription": "Hides the loading indicator."
  },
  "BaseWidget.incidentOccurred": {
    "shortDescription": "Raised when an error or warning occurs."
  },
  "BaseWidget.print()": {
    "shortDescription": "Opens the browser's print window."
  },
  "BaseWidget.render()": {
    "shortDescription": "Redraws the UI component."
  },
  "BaseWidget.showLoadingIndicator()": {
    "shortDescription": "Shows the loading indicator."
  },
  "BaseWidget.svg()": {
    "shortDescription": "Gets the UI component's SVG markup."
  },
  "BaseWidgetAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "BaseWidgetAnnotationConfig.allowDragging": {
    "shortDescription": "Specifies whether users can drag and drop the annotation."
  },
  "BaseWidgetAnnotationConfig.arrowLength": {
    "shortDescription": "Specifies the length of the annotation's arrow in pixels."
  },
  "BaseWidgetAnnotationConfig.arrowWidth": {
    "shortDescription": "Specifies the width of the annotation's arrow at its junction with the annotation rectangle."
  },
  "BaseWidgetAnnotationConfig.border": {
    "shortDescription": "Configures the appearance of the annotation's border."
  },
  "BaseWidgetAnnotationConfig.border.color": {
    "shortDescription": "Colors the annotation's border."
  },
  "BaseWidgetAnnotationConfig.border.cornerRadius": {
    "shortDescription": "Makes the annotation's corners rounded."
  },
  "BaseWidgetAnnotationConfig.border.dashStyle": {
    "shortDescription": "Specifies the dash style of the annotation's border."
  },
  "BaseWidgetAnnotationConfig.border.opacity": {
    "shortDescription": "Specifies the opacity of the annotation's border."
  },
  "BaseWidgetAnnotationConfig.border.visible": {
    "shortDescription": "Specifies the visibility of the annotation's border."
  },
  "BaseWidgetAnnotationConfig.border.width": {
    "shortDescription": "Specifies the width of the annotation's border in pixels."
  },
  "BaseWidgetAnnotationConfig.color": {
    "shortDescription": "Specifies the color that fills the annotation."
  },
  "BaseWidgetAnnotationConfig.data": {
    "shortDescription": "A container for custom data."
  },
  "BaseWidgetAnnotationConfig.description": {
    "shortDescription": "Specifies the annotation's description in the [tooltip](/api-reference/_hidden/BaseWidgetAnnotationConfig/tooltipEnabled.md '{basewidgetpath}/Configuration/annotations/#tooltipEnabled')."
  },
  "BaseWidgetAnnotationConfig.font": {
    "shortDescription": "Specifies the annotation's font properties. Applies to [text annotations](/api-reference/_hidden/BaseWidgetAnnotationConfig/text.md '{basewidgetpath}/Configuration/annotations/#text') only."
  },
  "BaseWidgetAnnotationConfig.height": {
    "shortDescription": "Specifies the annotation's height in pixels."
  },
  "BaseWidgetAnnotationConfig.image": {
    "shortDescription": "Configures the image to be displayed in the annotation. Applies only if the [type](/api-reference/_hidden/BaseWidgetAnnotationConfig/type.md '{basewidgetpath}/Configuration/annotations/#type') is *\"image\"*."
  },
  "BaseWidgetAnnotationConfig.image.height": {
    "shortDescription": "Specifies the image's height in pixels."
  },
  "BaseWidgetAnnotationConfig.image.url": {
    "shortDescription": "Specifies the image's URL."
  },
  "BaseWidgetAnnotationConfig.image.width": {
    "shortDescription": "Specifies the image's width in pixels."
  },
  "BaseWidgetAnnotationConfig.offsetX": {
    "shortDescription": "Moves the annotation horizontally."
  },
  "BaseWidgetAnnotationConfig.offsetY": {
    "shortDescription": "Moves the annotation vertically."
  },
  "BaseWidgetAnnotationConfig.opacity": {
    "shortDescription": "Specifies the annotation's opacity."
  },
  "BaseWidgetAnnotationConfig.paddingLeftRight": {
    "shortDescription": "Used with [paddingTopBottom](/api-reference/_hidden/BaseWidgetAnnotationConfig/paddingTopBottom.md '{basewidgetpath}/Configuration/annotations/#paddingTopBottom') to generate an empty space around the annotation's text or image (specified in pixels)."
  },
  "BaseWidgetAnnotationConfig.paddingTopBottom": {
    "shortDescription": "Along with [paddingLeftRight](/api-reference/_hidden/BaseWidgetAnnotationConfig/paddingLeftRight.md '{basewidgetpath}/Configuration/annotations/#paddingLeftRight'), generates an empty space around the annotation's text or image; specified in pixels."
  },
  "BaseWidgetAnnotationConfig.shadow": {
    "shortDescription": "Configures the annotation's shadows."
  },
  "BaseWidgetAnnotationConfig.shadow.blur": {
    "shortDescription": "Specifies the blur distance of the shadows. A larger value increases the blur distance."
  },
  "BaseWidgetAnnotationConfig.shadow.color": {
    "shortDescription": "Colors the annotation's shadows."
  },
  "BaseWidgetAnnotationConfig.shadow.offsetX": {
    "shortDescription": "Moves the shadows horizontally."
  },
  "BaseWidgetAnnotationConfig.shadow.offsetY": {
    "shortDescription": "Moves the shadows vertically."
  },
  "BaseWidgetAnnotationConfig.shadow.opacity": {
    "shortDescription": "Specifies the opacity of the shadows."
  },
  "BaseWidgetAnnotationConfig.text": {
    "shortDescription": "Specifies the annotation's text. Applies only if the [type](/api-reference/_hidden/BaseWidgetAnnotationConfig/type.md '{basewidgetpath}/Configuration/annotations/#type') is *\"text\"*."
  },
  "BaseWidgetAnnotationConfig.textOverflow": {
    "shortDescription": "Specifies what to do with the annotation's [text](/api-reference/_hidden/BaseWidgetAnnotationConfig/text.md '{basewidgetpath}/Configuration/annotations/#text') when it overflows the allocated space after applying [wordWrap](/api-reference/_hidden/BaseWidgetAnnotationConfig/wordWrap.md '{basewidgetpath}/Configuration/annotations/#wordWrap'): hide, truncate it and display an ellipsis, or do nothing."
  },
  "BaseWidgetAnnotationConfig.tooltipEnabled": {
    "shortDescription": "Specifies whether the annotation tooltip is enabled."
  },
  "BaseWidgetAnnotationConfig.type": {
    "shortDescription": "Specifies whether the annotation displays [text](/api-reference/_hidden/BaseWidgetAnnotationConfig/text.md '{basewidgetpath}/Configuration/annotations/#text'), an [image](/api-reference/_hidden/BaseWidgetAnnotationConfig/image '{basewidgetpath}/Configuration/annotations/image/'), or a [template](/api-reference/_hidden/dxVectorMapCommonAnnotationConfig/template.md '{basewidgetpath}/Configuration/commonAnnotationSettings/#template'). This is a required setting."
  },
  "BaseWidgetAnnotationConfig.width": {
    "shortDescription": "Specifies the annotation's width in pixels."
  },
  "BaseWidgetAnnotationConfig.wordWrap": {
    "shortDescription": "Specifies how to wrap the annotation's [text](/api-reference/_hidden/BaseWidgetAnnotationConfig/text.md '{basewidgetpath}/Configuration/annotations/#text') if it does not fit into a single line."
  },
  "BaseWidgetAnnotationConfig.x": {
    "shortDescription": "Used with [y](/api-reference/_hidden/BaseWidgetAnnotationConfig/y.md '{basewidgetpath}/Configuration/annotations/#y') to position the annotation's center at a specific pixel coordinate. (0, 0) is the upper left corner of the UI component."
  },
  "BaseWidgetAnnotationConfig.y": {
    "shortDescription": "Used with [x](/api-reference/_hidden/BaseWidgetAnnotationConfig/x.md '{basewidgetpath}/Configuration/annotations/#x') to position the annotation's center at a specific pixel coordinate. (0, 0) is the upper left corner of the UI component."
  },
  "BaseWidgetExport": {
    "shortDescription": "Configures the exporting and printing features."
  },
  "BaseWidgetLoadingIndicator": {
    "shortDescription": "Configures the loading indicator."
  },
  "BaseWidgetMargin": {
    "shortDescription": "Generates space around the UI component."
  },
  "BaseWidgetOptions.disabled": {
    "shortDescription": "Specifies whether the UI component responds to user interaction."
  },
  "BaseWidgetOptions.export": {
    "shortDescription": "Configures the exporting and printing features."
  },
  "BaseWidgetOptions.export.backgroundColor": {
    "shortDescription": "Specifies the color that will fill transparent regions in the resulting file or document."
  },
  "BaseWidgetOptions.export.enabled": {
    "shortDescription": "Enables the client-side exporting in the UI component."
  },
  "BaseWidgetOptions.export.fileName": {
    "shortDescription": "Specifies a default name for the file to which the UI component will be exported."
  },
  "BaseWidgetOptions.export.formats": {
    "shortDescription": "Specifies a set of export formats."
  },
  "BaseWidgetOptions.export.margin": {
    "shortDescription": "Adds an empty space around the exported UI component; measured in pixels."
  },
  "BaseWidgetOptions.export.printingEnabled": {
    "shortDescription": "Enables the printing feature in the UI component. Applies only if the **export**.[enabled](/api-reference/10%20UI%20Components/BaseWidget/1%20Configuration/export/enabled.md '{basewidgetpath}/Configuration/export#enabled') property is **true**."
  },
  "BaseWidgetOptions.export.svgToCanvas": {
    "shortDescription": "A function that renders SVG markup on the HTML canvas. Required to export custom SVG elements (for example, [markerTemplate](/api-reference/10%20UI%20Components/BaseChart/1%20Configuration/legend/markerTemplate.md '{basewidgetpath}/Configuration/legend/#markerTemplate'))."
  },
  "BaseWidgetOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "BaseWidgetOptions.loadingIndicator": {
    "shortDescription": "Configures the loading indicator."
  },
  "BaseWidgetOptions.loadingIndicator.backgroundColor": {
    "shortDescription": "Colors the background of the loading indicator."
  },
  "BaseWidgetOptions.loadingIndicator.enabled": {
    "shortDescription": "Specifies whether the loading indicator should be displayed and hidden automatically."
  },
  "BaseWidgetOptions.loadingIndicator.font": {
    "shortDescription": "Specifies font properties for the loading indicator."
  },
  "BaseWidgetOptions.loadingIndicator.show": {
    "shortDescription": "Allows you to change the loading indicator's visibility."
  },
  "BaseWidgetOptions.loadingIndicator.text": {
    "shortDescription": "Specifies the text to be displayed by the loading indicator."
  },
  "BaseWidgetOptions.margin": {
    "shortDescription": "Generates space around the UI component."
  },
  "BaseWidgetOptions.margin.bottom": {
    "shortDescription": "Specifies the bottom margin of the UI component in pixels."
  },
  "BaseWidgetOptions.margin.left": {
    "shortDescription": "Specifies the left margin of the UI component in pixels."
  },
  "BaseWidgetOptions.margin.right": {
    "shortDescription": "Specifies the right margin of the UI component in pixels."
  },
  "BaseWidgetOptions.margin.top": {
    "shortDescription": "Specifies the top margin of the UI component in pixels."
  },
  "BaseWidgetOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "BaseWidgetOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "BaseWidgetOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "BaseWidgetOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "BaseWidgetOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "BaseWidgetOptions.pathModified": {
    "shortDescription": "Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path."
  },
  "BaseWidgetOptions.redrawOnResize": {
    "shortDescription": "Specifies whether to redraw the UI component when the size of the container changes or a mobile device rotates."
  },
  "BaseWidgetOptions.rtlEnabled": {
    "shortDescription": "Switches the UI component to a right-to-left representation."
  },
  "BaseWidgetOptions.size": {
    "shortDescription": "Specifies the UI component's size in pixels."
  },
  "BaseWidgetOptions.size.height": {
    "shortDescription": "Specifies the height of the UI component in pixels."
  },
  "BaseWidgetOptions.size.width": {
    "shortDescription": "Specifies the width of the UI component in pixels."
  },
  "BaseWidgetOptions.theme": {
    "shortDescription": "Sets the name of the theme the UI component uses."
  },
  "BaseWidgetOptions.title": {
    "shortDescription": "Configures the UI component's title."
  },
  "BaseWidgetOptions.title.font": {
    "shortDescription": "Specifies font properties for the title."
  },
  "BaseWidgetOptions.title.horizontalAlignment": {
    "shortDescription": "Specifies the title's alignment in a horizontal direction."
  },
  "BaseWidgetOptions.title.margin": {
    "shortDescription": "Generates space around the title."
  },
  "BaseWidgetOptions.title.margin.bottom": {
    "shortDescription": "Specifies the bottom margin of the title."
  },
  "BaseWidgetOptions.title.margin.left": {
    "shortDescription": "Specifies the left margin of the title."
  },
  "BaseWidgetOptions.title.margin.right": {
    "shortDescription": "Specifies the right margin of the title."
  },
  "BaseWidgetOptions.title.margin.top": {
    "shortDescription": "Specifies the top margin of the title."
  },
  "BaseWidgetOptions.title.placeholderSize": {
    "shortDescription": "Reserves a pixel-measured space for the title."
  },
  "BaseWidgetOptions.title.subtitle": {
    "shortDescription": "Configures the UI component's subtitle."
  },
  "BaseWidgetOptions.title.subtitle.font": {
    "shortDescription": "Specifies font properties for the subtitle."
  },
  "BaseWidgetOptions.title.subtitle.offset": {
    "shortDescription": "Specifies the distance between the [title](/api-reference/10%20UI%20Components/BaseWidget/1%20Configuration/title '{basewidgetpath}/Configuration/title/') and subtitle in pixels."
  },
  "BaseWidgetOptions.title.subtitle.text": {
    "shortDescription": "Specifies text for the subtitle."
  },
  "BaseWidgetOptions.title.subtitle.textOverflow": {
    "shortDescription": "Specifies what to do with the subtitle when it overflows the allocated space after applying [wordWrap](/api-reference/10%20UI%20Components/BaseWidget/1%20Configuration/title/subtitle/wordWrap.md '{basewidgetpath}/Configuration/title/subtitle/#wordWrap'): hide, truncate it and display an ellipsis, or do nothing."
  },
  "BaseWidgetOptions.title.subtitle.wordWrap": {
    "shortDescription": "Specifies how to wrap the subtitle if it does not fit into a single line."
  },
  "BaseWidgetOptions.title.text": {
    "shortDescription": "Specifies the title's text."
  },
  "BaseWidgetOptions.title.textOverflow": {
    "shortDescription": "Specifies what to do with the title when it overflows the allocated space after applying [wordWrap](/api-reference/10%20UI%20Components/BaseWidget/1%20Configuration/title/wordWrap.md '{basewidgetpath}/Configuration/title/#wordWrap'): hide, truncate it and display an ellipsis, or do nothing."
  },
  "BaseWidgetOptions.title.verticalAlignment": {
    "shortDescription": "Specifies the title's alignment in a vertical direction."
  },
  "BaseWidgetOptions.title.wordWrap": {
    "shortDescription": "Specifies how to wrap the title if it does not fit into a single line."
  },
  "BaseWidgetOptions.tooltip": {
    "shortDescription": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer."
  },
  "BaseWidgetOptions.tooltip.arrowLength": {
    "shortDescription": "Specifies the length of a tooltip's arrow in pixels."
  },
  "BaseWidgetOptions.tooltip.border": {
    "shortDescription": "Configures a tooltip's border."
  },
  "BaseWidgetOptions.tooltip.border.color": {
    "shortDescription": "Colors a tooltip's border."
  },
  "BaseWidgetOptions.tooltip.border.dashStyle": {
    "shortDescription": "Specifies the dash style of a tooltip's border."
  },
  "BaseWidgetOptions.tooltip.border.opacity": {
    "shortDescription": "Specifies the transparency of a tooltip's border."
  },
  "BaseWidgetOptions.tooltip.border.visible": {
    "shortDescription": "Specifies whether a tooltip's border is visible."
  },
  "BaseWidgetOptions.tooltip.border.width": {
    "shortDescription": "Specifies the width of a tooltip's border in pixels."
  },
  "BaseWidgetOptions.tooltip.color": {
    "shortDescription": "Colors all tooltips."
  },
  "BaseWidgetOptions.tooltip.container": {
    "shortDescription": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `<body>` element."
  },
  "BaseWidgetOptions.tooltip.cornerRadius": {
    "shortDescription": "Makes all the tooltip's corners rounded."
  },
  "BaseWidgetOptions.tooltip.enabled": {
    "shortDescription": "Enables tooltips."
  },
  "BaseWidgetOptions.tooltip.font": {
    "shortDescription": "Specifies tooltips' font properties."
  },
  "BaseWidgetOptions.tooltip.format": {
    "shortDescription": "Formats a value before it is displayed it in a tooltip."
  },
  "BaseWidgetOptions.tooltip.opacity": {
    "shortDescription": "Specifies tooltips' transparency."
  },
  "BaseWidgetOptions.tooltip.paddingLeftRight": {
    "shortDescription": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
  },
  "BaseWidgetOptions.tooltip.paddingTopBottom": {
    "shortDescription": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
  },
  "BaseWidgetOptions.tooltip.shadow": {
    "shortDescription": "Configures a tooltip's shadow."
  },
  "BaseWidgetOptions.tooltip.shadow.blur": {
    "shortDescription": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
  },
  "BaseWidgetOptions.tooltip.shadow.color": {
    "shortDescription": "Colors a tooltip's shadow."
  },
  "BaseWidgetOptions.tooltip.shadow.offsetX": {
    "shortDescription": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
  },
  "BaseWidgetOptions.tooltip.shadow.offsetY": {
    "shortDescription": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
  },
  "BaseWidgetOptions.tooltip.shadow.opacity": {
    "shortDescription": "Specifies the transparency of a tooltip's shadow."
  },
  "BaseWidgetOptions.tooltip.zIndex": {
    "shortDescription": "Specifies a tooltip's z-index."
  },
  "BaseWidgetOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "BaseWidgetSize": {
    "shortDescription": "Specifies the UI component's size in pixels."
  },
  "BaseWidgetTitle": {
    "shortDescription": "Configures the UI component's title."
  },
  "BaseWidgetTooltip": {
    "shortDescription": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer."
  },
  "Cancelable": {
    "shortDescription": "A type used in events. Specifies whether the event is cancelable."
  },
  "Cancelable.cancel": {
    "shortDescription": "Specifies whether the event is cancelable."
  },
  "CellAddress": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellAddress.column": {
    "shortDescription": "The index of a column that contains the cell."
  },
  "CellAddress.row": {
    "shortDescription": "The index of a row that contains the cell."
  },
  "CellInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.displayValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellInfo.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CellRange": {
    "shortDescription": "The coordinates of the exported DataGrid in the Excel file."
  },
  "CellRange.from": {
    "shortDescription": "Coordinates of the top left cell."
  },
  "CellRange.to": {
    "shortDescription": "Coordinates of the bottom right cell."
  },
  "ChangedOptionInfo": {
    "shortDescription": "Specifies arguments of `optionChanged` event."
  },
  "ChangedOptionInfo.fullName": {
    "shortDescription": "The path to the modified property that includes all parent properties."
  },
  "ChangedOptionInfo.name": {
    "shortDescription": "The modified property if it belongs to the first level. Otherwise, the first-level property into which it is nested."
  },
  "ChangedOptionInfo.previousValue": {
    "shortDescription": "The UI component's previous value."
  },
  "ChangedOptionInfo.value": {
    "shortDescription": "The modified property's new value."
  },
  "chartAxisObject": {
    "shortDescription": "This section describes the **Axis** object. This object represents a [chart axis](/concepts/05%20UI%20Components/Chart/20%20Axes/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Axes/Overview/')."
  },
  "chartAxisObject.visualRange()": {
    "shortDescription": "Gets the axis' displayed range."
  },
  "chartAxisObject.visualRange(visualRange)": {
    "shortDescription": "Sets the axis's displayed range."
  },
  "chartPointAggregationInfoObject.aggregationInterval": {
    "shortDescription": "Contains the length of the aggregation interval in axis units (numbers or dates). If the interval is set in pixels (using the [aggregationGroupWidth](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/aggregationGroupWidth.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#aggregationGroupWidth') property), it will be converted to axis units."
  },
  "chartPointAggregationInfoObject.data": {
    "shortDescription": "Contains data objects that were aggregated into this point."
  },
  "chartPointAggregationInfoObject.intervalEnd": {
    "shortDescription": "Contains the end value of the interval to which the point belongs."
  },
  "chartPointAggregationInfoObject.intervalStart": {
    "shortDescription": "Contains the start value of the interval to which the point belongs."
  },
  "chartPointObject": {
    "shortDescription": "This section describes the **Point** object, which represents a series point."
  },
  "chartPointObject.aggregationInfo": {
    "shortDescription": "Provides information about the aggregation interval and the data objects that fall within it."
  },
  "chartPointObject.getBoundingRect()": {
    "shortDescription": "Gets the parameters of the point's <a href=\"http://en.wikipedia.org/wiki/Minimum_bounding_rectangle\" target=\"_blank\">minimum bounding rectangle</a> (MBR)."
  },
  "chartPointObject.originalCloseValue": {
    "shortDescription": "Contains the close value of the point. This field is useful for points belonging to a series of the [candle stick](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CandleStickSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/CandleStickSeries/') or [stock](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StockSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StockSeries/') type only."
  },
  "chartPointObject.originalHighValue": {
    "shortDescription": "Contains the high value of the point. This field is useful for points belonging to a series of the [candle stick](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CandleStickSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/CandleStickSeries/') or [stock](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StockSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StockSeries/') type only."
  },
  "chartPointObject.originalLowValue": {
    "shortDescription": "Contains the low value of the point. This field is useful for points belonging to a series of the [candle stick](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CandleStickSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/CandleStickSeries/') or [stock](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StockSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StockSeries/') type only."
  },
  "chartPointObject.originalMinValue": {
    "shortDescription": "Contains the first value of the point. This field is useful for points belonging to a series of the [range area](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/RangeAreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/RangeAreaSeries/') or [range bar](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/RangeBarSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/RangeBarSeries/') type only."
  },
  "chartPointObject.originalOpenValue": {
    "shortDescription": "Contains the open value of the point. This field is useful for points belonging to a series of the [candle stick](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CandleStickSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/CandleStickSeries/') or [stock](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StockSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StockSeries/') type only."
  },
  "chartPointObject.size": {
    "shortDescription": "Contains the size of the bubble as it was set in the data source. This field is useful for points belonging to a series of the [bubble](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/BubbleSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/BubbleSeries/') type only."
  },
  "ChartsColor": {
    "shortDescription": "Specifies the chart's color."
  },
  "ChartsColor.base": {
    "shortDescription": "Specifies the base color for series, points and labels."
  },
  "ChartsColor.fillId": {
    "shortDescription": "Specifies the id of the gradient or pattern."
  },
  "ChartSeries": {
    "shortDescription": "Specifies properties for Chart UI component series."
  },
  "ChartSeries.name": {
    "shortDescription": "Specifies the name that identifies the series."
  },
  "ChartSeries.tag": {
    "shortDescription": "Specifies data about a series."
  },
  "ChartSeries.type": {
    "shortDescription": "Sets the series type."
  },
  "chartSeriesObject": {
    "shortDescription": "This section describes the **Series** object, which represents a series."
  },
  "chartSeriesObject.axis": {
    "shortDescription": "Returns the name of the value [axis](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/axis.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/commonSeriesSettings/#axis') of the series."
  },
  "chartSeriesObject.barOverlapGroup": {
    "shortDescription": "The name of the series' [barOverlapGroup](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/barOverlapGroup.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/#barOverlapGroup')."
  },
  "chartSeriesObject.getArgumentAxis()": {
    "shortDescription": "Gets the argument axis to which the series belongs."
  },
  "chartSeriesObject.getValueAxis()": {
    "shortDescription": "Gets the value axis to which the series belongs."
  },
  "chartSeriesObject.pane": {
    "shortDescription": "Returns the name of the series [pane](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/pane.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/commonSeriesSettings/#pane')."
  },
  "chartSeriesObject.stack": {
    "shortDescription": "The name of the series' [stack](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/stack.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/#stack')."
  },
  "circularRangeBar": {
    "shortDescription": "An object that defines a gauge indicator of the **rangeBar** type."
  },
  "circularRectangleNeedle": {
    "shortDescription": "An object that defines a gauge indicator of the **rectangleNeedle** type."
  },
  "circularTextCloud": {
    "shortDescription": "An object that defines a gauge indicator of the **textCloud** type."
  },
  "circularTriangleMarker": {
    "shortDescription": "An object that defines a gauge indicator of the **triangleMarker** type."
  },
  "circularTriangleNeedle": {
    "shortDescription": "An object that defines a gauge indicator of the **triangleNeedle** type."
  },
  "circularTwoColorNeedle": {
    "shortDescription": "An object that defines a gauge indicator of the **twoColorNeedle** type."
  },
  "ColCountResponsible": {
    "shortDescription": "Specifies dependency between the screen factor and the count of columns."
  },
  "ColCountResponsible.lg": {
    "shortDescription": "The count of columns for a large screen size."
  },
  "ColCountResponsible.md": {
    "shortDescription": "The count of columns for a middle-sized screen."
  },
  "ColCountResponsible.sm": {
    "shortDescription": "The count of columns for a small-sized screen."
  },
  "ColCountResponsible.xs": {
    "shortDescription": "The count of columns for an extra small-sized screen."
  },
  "CollectionWidget": {
    "shortDescription": "The base class for UI components containing an item collection."
  },
  "CollectionWidget.deleteItem(itemElement)": {
    "shortDescription": ""
  },
  "CollectionWidget.getFocusedItemId()": {
    "shortDescription": ""
  },
  "CollectionWidget.isItemSelected(itemElement)": {
    "shortDescription": ""
  },
  "CollectionWidget.itemClick": {
    "shortDescription": "Raised when a collection item is clicked or tapped."
  },
  "CollectionWidget.itemContextMenu": {
    "shortDescription": "Raised when a collection item is right-clicked or pressed."
  },
  "CollectionWidget.itemDeleted": {
    "shortDescription": "Raised after a collection item is deleted from the data source."
  },
  "CollectionWidget.itemDeleting": {
    "shortDescription": "Raised before a collection item is deleted from the data source."
  },
  "CollectionWidget.itemElements()": {
    "shortDescription": ""
  },
  "CollectionWidget.itemHold": {
    "shortDescription": "Raised when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "CollectionWidget.itemRendered": {
    "shortDescription": "Raised after a collection item is rendered."
  },
  "CollectionWidget.itemReordered": {
    "shortDescription": "Raised after a collection item is moved to another position."
  },
  "CollectionWidget.itemsContainer()": {
    "shortDescription": ""
  },
  "CollectionWidget.reorderItem(itemElement, toItemElement)": {
    "shortDescription": ""
  },
  "CollectionWidget.selectionChanged": {
    "shortDescription": "Raised after selection changes."
  },
  "CollectionWidget.selectionChanging": {
    "shortDescription": "Raised before selection changes."
  },
  "CollectionWidget.selectItem(itemElement)": {
    "shortDescription": ""
  },
  "CollectionWidget.unselectItem(itemElement)": {
    "shortDescription": ""
  },
  "CollectionWidgetItem.disabled": {
    "shortDescription": "Specifies whether the UI component item responds to user interaction."
  },
  "CollectionWidgetItem.html": {
    "shortDescription": "Specifies the HTML markup to be inserted into the item element."
  },
  "CollectionWidgetItem.template": {
    "shortDescription": "Specifies a template that should be used to render this item only."
  },
  "CollectionWidgetItem.text": {
    "shortDescription": "Specifies text displayed for the UI component item."
  },
  "CollectionWidgetItem.visible": {
    "shortDescription": "Specifies whether or not a UI component item must be displayed."
  },
  "CollectionWidgetOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "CollectionWidgetOptions.itemHoldTimeout": {
    "shortDescription": "The time period in milliseconds before the **onItemHold** event is raised."
  },
  "CollectionWidgetOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "CollectionWidgetOptions.itemTemplate": {
    "shortDescription": "Specifies a custom template for items."
  },
  "CollectionWidgetOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "CollectionWidgetOptions.loopItemFocus": {
    "shortDescription": ""
  },
  "CollectionWidgetOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "CollectionWidgetOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "CollectionWidgetOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "CollectionWidgetOptions.onItemDeleted": {
    "shortDescription": "A function that is executed after a collection item is deleted from the data source."
  },
  "CollectionWidgetOptions.onItemDeleting": {
    "shortDescription": "A function that is executed before a collection item is deleted from the data source."
  },
  "CollectionWidgetOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "CollectionWidgetOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "CollectionWidgetOptions.onItemReordered": {
    "shortDescription": "A function that is executed after a collection item is moved to another position."
  },
  "CollectionWidgetOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "CollectionWidgetOptions.onSelectionChanging": {
    "shortDescription": "A function that is called before selection changes."
  },
  "CollectionWidgetOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "CollectionWidgetOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "CollectionWidgetOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "CollectionWidgetOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "CollectionWidgetOptions.selectionMode": {
    "shortDescription": ""
  },
  "CollectionWidgetOptions.selectionRequired": {
    "shortDescription": ""
  },
  "CollectionWidgetOptions.selectOnFocus": {
    "shortDescription": ""
  },
  "ColumnChooser": {
    "shortDescription": "Configures the column chooser."
  },
  "ColumnChooserSearchConfig": {
    "shortDescription": "Configures the column chooser's search functionality."
  },
  "ColumnChooserSearchConfig.editorOptions": {
    "shortDescription": "Configures the search box."
  },
  "ColumnChooserSearchConfig.enabled": {
    "shortDescription": "Specifies whether search is enabled in the column chooser."
  },
  "ColumnChooserSearchConfig.timeout": {
    "shortDescription": "Specifies a timeout, in milliseconds, during which a user may continue to modify the search value without starting the search operation."
  },
  "ColumnChooserSelectionConfig": {
    "shortDescription": "Configures column selection functionality within the column chooser."
  },
  "ColumnChooserSelectionConfig.allowSelectAll": {
    "shortDescription": "Specifies whether a \"Select All\" option is available to users."
  },
  "ColumnChooserSelectionConfig.recursive": {
    "shortDescription": "Specifies whether selection is recursive."
  },
  "ColumnChooserSelectionConfig.selectByClick": {
    "shortDescription": "Specifies whether an item becomes selected if a user clicks the item's label."
  },
  "ColumnFixing": {
    "shortDescription": "Configures column fixing."
  },
  "ColumnFixingIcons": {
    "shortDescription": "Configures column fixing icons."
  },
  "ColumnFixingTexts": {
    "shortDescription": "Contains properties that specify texts for column fixing commands in the context menu of a column header."
  },
  "ColumnHeaderFilterSearchConfig": {
    "shortDescription": "Configures the header filter's search."
  },
  "ColumnHeaderFilterSearchConfig.searchExpr": {
    "shortDescription": "Specifies a data object's field name or an expression whose value is compared to the search string."
  },
  "CommonIndicator": {
    "shortDescription": "A base object for gauge value and subvalue indicators. Includes the properties of indicators of all types."
  },
  "CommonIndicator.arrowLength": {
    "shortDescription": "Specifies the length of an arrow for the indicator of the *textCloud* type in pixels."
  },
  "CommonIndicator.backgroundColor": {
    "shortDescription": "Specifies the background color for the indicator of the *rangeBar* type."
  },
  "CommonIndicator.baseValue": {
    "shortDescription": "Specifies the base value for the indicator of the *rangeBar* type."
  },
  "CommonIndicator.beginAdaptingAtRadius": {
    "shortDescription": "Specifies a radius small enough for the indicator to begin adapting."
  },
  "CommonIndicator.color": {
    "shortDescription": "Specifies the color of the indicator."
  },
  "CommonIndicator.horizontalOrientation": {
    "shortDescription": "Specifies the orientation of the *rangeBar* indicator. Applies only if the **geometry**.[orientation](/api-reference/10%20UI%20Components/dxLinearGauge/1%20Configuration/geometry/orientation.md '/Documentation/ApiReference/UI_Components/dxLinearGauge/Configuration/geometry/#orientation') property is *\"vertical\"*."
  },
  "CommonIndicator.indentFromCenter": {
    "shortDescription": "Specifies the distance between the needle and the center of a gauge for the indicator of a needle-like type."
  },
  "CommonIndicator.length": {
    "shortDescription": "Specifies the indicator length."
  },
  "CommonIndicator.offset": {
    "shortDescription": "Specifies the distance between the indicator and the invisible scale line."
  },
  "CommonIndicator.palette": {
    "shortDescription": "Sets the palette to be used to colorize indicators differently."
  },
  "CommonIndicator.secondColor": {
    "shortDescription": "Specifies the second color for the indicator of the *twoColorNeedle* type."
  },
  "CommonIndicator.secondFraction": {
    "shortDescription": "Specifies the length of a *twoNeedleColor* type indicator tip as a percentage."
  },
  "CommonIndicator.size": {
    "shortDescription": "Specifies the range bar size for an indicator of the *rangeBar* type."
  },
  "CommonIndicator.spindleGapSize": {
    "shortDescription": "Specifies the inner diameter in pixels, so that the spindle has the shape of a ring."
  },
  "CommonIndicator.spindleSize": {
    "shortDescription": "Specifies the spindle's diameter in pixels for the indicator of a needle-like type."
  },
  "CommonIndicator.text": {
    "shortDescription": "Specifies the appearance of the text displayed in an indicator of the *rangeBar* type."
  },
  "CommonIndicator.text.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed in an indicator."
  },
  "CommonIndicator.text.font": {
    "shortDescription": "Specifies font properties for the text displayed by the indicator."
  },
  "CommonIndicator.text.format": {
    "shortDescription": "Formats a value before it is displayed in an indicator. Accepts only numeric formats."
  },
  "CommonIndicator.text.indent": {
    "shortDescription": "Specifies the range bar's label indent in pixels."
  },
  "CommonIndicator.verticalOrientation": {
    "shortDescription": "Specifies the orientation of the *rangeBar* indicator. Applies only if the **geometry**.[orientation](/api-reference/10%20UI%20Components/dxLinearGauge/1%20Configuration/geometry/orientation.md '/Documentation/ApiReference/UI_Components/dxLinearGauge/Configuration/geometry/#orientation') property is *\"horizontal\"*."
  },
  "CommonIndicator.width": {
    "shortDescription": "Specifies the width of an indicator in pixels."
  },
  "CompareRule": {
    "shortDescription": "A validation rule that demands that a validated editor has a value that is equal to a specified expression."
  },
  "CompareRule.comparisonTarget": {
    "shortDescription": "Specifies the function whose return value is used for comparison with the validated value."
  },
  "CompareRule.comparisonType": {
    "shortDescription": "Specifies the operator to be used for comparing the validated value with the [target](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/CompareRule/comparisonTarget.md '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/CompareRule/#comparisonTarget')."
  },
  "CompareRule.ignoreEmptyValue": {
    "shortDescription": "If set to **true**, empty values are valid."
  },
  "CompareRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "CompareRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"compare\"* to use the **CompareRule**."
  },
  "Component": {
    "shortDescription": "A base class for all components and UI components."
  },
  "Component.beginUpdate()": {
    "shortDescription": "Postpones rendering that can negatively affect performance until the [endUpdate()](/api-reference/10%20UI%20Components/Component/3%20Methods/endUpdate().md '{basewidgetpath}/Methods/#endUpdate') method is called."
  },
  "Component.ctor(options)": {
    "shortDescription": ""
  },
  "Component.disposing": {
    "shortDescription": "Raised before the UI component is [disposed of](/api-reference/10%20UI%20Widgets/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "Component.endUpdate()": {
    "shortDescription": "Refreshes the UI component after a call of the [beginUpdate()](/api-reference/10%20UI%20Components/Component/3%20Methods/beginUpdate().md '{basewidgetpath}/Methods/#beginUpdate') method."
  },
  "Component.initialized": {
    "shortDescription": "Raised only once, after the UI component is initialized."
  },
  "Component.instance()": {
    "shortDescription": "Gets the UI component's instance. Use it to access other methods of the UI component."
  },
  "Component.off(eventName)": {
    "shortDescription": "Detaches all event handlers from a single event."
  },
  "Component.off(eventName, eventHandler)": {
    "shortDescription": "Detaches a particular event handler from a single event."
  },
  "Component.on(eventName, eventHandler)": {
    "shortDescription": "Subscribes to an event."
  },
  "Component.on(events)": {
    "shortDescription": "Subscribes to events."
  },
  "Component.option()": {
    "shortDescription": "Gets all [UI component properties](/api-reference/10%20UI%20Components/Component/1%20Configuration '{basewidgetpath}/Configuration/')."
  },
  "Component.option(optionName)": {
    "shortDescription": "Gets the value of a single property."
  },
  "Component.option(optionName, optionValue)": {
    "shortDescription": "Updates the value of a single property."
  },
  "Component.option(options)": {
    "shortDescription": "Updates the values of several properties."
  },
  "Component.optionChanged": {
    "shortDescription": "Raised after a UI component property is changed."
  },
  "Component.resetOption(optionName)": {
    "shortDescription": "Resets a property to its default value."
  },
  "ComponentOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Widgets/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "ComponentOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "ComponentOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "config()": {
    "shortDescription": "Gets the current global configuration."
  },
  "config(config)": {
    "shortDescription": "Configures your application before its launch."
  },
  "Converter": {
    "shortDescription": "An object that configures converter settings."
  },
  "Converter.fromHtml": {
    "shortDescription": "A function that converts an HtmlEditor value from HTML to another markup language."
  },
  "Converter.toHtml": {
    "shortDescription": "A function that converts an HtmlEditor value from a markup language to HTML."
  },
  "CustomCommand": {
    "shortDescription": "An object that provides information about a custom command in the [Diagram](/api-reference/10%20UI%20Components/dxDiagram '/Documentation/ApiReference/UI_Components/dxDiagram/') UI component."
  },
  "CustomCommand.icon": {
    "shortDescription": "Specifies the custom command's icon."
  },
  "CustomCommand.items": {
    "shortDescription": "Lists command sub items."
  },
  "CustomCommand.location": {
    "shortDescription": "Specifies a location for the command or separator on the main toolbar."
  },
  "CustomCommand.name": {
    "shortDescription": "Specifies the custom command's identifier."
  },
  "CustomCommand.text": {
    "shortDescription": "Specifies the custom command's text and tooltip text."
  },
  "CustomFileSystemProvider": {
    "shortDescription": "A custom file system provider allows you to implement custom APIs to access and use file systems."
  },
  "CustomFileSystemProviderOptions.abortFileUpload": {
    "shortDescription": "A function that cancels the file upload."
  },
  "CustomFileSystemProviderOptions.copyItem": {
    "shortDescription": "A function that copies files or directories."
  },
  "CustomFileSystemProviderOptions.createDirectory": {
    "shortDescription": "A function that creates a directory."
  },
  "CustomFileSystemProviderOptions.deleteItem": {
    "shortDescription": "A function that deletes a file or directory."
  },
  "CustomFileSystemProviderOptions.downloadItems": {
    "shortDescription": "A function that downloads files."
  },
  "CustomFileSystemProviderOptions.getItems": {
    "shortDescription": "A function that gets file system items."
  },
  "CustomFileSystemProviderOptions.getItemsContent": {
    "shortDescription": "A function that get items content."
  },
  "CustomFileSystemProviderOptions.hasSubDirectoriesExpr": {
    "shortDescription": "A function or the name of a data source field that provides information on whether a file or directory contains sub directories."
  },
  "CustomFileSystemProviderOptions.moveItem": {
    "shortDescription": "A function that moves files and directories."
  },
  "CustomFileSystemProviderOptions.renameItem": {
    "shortDescription": "A function that renames files and directories."
  },
  "CustomFileSystemProviderOptions.uploadFileChunk": {
    "shortDescription": "A function that uploads a file in chunks."
  },
  "CustomItemCreatingInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CustomItemCreatingInfo.customItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CustomItemCreatingInfo.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "CustomRule": {
    "shortDescription": "A rule with custom validation logic."
  },
  "CustomRule.ignoreEmptyValue": {
    "shortDescription": "If **true**, the [validationCallback](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/CustomRule/validationCallback.md '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/CustomRule/#validationCallback') is not executed for **null**, **undefined**, **false**, and empty strings."
  },
  "CustomRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "CustomRule.reevaluate": {
    "shortDescription": "Indicates whether the rule should be always checked for the target value or only when the target value changes."
  },
  "CustomRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"custom\"* to use the **CustomRule**."
  },
  "CustomRule.validationCallback": {
    "shortDescription": "A function that validates the target value."
  },
  "CustomStore": {
    "shortDescription": "The **CustomStore** enables you to implement custom data access logic for consuming data from any source."
  },
  "CustomStore.byKey(key, extraOptions)": {
    "shortDescription": "Gets a data item with a specific key."
  },
  "CustomStore.clearRawDataCache()": {
    "shortDescription": "Deletes data from the cache. Takes effect only if the [cacheRawData](/api-reference/30%20Data%20Layer/CustomStore/1%20Configuration/cacheRawData.md '/Documentation/ApiReference/Data_Layer/CustomStore/Configuration/#cacheRawData') property is **true**."
  },
  "CustomStore.load()": {
    "shortDescription": "Starts loading data."
  },
  "CustomStore.load(options)": {
    "shortDescription": "Starts loading data."
  },
  "CustomStore.loaded": {
    "shortDescription": "Raised after data is loaded to the store."
  },
  "CustomStoreOptions.byKey": {
    "shortDescription": "Specifies a custom implementation of the [byKey(key)](/api-reference/30%20Data%20Layer/CustomStore/3%20Methods/byKey(key_extraOptions).md '/Documentation/ApiReference/Data_Layer/CustomStore/Methods/#byKeykey_extraOptions') method."
  },
  "CustomStoreOptions.cacheRawData": {
    "shortDescription": "Specifies whether raw data should be saved in the cache. Applies only if [loadMode](/api-reference/30%20Data%20Layer/CustomStore/1%20Configuration/loadMode.md '/Documentation/ApiReference/Data_Layer/CustomStore/Configuration/#loadMode') is *\"raw\"*."
  },
  "CustomStoreOptions.insert": {
    "shortDescription": "Specifies a custom implementation of the [insert(values)](/api-reference/30%20Data%20Layer/Store/3%20Methods/insert(values).md '/Documentation/ApiReference/Data_Layer/CustomStore/Methods/#insertvalues') method."
  },
  "CustomStoreOptions.load": {
    "shortDescription": "Specifies a custom implementation of the [load(options)](/api-reference/30%20Data%20Layer/CustomStore/3%20Methods/load(options).md '/Documentation/ApiReference/Data_Layer/CustomStore/Methods/#loadoptions') method."
  },
  "CustomStoreOptions.loadMode": {
    "shortDescription": "Specifies how data returned by the [load](/api-reference/30%20Data%20Layer/CustomStore/1%20Configuration/load.md '/Documentation/ApiReference/Data_Layer/CustomStore/Configuration/#load') function is treated."
  },
  "CustomStoreOptions.onLoaded": {
    "shortDescription": "A function that is executed after data is loaded to the store."
  },
  "CustomStoreOptions.remove": {
    "shortDescription": "Specifies a custom implementation of the [remove(key)](/api-reference/30%20Data%20Layer/Store/3%20Methods/remove(key).md '/Documentation/ApiReference/Data_Layer/CustomStore/Methods/#removekey') method."
  },
  "CustomStoreOptions.totalCount": {
    "shortDescription": "Specifies a custom implementation of the [totalCount(options)](/api-reference/30%20Data%20Layer/Store/3%20Methods/totalCount(options).md '/Documentation/ApiReference/Data_Layer/CustomStore/Methods/#totalCountoptions') method."
  },
  "CustomStoreOptions.update": {
    "shortDescription": "Specifies a custom implementation of the [update(key, values)](/api-reference/30%20Data%20Layer/Store/3%20Methods/update(key_values).md '/Documentation/ApiReference/Data_Layer/CustomStore/Methods/#updatekey_values') method."
  },
  "CustomStoreOptions.useDefaultSearch": {
    "shortDescription": "Specifies whether the store combines the search and filter expressions. Defaults to **true** if the [loadMode](/api-reference/30%20Data%20Layer/CustomStore/1%20Configuration/loadMode.md '/Documentation/ApiReference/Data_Layer/CustomStore/Configuration/#loadMode') is *\"raw\"* and **false** if it is *\"processed\"*."
  },
  "DataChange": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DataChange.data": {
    "shortDescription": "An object with updated row fields."
  },
  "DataChange.insertAfterKey": {
    "shortDescription": "A key that identifies a record after which a new record should be inserted. Applies only if the [type](/api-reference/_hidden/DataChange/type.md '{currentpath}/#type') is *\"insert\"*."
  },
  "DataChange.insertBeforeKey": {
    "shortDescription": "A key that identifies the record before which a new record should be inserted. Applies only if the [type](/api-reference/_hidden/DataChange/type.md '{currentpath}/#type') is *\"insert\"*."
  },
  "DataChange.key": {
    "shortDescription": "The key of the row being created, updated, or removed."
  },
  "DataChange.type": {
    "shortDescription": "Data change type."
  },
  "DataChangeInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DataChangeInfo.changes": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DataErrorOccurredInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DataErrorOccurredInfo.error": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DataExpressionMixin": {
    "shortDescription": ""
  },
  "DataExpressionMixinOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "DataExpressionMixinOptions.displayExpr": {
    "shortDescription": "Specifies the data field whose values should be displayed."
  },
  "DataExpressionMixinOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "DataExpressionMixinOptions.itemTemplate": {
    "shortDescription": "Specifies a custom template for items."
  },
  "DataExpressionMixinOptions.value": {
    "shortDescription": "Specifies the currently selected value. May be an object if [dataSource](/api-reference/10%20UI%20Components/DataExpressionMixin/1%20Configuration/dataSource.md '{basewidgetpath}/Configuration/#dataSource') contains objects, the store [key](/api-reference/30%20Data%20Layer/Store/1%20Configuration/key.md '/Documentation/ApiReference/Data_Layer/ArrayStore/Configuration/#key') is specified, and [valueExpr](/api-reference/10%20UI%20Components/DataExpressionMixin/1%20Configuration/valueExpr.md '{basewidgetpath}/Configuration/#valueExpr') is not set."
  },
  "DataExpressionMixinOptions.valueExpr": {
    "shortDescription": "Specifies which data field provides unique values to the UI component's [value](/api-reference/10%20UI%20Components/DataExpressionMixin/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value')."
  },
  "DataHelperMixin": {
    "shortDescription": ""
  },
  "DataHelperMixin.getDataSource()": {
    "shortDescription": "Gets the [DataSource](/api-reference/30%20Data%20Layer/DataSource '/Documentation/ApiReference/Data_Layer/DataSource/') instance."
  },
  "DataSource": {
    "shortDescription": "The **DataSource** is an object that provides an API for processing data from an underlying [store](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/store '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/store/')."
  },
  "DataSource.cancel(operationId)": {
    "shortDescription": "Cancels the load operation with a specific identifier."
  },
  "DataSource.changed": {
    "shortDescription": "Raised after data is loaded."
  },
  "DataSource.ctor(data)": {
    "shortDescription": ""
  },
  "DataSource.ctor(options)": {
    "shortDescription": ""
  },
  "DataSource.ctor(store)": {
    "shortDescription": ""
  },
  "DataSource.ctor(url)": {
    "shortDescription": ""
  },
  "DataSource.dispose()": {
    "shortDescription": "Disposes of all the resources allocated to the **DataSource** instance."
  },
  "DataSource.filter()": {
    "shortDescription": "Gets the [filter](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/filter.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#filter') property's value."
  },
  "DataSource.filter(filterExpr)": {
    "shortDescription": "Sets the [filter](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/filter.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#filter') property's value."
  },
  "DataSource.group()": {
    "shortDescription": "Gets the [group](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/group.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#group') property's value."
  },
  "DataSource.group(groupExpr)": {
    "shortDescription": "Sets the [group](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/group.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#group') property's value."
  },
  "DataSource.isLastPage()": {
    "shortDescription": "Checks whether the count of items on the current page is less than the [pageSize](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/pageSize.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#pageSize'). Takes effect only with enabled [paging](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/paginate.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#paginate')."
  },
  "DataSource.isLoaded()": {
    "shortDescription": "Checks whether data is loaded in the **DataSource**."
  },
  "DataSource.isLoading()": {
    "shortDescription": "Checks whether data is being loaded in the **DataSource**."
  },
  "DataSource.items()": {
    "shortDescription": "Gets an array of data items on the current [page](/concepts/70%20Data%20Binding/5%20Data%20Layer/2%20Reading%20Data/0%20Paging.md '/Documentation/Guide/Data_Binding/Data_Layer/#Reading_Data/Paging')."
  },
  "DataSource.key()": {
    "shortDescription": "Gets the value of the underlying store's **key** property."
  },
  "DataSource.load()": {
    "shortDescription": "Starts loading data."
  },
  "DataSource.loadError": {
    "shortDescription": "Raised when data loading fails."
  },
  "DataSource.loadingChanged": {
    "shortDescription": "Raised when the data loading status is changed."
  },
  "DataSource.loadOptions()": {
    "shortDescription": "Gets an object with current data processing settings."
  },
  "DataSource.off(eventName)": {
    "shortDescription": "Detaches all event handlers from a single event."
  },
  "DataSource.off(eventName, eventHandler)": {
    "shortDescription": "Detaches a particular event handler from a single event."
  },
  "DataSource.on(eventName, eventHandler)": {
    "shortDescription": "Subscribes to an event."
  },
  "DataSource.on(events)": {
    "shortDescription": "Subscribes to events."
  },
  "DataSource.pageIndex()": {
    "shortDescription": "Gets the current page index."
  },
  "DataSource.pageIndex(newIndex)": {
    "shortDescription": "Sets the index of the page that should be loaded on the next [load()](/api-reference/30%20Data%20Layer/DataSource/3%20Methods/load().md '/Documentation/ApiReference/Data_Layer/DataSource/Methods/#load') method call."
  },
  "DataSource.pageSize()": {
    "shortDescription": "Gets the [page size](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/pageSize.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#pageSize')."
  },
  "DataSource.pageSize(value)": {
    "shortDescription": "Sets the [page size](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/pageSize.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#pageSize')."
  },
  "DataSource.paginate()": {
    "shortDescription": "Gets the [paginate](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/paginate.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#paginate') property's value."
  },
  "DataSource.paginate(value)": {
    "shortDescription": "Sets the [paginate](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/paginate.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#paginate') property's value."
  },
  "DataSource.reload()": {
    "shortDescription": "Clears currently loaded **DataSource** items and calls the [load()](/api-reference/30%20Data%20Layer/DataSource/3%20Methods/load().md '/Documentation/ApiReference/Data_Layer/DataSource/Methods/#load') method."
  },
  "DataSource.requireTotalCount()": {
    "shortDescription": "Gets the [requireTotalCount](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/requireTotalCount.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#requireTotalCount') property's value."
  },
  "DataSource.requireTotalCount(value)": {
    "shortDescription": "Sets the [requireTotalCount](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/requireTotalCount.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#requireTotalCount') property's value."
  },
  "DataSource.searchExpr()": {
    "shortDescription": "Gets the [searchExpr](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/searchExpr.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#searchExpr') property's value."
  },
  "DataSource.searchExpr(expr)": {
    "shortDescription": "Sets the [searchExpr](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/searchExpr.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#searchExpr') property's value."
  },
  "DataSource.searchOperation()": {
    "shortDescription": "Gets the [searchOperation](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/searchOperation.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#searchOperation') property's value."
  },
  "DataSource.searchOperation(op)": {
    "shortDescription": "Sets the [searchOperation](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/searchOperation.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#searchOperation') property's value."
  },
  "DataSource.searchValue()": {
    "shortDescription": "Gets the [searchValue](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/searchValue.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#searchValue') property's value."
  },
  "DataSource.searchValue(value)": {
    "shortDescription": "Sets the [searchValue](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/searchValue.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#searchValue') property's value."
  },
  "DataSource.select()": {
    "shortDescription": "Gets the [select](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/select.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#select') property's value."
  },
  "DataSource.select(expr)": {
    "shortDescription": "Sets the [select](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/select.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#select') property's value."
  },
  "DataSource.sort()": {
    "shortDescription": "Gets the [sort](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/sort.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#sort') property's value."
  },
  "DataSource.sort(sortExpr)": {
    "shortDescription": "Sets the [sort](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/sort.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#sort') property's value."
  },
  "DataSource.store()": {
    "shortDescription": "Gets the instance of the store underlying the **DataSource**."
  },
  "DataSource.totalCount()": {
    "shortDescription": "Gets the number of data items in the store after the last [load()](/api-reference/30%20Data%20Layer/DataSource/3%20Methods/load().md '/Documentation/ApiReference/Data_Layer/DataSource/Methods/#load') operation without paging. Takes effect only if [requireTotalCount](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/requireTotalCount.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#requireTotalCount') is **true**"
  },
  "DataSourceLike": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DataSourceOptions.customQueryParams": {
    "shortDescription": "Custom parameters that should be passed to an OData service with the load query. Available only for the [ODataStore](/api-reference/30%20Data%20Layer/ODataStore '/Documentation/ApiReference/Data_Layer/ODataStore/')."
  },
  "DataSourceOptions.expand": {
    "shortDescription": "Specifies the navigation properties to be loaded with the OData entity. Available only for the [ODataStore](/api-reference/30%20Data%20Layer/ODataStore '/Documentation/ApiReference/Data_Layer/ODataStore/')."
  },
  "DataSourceOptions.filter": {
    "shortDescription": "Specifies data filtering conditions."
  },
  "DataSourceOptions.group": {
    "shortDescription": "Specifies data grouping properties."
  },
  "DataSourceOptions.langParams": {
    "shortDescription": "Specifies parameters for language-specific sorting and filtering."
  },
  "DataSourceOptions.map": {
    "shortDescription": "Specifies an item mapping function."
  },
  "DataSourceOptions.onChanged": {
    "shortDescription": "A function that is executed after data is loaded."
  },
  "DataSourceOptions.onLoadError": {
    "shortDescription": "A function that is executed when data loading fails."
  },
  "DataSourceOptions.onLoadingChanged": {
    "shortDescription": "A function that is executed when the data loading status changes."
  },
  "DataSourceOptions.pageSize": {
    "shortDescription": "Specifies the maximum number of data items per page. Applies only if [paginate](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/paginate.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#paginate') is **true**."
  },
  "DataSourceOptions.paginate": {
    "shortDescription": "Specifies whether the **DataSource** loads data items by pages or all at once. Defaults to **false** if [group](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/group.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#group') is set; otherwise, **true**."
  },
  "DataSourceOptions.postProcess": {
    "shortDescription": "Specifies a post processing function."
  },
  "DataSourceOptions.pushAggregationTimeout": {
    "shortDescription": "Specifies the period (in milliseconds) when changes are aggregated before pushing them to the **DataSource**."
  },
  "DataSourceOptions.requireTotalCount": {
    "shortDescription": "Specifies whether the **DataSource** requests the total count of data items in the storage."
  },
  "DataSourceOptions.reshapeOnPush": {
    "shortDescription": "Specifies whether to reapply sorting, filtering, grouping, and other data processing operations after receiving a push."
  },
  "DataSourceOptions.searchExpr": {
    "shortDescription": "Specifies the fields to search."
  },
  "DataSourceOptions.searchOperation": {
    "shortDescription": "Specifies the comparison operation used in searching."
  },
  "DataSourceOptions.searchValue": {
    "shortDescription": "Specifies the value to which the search expression is compared."
  },
  "DataSourceOptions.select": {
    "shortDescription": "Specifies the fields to select from data objects."
  },
  "DataSourceOptions.sort": {
    "shortDescription": "Specifies data sorting properties."
  },
  "DataSourceOptions.store": {
    "shortDescription": "Configures the store underlying the **DataSource**."
  },
  "DataSourceOptions.store.type": {
    "shortDescription": "Specifies the storage type the **DataSource** uses."
  },
  "DateBoxBase": {
    "shortDescription": "A drop-down editor UI component."
  },
  "DateBoxBase.close()": {
    "shortDescription": "Closes the drop-down editor."
  },
  "DateBoxBase.open()": {
    "shortDescription": "Opens the drop-down editor."
  },
  "DateBoxBaseOptions.applyButtonText": {
    "shortDescription": "Specifies the Apply button's text."
  },
  "DateBoxBaseOptions.calendarOptions": {
    "shortDescription": "Configures the calendar's value picker."
  },
  "DateBoxBaseOptions.cancelButtonText": {
    "shortDescription": "Specifies the Cancel button's text."
  },
  "DateBoxBaseOptions.dateSerializationFormat": {
    "shortDescription": "Specifies the date value serialization format."
  },
  "DateBoxBaseOptions.displayFormat": {
    "shortDescription": "Specifies the date's display format."
  },
  "DateBoxBaseOptions.dropDownOptions": {
    "shortDescription": "Configures the drop-down that holds the [content](/api-reference/10%20UI%20Components/dxOverlay/1%20Configuration/contentTemplate.md '/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#contentTemplate')."
  },
  "DateBoxBaseOptions.max": {
    "shortDescription": "The latest date that can be selected in the UI component."
  },
  "DateBoxBaseOptions.min": {
    "shortDescription": "The earliest date that can be selected in the UI component."
  },
  "DateBoxBaseOptions.todayButtonText": {
    "shortDescription": "Specified the Today button's text."
  },
  "DateBoxBaseOptions.useMaskBehavior": {
    "shortDescription": "Specifies whether to use an input mask based on the [displayFormat](/api-reference/10%20UI%20Components/DateBoxBase/1%20Configuration/displayFormat.md '/Documentation/ApiReference/UI_Components/dx{WidgetName}/Configuration/#displayFormat') property."
  },
  "DefaultOptionsRule": {
    "shortDescription": "Specifies the device-dependent default configuration properties for a component."
  },
  "Device": {
    "shortDescription": "The **device** object defines the device on which the application is running."
  },
  "Device.android": {
    "shortDescription": "Indicates whether or not the device platform is Android."
  },
  "Device.deviceType": {
    "shortDescription": "Specifies the type of the device on which the application is running."
  },
  "Device.generic": {
    "shortDescription": "Indicates whether or not the device platform is generic, which means that the application will look and behave according to a generic \"light\" or \"dark\" [theme](/concepts/60%20Themes%20and%20Styles/05%20Predefined%20Themes/00%20Predefined%20Themes.md '/Documentation/Guide/Themes_and_Styles/Predefined_Themes/')."
  },
  "Device.grade": {
    "shortDescription": "Specifies a performance grade of the current device."
  },
  "Device.ios": {
    "shortDescription": "Indicates whether or not the device platform is iOS."
  },
  "Device.phone": {
    "shortDescription": "Indicates whether or not the device type is 'phone'."
  },
  "Device.platform": {
    "shortDescription": "Specifies the platform of the device on which the application is running."
  },
  "Device.tablet": {
    "shortDescription": "Indicates whether or not the device type is 'tablet'."
  },
  "Device.version": {
    "shortDescription": "Specifies an array with the major and minor versions of the device platform."
  },
  "DevicesObject": {
    "shortDescription": "An object that serves as a namespace for the methods and events specifying information on the current device."
  },
  "DevicesObject.ctor(options)": {
    "shortDescription": ""
  },
  "DevicesObject.current()": {
    "shortDescription": "Gets [information](/api-reference/50%20Common/Object%20Structures/device '/Documentation/ApiReference/Common/Object_Structures/device/') on the current device."
  },
  "DevicesObject.current(deviceName)": {
    "shortDescription": "Overrides actual device information to force the application to operate as if it was running on a specified device."
  },
  "DevicesObject.off(eventName)": {
    "shortDescription": "Detaches all event handlers from a single event."
  },
  "DevicesObject.off(eventName, eventHandler)": {
    "shortDescription": "Detaches a particular event handler from a single event."
  },
  "DevicesObject.on(eventName, eventHandler)": {
    "shortDescription": "Subscribes to an event."
  },
  "DevicesObject.on(events)": {
    "shortDescription": "Subscribes to events."
  },
  "DevicesObject.orientation()": {
    "shortDescription": "Returns the current device orientation."
  },
  "DevicesObject.real()": {
    "shortDescription": "Returns real [information](/api-reference/50%20Common/Object%20Structures/device '/Documentation/ApiReference/Common/Object_Structures/device/') about the current device regardless of the value passed to the [DevExpress.devices.current(deviceName)](/api-reference/50%20Common/utils/devices/3%20Methods/current(deviceName).md '/Documentation/ApiReference/Common/Utils/devices/Methods/#currentdeviceName') method."
  },
  "DisabledDate": {
    "shortDescription": "Specifies dates that users cannot select."
  },
  "DOMComponent": {
    "shortDescription": "A base class for all components."
  },
  "DOMComponent.ctor(element,options)": {
    "shortDescription": ""
  },
  "DOMComponent.defaultOptions(rule)": {
    "shortDescription": "Specifies the device-dependent default configuration properties for this component."
  },
  "DOMComponent.dispose()": {
    "shortDescription": "Disposes of all the resources allocated to the {WidgetName} instance."
  },
  "DOMComponent.disposing": {
    "shortDescription": "Raised before the UI component is [disposed of](/api-reference/10%20UI%20Widgets/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "DOMComponent.element()": {
    "shortDescription": "Gets the root UI component element."
  },
  "DOMComponent.getInstance(element)": {
    "shortDescription": "Gets the instance of a UI component found using its DOM node."
  },
  "DOMComponent.optionChanged": {
    "shortDescription": "Raised after a UI component property is changed."
  },
  "DOMComponentOptions.elementAttr": {
    "shortDescription": "Specifies the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\" target=\"_blank\">global attributes</a> to be attached to the UI component's container element."
  },
  "DOMComponentOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "DOMComponentOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Widgets/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "DOMComponentOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "DOMComponentOptions.rtlEnabled": {
    "shortDescription": "Switches the UI component to a right-to-left representation."
  },
  "DOMComponentOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "DraggableBase": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DraggableBaseOptions.autoScroll": {
    "shortDescription": "Enables automatic scrolling while dragging an item beyond the viewport."
  },
  "DraggableBaseOptions.boundary": {
    "shortDescription": "Specifies a DOM element that limits the dragging area."
  },
  "DraggableBaseOptions.container": {
    "shortDescription": "Specifies a custom container in which the draggable item should be rendered."
  },
  "DraggableBaseOptions.contentTemplate": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DraggableBaseOptions.cursorOffset": {
    "shortDescription": "Specifies the cursor offset from the dragged item."
  },
  "DraggableBaseOptions.cursorOffset.x": {
    "shortDescription": "Specifies the horizontal cursor offset from the dragged item in pixels."
  },
  "DraggableBaseOptions.cursorOffset.y": {
    "shortDescription": "Specifies the vertical cursor offset from the dragged item in pixels."
  },
  "DraggableBaseOptions.data": {
    "shortDescription": "A container for custom data."
  },
  "DraggableBaseOptions.dragDirection": {
    "shortDescription": "Specifies the directions in which an item can be dragged."
  },
  "DraggableBaseOptions.group": {
    "shortDescription": "Allows you to group several UI components, so that users can drag and drop items between them."
  },
  "DraggableBaseOptions.handle": {
    "shortDescription": "Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s)."
  },
  "DraggableBaseOptions.scrollSensitivity": {
    "shortDescription": "Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if [autoScroll](/api-reference/10%20UI%20Components/DraggableBase/1%20Configuration/autoScroll.md '{basewidgetpath}/Configuration/#autoScroll') is **true**."
  },
  "DraggableBaseOptions.scrollSpeed": {
    "shortDescription": "Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if [autoScroll](/api-reference/10%20UI%20Components/DraggableBase/1%20Configuration/autoScroll.md '{basewidgetpath}/Configuration/#autoScroll') is **true**."
  },
  "dxAccordion": {
    "shortDescription": "The Accordion UI component contains several panels displayed one under another. These panels can be collapsed or expanded by an end user, which makes this UI component very useful for presenting information in a limited amount of space."
  },
  "dxAccordion.collapseItem(index)": {
    "shortDescription": "Collapses an item with a specific index."
  },
  "dxAccordion.expandItem(index)": {
    "shortDescription": "Expands an item with a specific index."
  },
  "dxAccordion.itemTitleClick": {
    "shortDescription": "Raised when an accordion item's title is clicked or tapped."
  },
  "dxAccordion.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxAccordion.updateDimensions()": {
    "shortDescription": "Updates the dimensions of the UI component contents."
  },
  "dxAccordionItem.icon": {
    "shortDescription": "Specifies the icon to be displayed in the panel's title."
  },
  "dxAccordionItem.title": {
    "shortDescription": "Specifies text displayed for the UI component item title."
  },
  "dxAccordionItem.titleTemplate": {
    "shortDescription": "Specifies a template that should be used to render the title for this item only."
  },
  "dxAccordionOptions.animationDuration": {
    "shortDescription": "A number specifying the time in milliseconds spent on the animation of the expanding or collapsing of a panel."
  },
  "dxAccordionOptions.collapsible": {
    "shortDescription": "Specifies whether all items can be collapsed or whether at least one item must always be expanded."
  },
  "dxAccordionOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxAccordionOptions.deferRendering": {
    "shortDescription": "Specifies whether to render the panel's content when it is displayed. If **false**, the content is rendered immediately."
  },
  "dxAccordionOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxAccordionOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxAccordionOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxAccordionOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxAccordionOptions.itemTemplate": {
    "shortDescription": "Specifies a custom template for items."
  },
  "dxAccordionOptions.itemTitleTemplate": {
    "shortDescription": "Specifies a custom template for item titles."
  },
  "dxAccordionOptions.multiple": {
    "shortDescription": "Specifies whether the UI component can expand several items or only a single item at once."
  },
  "dxAccordionOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxAccordionOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxAccordionOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxAccordionOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxAccordionOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxAccordionOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxAccordionOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxAccordionOptions.onItemTitleClick": {
    "shortDescription": "A function that is executed when an accordion item's title is clicked or tapped."
  },
  "dxAccordionOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxAccordionOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a collection item is selected or selection is canceled."
  },
  "dxAccordionOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxAccordionOptions.repaintChangesOnly": {
    "shortDescription": "Specifies whether to repaint only those elements whose data changed."
  },
  "dxAccordionOptions.selectedIndex": {
    "shortDescription": "The index number of the currently expanded item."
  },
  "dxActionSheet": {
    "shortDescription": "The ActionSheet UI component is a sheet containing a set of buttons located one under the other. These buttons usually represent several choices relating to a single task."
  },
  "dxActionSheet.cancelClick": {
    "shortDescription": "Raised when the **Cancel** button is clicked or tapped."
  },
  "dxActionSheet.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxActionSheet.hide()": {
    "shortDescription": "Hides the UI component."
  },
  "dxActionSheet.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxActionSheet.selectionChanged": {
    "shortDescription": "Raised after selection changes."
  },
  "dxActionSheet.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxActionSheet.show()": {
    "shortDescription": "Shows the UI component."
  },
  "dxActionSheet.toggle(showing)": {
    "shortDescription": "Shows or hides the UI component depending on the argument."
  },
  "dxActionSheetItem.html": {
    "shortDescription": "Specifies the HTML markup to be inserted into the item element."
  },
  "dxActionSheetItem.icon": {
    "shortDescription": "Specifies the icon to be displayed on the action sheet button."
  },
  "dxActionSheetItem.onClick": {
    "shortDescription": "A handler for the [click](/api-reference/10%20UI%20Components/dxButton/4%20Events/click.md '/Documentation/ApiReference/UI_Components/dxButton/Events/#click') event raised for the button representing the given action sheet button."
  },
  "dxActionSheetItem.stylingMode": {
    "shortDescription": "Specifies which style to apply to the button that is an action sheet item."
  },
  "dxActionSheetItem.type": {
    "shortDescription": "Specifies the [type](/api-reference/10%20UI%20Components/dxButton/1%20Configuration/type.md '/Documentation/ApiReference/UI_Components/dxButton/Configuration/#type') of the button that is an action sheet item."
  },
  "dxActionSheetItem.visible": {
    "shortDescription": "Specifies whether or not a UI component item must be displayed."
  },
  "dxActionSheetOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxActionSheetOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxActionSheetOptions.cancelText": {
    "shortDescription": "The text displayed in the button that closes the action sheet."
  },
  "dxActionSheetOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxActionSheetOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxActionSheetOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxActionSheetOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "dxActionSheetOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "dxActionSheetOptions.onCancelClick": {
    "shortDescription": "A function that is executed when the **Cancel** button is clicked or tapped."
  },
  "dxActionSheetOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxActionSheetOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxActionSheetOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxActionSheetOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxActionSheetOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxActionSheetOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxActionSheetOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxActionSheetOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxActionSheetOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxActionSheetOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxActionSheetOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "dxActionSheetOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "dxActionSheetOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxActionSheetOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxActionSheetOptions.showCancelButton": {
    "shortDescription": "Specifies whether or not to display the **Cancel** button in action sheet."
  },
  "dxActionSheetOptions.showTitle": {
    "shortDescription": "A Boolean value specifying whether or not the title of the action sheet is visible."
  },
  "dxActionSheetOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxActionSheetOptions.target": {
    "shortDescription": "Specifies the element the action sheet popover points at. Applies only if [usePopover](/api-reference/10%20UI%20Components/dxActionSheet/1%20Configuration/usePopover.md '/Documentation/ApiReference/UI_Components/dxActionSheet/Configuration/#usePopover') is **true**."
  },
  "dxActionSheetOptions.title": {
    "shortDescription": "The title of the action sheet."
  },
  "dxActionSheetOptions.usePopover": {
    "shortDescription": "Specifies whether or not to show the action sheet within a [Popover](/api-reference/10%20UI%20Components/dxPopover '/Documentation/ApiReference/UI_Components/dxPopover/') UI component."
  },
  "dxActionSheetOptions.visible": {
    "shortDescription": "A Boolean value specifying whether or not the ActionSheet UI component is visible."
  },
  "dxAutocomplete": {
    "shortDescription": "The Autocomplete UI component is a textbox that provides suggestions while a user types into it."
  },
  "dxAutocomplete.close()": {
    "shortDescription": "Closes the drop-down editor."
  },
  "dxAutocomplete.open()": {
    "shortDescription": "Opens the drop-down editor."
  },
  "dxAutocomplete.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxAutocomplete/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxAutocompleteOptions.acceptCustomValue": {
    "shortDescription": "Specifies whether or not the UI component allows an end user to enter a custom value."
  },
  "dxAutocompleteOptions.displayExpr": {
    "shortDescription": "Specifies the data field whose values should be displayed."
  },
  "dxAutocompleteOptions.dropDownOptions": {
    "shortDescription": "Configures the drop-down field which holds the [content](/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#contentTemplate)."
  },
  "dxAutocompleteOptions.maxItemCount": {
    "shortDescription": "Specifies the maximum count of items displayed by the UI component."
  },
  "dxAutocompleteOptions.minSearchLength": {
    "shortDescription": "The minimum number of characters that must be entered into the text box to begin a search."
  },
  "dxAutocompleteOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "dxAutocompleteOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxAutocompleteOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxAutocompleteOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxAutocompleteOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxAutocompleteOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxAutocompleteOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxAutocompleteOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxAutocompleteOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxAutocompleteOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxAutocompleteOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxAutocompleteOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxAutocompleteOptions.onItemClick": {
    "shortDescription": "A function that is executed when a list item is clicked or tapped."
  },
  "dxAutocompleteOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxAutocompleteOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxAutocompleteOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxAutocompleteOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxAutocompleteOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxAutocompleteOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a list item is selected or selection is canceled."
  },
  "dxAutocompleteOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxAutocomplete/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxAutocompleteOptions.searchEnabled": {
    "shortDescription": "Specifies whether to allow search operations."
  },
  "dxAutocompleteOptions.showDataBeforeSearch": {
    "shortDescription": "Specifies whether or not the UI component displays unfiltered values until a user types a number of characters exceeding the [minSearchLength](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/minSearchLength.md '{basewidgetpath}/Configuration/#minSearchLength') property value."
  },
  "dxAutocompleteOptions.showDropDownButton": {
    "shortDescription": "Specifies whether the drop-down button is visible."
  },
  "dxAutocompleteOptions.value": {
    "shortDescription": "Specifies the current value displayed by the UI component."
  },
  "dxBarGauge": {
    "shortDescription": "The BarGauge UI component contains several circular bars that each indicates a single value."
  },
  "dxBarGauge.tooltipHidden": {
    "shortDescription": "Raised when a tooltip becomes hidden."
  },
  "dxBarGauge.tooltipShown": {
    "shortDescription": "Raised when a tooltip appears."
  },
  "dxBarGauge.values()": {
    "shortDescription": "Gets all the [values](/api-reference/10%20UI%20Components/dxBarGauge/1%20Configuration/values.md '/Documentation/ApiReference/UI_Components/dxBarGauge/Configuration/#values')."
  },
  "dxBarGauge.values(newValues)": {
    "shortDescription": "Updates all the [values](/api-reference/10%20UI%20Components/dxBarGauge/1%20Configuration/values.md '/Documentation/ApiReference/UI_Components/dxBarGauge/Configuration/#values')."
  },
  "dxBarGaugeLegend": {
    "shortDescription": "Configures the legend."
  },
  "dxBarGaugeLoadingIndicator": {
    "shortDescription": "Configures the loading indicator."
  },
  "dxBarGaugeOptions.animation": {
    "shortDescription": "Specifies animation properties."
  },
  "dxBarGaugeOptions.backgroundColor": {
    "shortDescription": "Specifies a color for the remaining segment of the bar's track."
  },
  "dxBarGaugeOptions.barSpacing": {
    "shortDescription": "Specifies a distance between bars in pixels."
  },
  "dxBarGaugeOptions.baseValue": {
    "shortDescription": "Specifies a base value for bars."
  },
  "dxBarGaugeOptions.centerTemplate": {
    "shortDescription": "Specifies a custom template for content in the component's center."
  },
  "dxBarGaugeOptions.endValue": {
    "shortDescription": "Specifies an end value for the gauge's invisible scale."
  },
  "dxBarGaugeOptions.geometry": {
    "shortDescription": "Defines the shape of the gauge's arc."
  },
  "dxBarGaugeOptions.geometry.endAngle": {
    "shortDescription": "Specifies the end angle of the bar gauge's arc."
  },
  "dxBarGaugeOptions.geometry.startAngle": {
    "shortDescription": "Specifies the start angle of the bar gauge's arc."
  },
  "dxBarGaugeOptions.label": {
    "shortDescription": "Specifies the properties of the labels that accompany gauge bars."
  },
  "dxBarGaugeOptions.label.connectorColor": {
    "shortDescription": "Specifies a color for the label connector text."
  },
  "dxBarGaugeOptions.label.connectorWidth": {
    "shortDescription": "Specifies the width of the label connector in pixels."
  },
  "dxBarGaugeOptions.label.customizeText": {
    "shortDescription": "Specifies a callback function that returns a text for labels."
  },
  "dxBarGaugeOptions.label.font": {
    "shortDescription": "Specifies font properties for bar labels."
  },
  "dxBarGaugeOptions.label.format": {
    "shortDescription": "Formats a value before it is displayed in a label. Accepts only numeric formats."
  },
  "dxBarGaugeOptions.label.indent": {
    "shortDescription": "Specifies the distance between the upper bar and bar labels in pixels."
  },
  "dxBarGaugeOptions.label.visible": {
    "shortDescription": "Specifies whether bar labels appear on a gauge or not."
  },
  "dxBarGaugeOptions.legend": {
    "shortDescription": "Configures the legend."
  },
  "dxBarGaugeOptions.legend.customizeHint": {
    "shortDescription": "Specifies the hint that appears when a user hovers the mouse pointer over a legend item."
  },
  "dxBarGaugeOptions.legend.customizeItems": {
    "shortDescription": "Allows you to change the order, text, and visibility of legend items."
  },
  "dxBarGaugeOptions.legend.customizeText": {
    "shortDescription": "Customizes the text displayed by legend items."
  },
  "dxBarGaugeOptions.legend.itemTextFormat": {
    "shortDescription": "Formats the item text before it is displayed. Accepts only numeric formats. When unspecified, it inherits the [label's format](/api-reference/10%20UI%20Components/dxBarGauge/1%20Configuration/label/format.md '/Documentation/ApiReference/UI_Components/dxBarGauge/Configuration/label/#format')."
  },
  "dxBarGaugeOptions.legend.markerTemplate": {
    "shortDescription": "Specifies an SVG element that serves as a custom legend item marker."
  },
  "dxBarGaugeOptions.legend.visible": {
    "shortDescription": "Specifies whether the legend is visible."
  },
  "dxBarGaugeOptions.loadingIndicator": {
    "shortDescription": "Configures the loading indicator."
  },
  "dxBarGaugeOptions.loadingIndicator.enabled": {
    "shortDescription": "Specifies whether the loading indicator should be displayed and hidden automatically."
  },
  "dxBarGaugeOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxBarGaugeOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxBarGaugeOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxBarGaugeOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxBarGaugeOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxBarGaugeOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxBarGaugeOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxBarGaugeOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxBarGaugeOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxBarGaugeOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxBarGaugeOptions.palette": {
    "shortDescription": "Sets the palette to be used for colorizing bars in the gauge."
  },
  "dxBarGaugeOptions.paletteExtensionMode": {
    "shortDescription": "Specifies what to do with colors in the [palette](/api-reference/10%20UI%20Components/dxBarGauge/1%20Configuration/palette.md '{basewidgetpath}/Configuration/#palette') when their number is less than the number of bars in the gauge."
  },
  "dxBarGaugeOptions.relativeInnerRadius": {
    "shortDescription": "Defines the radius of the bar that is closest to the center relatively to the radius of the topmost bar."
  },
  "dxBarGaugeOptions.resolveLabelOverlapping": {
    "shortDescription": "Specifies how the UI component should behave when [bar labels](/api-reference/10%20UI%20Components/dxBarGauge/1%20Configuration/label '/Documentation/ApiReference/UI_Components/dxBarGauge/Configuration/label/') overlap."
  },
  "dxBarGaugeOptions.startValue": {
    "shortDescription": "Specifies a start value for the gauge's invisible scale."
  },
  "dxBarGaugeOptions.tooltip": {
    "shortDescription": "Configures tooltips."
  },
  "dxBarGaugeOptions.tooltip.contentTemplate": {
    "shortDescription": "Specifies a custom template for a tooltip."
  },
  "dxBarGaugeOptions.tooltip.customizeTooltip": {
    "shortDescription": "Allows you to change tooltip appearance."
  },
  "dxBarGaugeOptions.tooltip.interactive": {
    "shortDescription": "<!-- %shortDescription% -->"
  },
  "dxBarGaugeOptions.values": {
    "shortDescription": "Specifies the array of values to be indicated on a bar gauge."
  },
  "dxBarGaugeTooltip": {
    "shortDescription": "Configures tooltips."
  },
  "dxBox": {
    "shortDescription": "The Box UI component allows you to arrange various elements within it. Separate and adaptive, the Box UI component acts as a building block for the layout."
  },
  "dxBox.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxBox.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxBox.selectionChanged": {
    "shortDescription": "Raised after selection changes."
  },
  "dxBox.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxBoxItem.baseSize": {
    "shortDescription": "Specifies the base size of an item element along the main direction."
  },
  "dxBoxItem.box": {
    "shortDescription": "Holds a [Box configuration object](/api-reference/10%20UI%20Components/dxBox/1%20Configuration '/Documentation/ApiReference/UI_Components/dxBox/Configuration/') for the item."
  },
  "dxBoxItem.ratio": {
    "shortDescription": "Specifies the ratio value used to count the item element size along the main direction."
  },
  "dxBoxItem.shrink": {
    "shortDescription": "A factor that defines how much an item shrinks relative to the rest of the items in the container."
  },
  "dxBoxOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxBoxOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxBoxOptions.align": {
    "shortDescription": "Specifies how UI component items are aligned along the main direction."
  },
  "dxBoxOptions.crossAlign": {
    "shortDescription": "Specifies how UI component items are aligned cross-wise."
  },
  "dxBoxOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxBoxOptions.direction": {
    "shortDescription": "Specifies the direction of item positioning in the UI component."
  },
  "dxBoxOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxBoxOptions.hint": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on the UI component."
  },
  "dxBoxOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxBoxOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "dxBoxOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "dxBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxBoxOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxBoxOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxBoxOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxBoxOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxBoxOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxBoxOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxBoxOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "dxBoxOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "dxBoxOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxBoxOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxBoxOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxBullet": {
    "shortDescription": "The Bullet UI component is useful when you need to compare a single measure to a target value. The UI component comprises a horizontal bar indicating the measure and a vertical line indicating the target value."
  },
  "dxBulletOptions.color": {
    "shortDescription": "Specifies a color for the bullet bar."
  },
  "dxBulletOptions.endScaleValue": {
    "shortDescription": "Specifies an end value for the invisible scale."
  },
  "dxBulletOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxBulletOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxBulletOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxBulletOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxBulletOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxBulletOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxBulletOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxBulletOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxBulletOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxBulletOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxBulletOptions.showTarget": {
    "shortDescription": "Specifies whether or not to show the target line."
  },
  "dxBulletOptions.showZeroLevel": {
    "shortDescription": "Specifies whether or not to show the line indicating zero on the invisible scale."
  },
  "dxBulletOptions.startScaleValue": {
    "shortDescription": "Specifies a start value for the invisible scale."
  },
  "dxBulletOptions.target": {
    "shortDescription": "Specifies the value indicated by the target line."
  },
  "dxBulletOptions.targetColor": {
    "shortDescription": "Specifies a color for both the target and zero level lines."
  },
  "dxBulletOptions.targetWidth": {
    "shortDescription": "Specifies the width of the target line."
  },
  "dxBulletOptions.value": {
    "shortDescription": "Specifies the primary value indicated by the bullet bar."
  },
  "dxButton": {
    "shortDescription": "The Button UI component is a simple button that performs specified commands when a user clicks it."
  },
  "dxButton.click": {
    "shortDescription": "Raised when the Button is clicked or tapped."
  },
  "dxButtonGroup": {
    "shortDescription": "The ButtonGroup is a UI component that contains a set of toggle buttons and can be used as a mode switcher."
  },
  "dxButtonGroup.itemClick": {
    "shortDescription": "Raised when a button is clicked or tapped."
  },
  "dxButtonGroup.selectionChanged": {
    "shortDescription": "Raised when a button is selected or selection is canceled."
  },
  "dxButtonGroupItem.elementAttr": {
    "shortDescription": "Specifies the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\" target=\"_blank\">global attributes</a> to be attached to the button group item's container element."
  },
  "dxButtonGroupItem.hint": {
    "shortDescription": "Specifies a text for the hint that appears when the button is hovered over or long-pressed."
  },
  "dxButtonGroupItem.html": {
    "shortDescription": "Specifies the HTML markup to be inserted into the item element."
  },
  "dxButtonGroupItem.icon": {
    "shortDescription": "Specifies the icon to be displayed on the button."
  },
  "dxButtonGroupItem.type": {
    "shortDescription": "Specifies the button type."
  },
  "dxButtonGroupOptions.buttonTemplate": {
    "shortDescription": "Specifies a template for all the buttons in the group."
  },
  "dxButtonGroupOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxButtonGroupOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxButtonGroupOptions.items": {
    "shortDescription": "Configures buttons in the group."
  },
  "dxButtonGroupOptions.keyExpr": {
    "shortDescription": "Specifies which data field provides keys used to distinguish between the selected buttons."
  },
  "dxButtonGroupOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxButtonGroupOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxButtonGroupOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxButtonGroupOptions.onItemClick": {
    "shortDescription": "A function that is executed when a button is clicked or tapped."
  },
  "dxButtonGroupOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxButtonGroupOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a button is selected or selection is canceled."
  },
  "dxButtonGroupOptions.selectedItemKeys": {
    "shortDescription": "Contains keys of selected buttons and allows you to specify initial button selection state."
  },
  "dxButtonGroupOptions.selectedItems": {
    "shortDescription": "Contains the data objects that correspond to the selected buttons. The data objects are taken from the [items](/api-reference/10%20UI%20Components/dxButtonGroup/1%20Configuration/items '/Documentation/ApiReference/UI_Components/dxButtonGroup/Configuration/items/') array."
  },
  "dxButtonGroupOptions.selectionMode": {
    "shortDescription": "Specifies the button selection mode."
  },
  "dxButtonGroupOptions.stylingMode": {
    "shortDescription": "Specifies how buttons in the group are styled."
  },
  "dxButtonOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxButtonOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxButtonOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxButtonOptions.icon": {
    "shortDescription": "Specifies the icon to be displayed on the button."
  },
  "dxButtonOptions.onClick": {
    "shortDescription": "A function that is executed when the Button is clicked or tapped."
  },
  "dxButtonOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxButtonOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxButtonOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxButtonOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxButtonOptions.stylingMode": {
    "shortDescription": "Specifies how the button is styled."
  },
  "dxButtonOptions.template": {
    "shortDescription": "Specifies a custom template for the Button UI component."
  },
  "dxButtonOptions.text": {
    "shortDescription": "The text displayed on the button."
  },
  "dxButtonOptions.type": {
    "shortDescription": "Specifies the button type."
  },
  "dxButtonOptions.useSubmitBehavior": {
    "shortDescription": "Specifies whether the button submits an HTML form."
  },
  "dxButtonOptions.validationGroup": {
    "shortDescription": "Specifies the name of the [validation group](/api-reference/10%20UI%20Components/dxValidationGroup '/Documentation/ApiReference/UI_Components/dxValidationGroup/') to be accessed in the [click](/api-reference/10%20UI%20Components/dxButton/4%20Events/click.md '/Documentation/ApiReference/UI_Components/dxButton/Events/#click') event handler."
  },
  "dxCalendar": {
    "shortDescription": "The Calendar is a UI component that displays a calendar and allows an end user to select the required date within a specified date range."
  },
  "dxCalendar.contentReady": {
    "shortDescription": "Raised when the UI component is rendered and each time the component is repainted."
  },
  "dxCalendar.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxCalendar/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxCalendarOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxCalendarOptions.cellTemplate": {
    "shortDescription": "Specifies a custom template for calendar cells."
  },
  "dxCalendarOptions.currentDate": {
    "shortDescription": "Specifies a date displayed on the current calendar page."
  },
  "dxCalendarOptions.dateSerializationFormat": {
    "shortDescription": "Specifies the date-time value serialization format."
  },
  "dxCalendarOptions.disabledDates": {
    "shortDescription": "Specifies dates that users cannot select."
  },
  "dxCalendarOptions.firstDayOfWeek": {
    "shortDescription": "Specifies the first day of a week."
  },
  "dxCalendarOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxCalendarOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxCalendarOptions.max": {
    "shortDescription": "The latest date the UI component allows to select."
  },
  "dxCalendarOptions.maxZoomLevel": {
    "shortDescription": "Specifies the maximum [zoom level](/api-reference/10%20UI%20Components/dxCalendar/1%20Configuration/zoomLevel.md '/Documentation/ApiReference/UI_Components/dxCalendar/Configuration/#zoomLevel') of the calendar."
  },
  "dxCalendarOptions.min": {
    "shortDescription": "The earliest date the UI component allows to select."
  },
  "dxCalendarOptions.minZoomLevel": {
    "shortDescription": "Specifies the minimum [zoom level](/api-reference/10%20UI%20Components/dxCalendar/1%20Configuration/zoomLevel.md '/Documentation/ApiReference/UI_Components/dxCalendar/Configuration/#zoomLevel') of the calendar."
  },
  "dxCalendarOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxCalendarOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxCalendarOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxCalendarOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxCalendarOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxCalendarOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxCalendar/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxCalendarOptions.selectionMode": {
    "shortDescription": "Specifies one of three selection modes: single, multiple, or range."
  },
  "dxCalendarOptions.selectWeekOnClick": {
    "shortDescription": "Specifies whether a user can select a week by clicking on a week number."
  },
  "dxCalendarOptions.showTodayButton": {
    "shortDescription": "Specifies whether or not the UI component displays a button that selects the current date."
  },
  "dxCalendarOptions.showWeekNumbers": {
    "shortDescription": "Specifies whether to display a column with week numbers."
  },
  "dxCalendarOptions.value": {
    "shortDescription": "An object or a value that specifies the date and time selected in the calendar."
  },
  "dxCalendarOptions.weekNumberRule": {
    "shortDescription": "Specifies a [week number](/api-reference/10%20UI%20Components/dxCalendar/1%20Configuration/showWeekNumbers.md '/Documentation/ApiReference/UI_Components/dxCalendar/Configuration/#showWeekNumbers') calculation rule."
  },
  "dxCalendarOptions.zoomLevel": {
    "shortDescription": "Specifies the current calendar zoom level."
  },
  "dxChart": {
    "shortDescription": "The Chart is a UI component that visualizes data from a local or remote storage using a great variety of [series types](/concepts/05%20UI%20Components/Chart/11%20Series%20Types/10%20Line%20Series.md '/Documentation/Guide/UI_Components/Chart/Series_Types/') along with different interactive elements, such as [tooltips](/concepts/05%20UI%20Components/Chart/30%20Tooltips/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Tooltips/Overview/'), [crosshair pointer](/concepts/05%20UI%20Components/Chart/80%20Crosshair.md '/Documentation/Guide/UI_Components/Chart/Crosshair/'), [legend](/concepts/05%20UI%20Components/Chart/35%20Legend/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Legend/Overview/'), etc."
  },
  "dxChart.argumentAxisClick": {
    "shortDescription": "Raised when a [label](/concepts/05%20UI%20Components/Chart/20%20Axes/15%20Axis%20Labels.md '/Documentation/Guide/UI_Components/Chart/Axes/Axis_Labels/') on the [argument axis](/concepts/05%20UI%20Components/Chart/20%20Axes/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Axes/Overview/') is clicked or tapped."
  },
  "dxChart.getArgumentAxis()": {
    "shortDescription": "Gets the argument axis."
  },
  "dxChart.getValueAxis()": {
    "shortDescription": "Gets a value axis."
  },
  "dxChart.getValueAxis(name)": {
    "shortDescription": "Gets a value axis with the specified [name](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/name.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#name')."
  },
  "dxChart.legendClick": {
    "shortDescription": "Raised when a [legend item](/concepts/05%20UI%20Components/Chart/35%20Legend/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Legend/Overview/') is clicked or tapped."
  },
  "dxChart.resetVisualRange()": {
    "shortDescription": "Resets the visual ranges of both axes to the data range or to the whole range if it is within the data range."
  },
  "dxChart.seriesClick": {
    "shortDescription": "Raised when a [series](/concepts/05%20UI%20Components/Chart/10%20Series/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Series/Overview/') is clicked or tapped."
  },
  "dxChart.seriesHoverChanged": {
    "shortDescription": "Raised after the pointer enters or leaves a series."
  },
  "dxChart.seriesSelectionChanged": {
    "shortDescription": "Raised when a series is selected or selection is canceled."
  },
  "dxChart.zoomArgument(startValue,endValue)": {
    "shortDescription": "Sets the argument axis' start and end values."
  },
  "dxChart.zoomEnd": {
    "shortDescription": "Raised when zooming or panning ends."
  },
  "dxChart.zoomStart": {
    "shortDescription": "Raised when zooming or panning begins."
  },
  "dxChartAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChartAnnotationConfig.name": {
    "shortDescription": "Specifies the annotation's name."
  },
  "dxChartArgumentAxis": {
    "shortDescription": "Configures the argument axis."
  },
  "dxChartArgumentAxisConstantLines": {
    "shortDescription": "Declares a collection of constant lines belonging to the argument axis."
  },
  "dxChartArgumentAxisConstantLinesLabel": {
    "shortDescription": "Configures the constant line label."
  },
  "dxChartArgumentAxisConstantLineStyle": {
    "shortDescription": "Specifies the appearance of those constant lines that belong to the argument axis."
  },
  "dxChartArgumentAxisConstantLineStyleLabel": {
    "shortDescription": "Specifies the appearance of the labels of those constant lines that belong to the argument axis."
  },
  "dxChartArgumentAxisLabel": {
    "shortDescription": "Configures the labels of the argument axis."
  },
  "dxChartArgumentAxisStrips": {
    "shortDescription": "Declares a collection of strips belonging to the argument axis."
  },
  "dxChartArgumentAxisStripsLabel": {
    "shortDescription": "Configures the strip label."
  },
  "dxChartArgumentAxisTitle": {
    "shortDescription": "Configures the axis title."
  },
  "dxChartCommonAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChartCommonAnnotationConfig.axis": {
    "shortDescription": "Specifies the [name](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/name.md '{basewidgetpath}/Configuration/valueAxis/#name') of the [value axis](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis '{basewidgetpath}/Configuration/valueAxis/') on which the [value](/api-reference/_hidden/BaseChartAnnotationConfig/value.md '{basewidgetpath}/Configuration/annotations/#value') is specified. Useful for a [multi-axis chart](/concepts/05%20UI%20Components/Chart/20%20Axes/70%20Multi-Axis%20Chart.md '/Documentation/Guide/UI_Components/Chart/Axes/Multi-Axis_Chart/')."
  },
  "dxChartCommonAnnotationConfig.customizeTooltip": {
    "shortDescription": "Customizes the text and appearance of the annotation's tooltip."
  },
  "dxChartCommonAnnotationConfig.template": {
    "shortDescription": "Specifies a custom template for the annotation. Applies only if the [type](/api-reference/_hidden/BaseWidgetAnnotationConfig/type.md '{basewidgetpath}/Configuration/annotations/#type') is *\"custom\"*."
  },
  "dxChartCommonAnnotationConfig.tooltipTemplate": {
    "shortDescription": "Specifies a custom template for an annotation's tooltip."
  },
  "dxChartCommonAxisSettings": {
    "shortDescription": "Defines common settings for both the argument and value axis in a chart."
  },
  "dxChartCommonAxisSettingsConstantLineStyle": {
    "shortDescription": "Configures the appearance of all constant lines in the UI component."
  },
  "dxChartCommonAxisSettingsConstantLineStyleLabel": {
    "shortDescription": "Configures constant line labels."
  },
  "dxChartCommonAxisSettingsLabel": {
    "shortDescription": "Configures axis labels."
  },
  "dxChartCommonAxisSettingsStripStyle": {
    "shortDescription": "Configures the appearance of strips."
  },
  "dxChartCommonAxisSettingsStripStyleLabel": {
    "shortDescription": "Configures the appearance of strip labels."
  },
  "dxChartCommonAxisSettingsTitle": {
    "shortDescription": "Configures axis titles."
  },
  "dxChartCommonPaneSettings": {
    "shortDescription": "Defines common settings for all panes in a chart."
  },
  "dxChartCommonSeriesSettings": {
    "shortDescription": "Specifies settings common for all series in the chart."
  },
  "dxChartLegend": {
    "shortDescription": "Specifies the properties of a chart's legend."
  },
  "dxChartOptions.adjustOnZoom": {
    "shortDescription": "Specifies whether to adjust the value axis's [visualRange](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/visualRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/visualRange/') when the [argument axis](/concepts/05%20UI%20Components/Chart/20%20Axes/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Axes/Overview/') is being [zoomed or panned](/concepts/05%20UI%20Components/Chart/95%20Zooming%20and%20Panning '/Documentation/Guide/UI_Components/Chart/Zooming_and_Panning/')."
  },
  "dxChartOptions.annotations": {
    "shortDescription": "Specifies the annotation collection."
  },
  "dxChartOptions.argumentAxis": {
    "shortDescription": "Configures the argument axis."
  },
  "dxChartOptions.argumentAxis.aggregateByCategory": {
    "shortDescription": "Aggregates series points that fall into the same category.",
    "depNote": "Use CommonSeries.aggregation.enabled instead."
  },
  "dxChartOptions.argumentAxis.aggregationGroupWidth": {
    "shortDescription": "Specifies the length of aggregation intervals in pixels. Applies only to axes of continuous and logarithmic [types](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#type'). May be ignored in favor of the [aggregationInterval](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/aggregationInterval '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/aggregationInterval/') property."
  },
  "dxChartOptions.argumentAxis.aggregationInterval": {
    "shortDescription": "Specifies the length of aggregation intervals in axis units. Applies only to axes of continuous and logarithmic [types](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#type')."
  },
  "dxChartOptions.argumentAxis.argumentType": {
    "shortDescription": "Casts arguments to a specified data type."
  },
  "dxChartOptions.argumentAxis.axisDivisionFactor": {
    "shortDescription": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the *\"continuous\"* and *\"logarithmic\"* [types](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#type')."
  },
  "dxChartOptions.argumentAxis.breaks": {
    "shortDescription": "Declares a scale break collection. Applies only if the axis' [type](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#type') is *\"continuous\"* or *\"logarithmic\"*."
  },
  "dxChartOptions.argumentAxis.categories": {
    "shortDescription": "Specifies the order of categories on an axis of the *\"discrete\"* [type](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dx{WidgetName}/Configuration/argumentAxis/#type')."
  },
  "dxChartOptions.argumentAxis.constantLines": {
    "shortDescription": "Declares a collection of constant lines belonging to the argument axis."
  },
  "dxChartOptions.argumentAxis.constantLines.displayBehindSeries": {
    "shortDescription": "Specifies whether to display the constant line behind or in front of the series."
  },
  "dxChartOptions.argumentAxis.constantLines.extendAxis": {
    "shortDescription": "Specifies whether to extend the axis's default [visual range](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/visualRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/visualRange/') to display the constant line."
  },
  "dxChartOptions.argumentAxis.constantLines.label": {
    "shortDescription": "Configures the constant line label."
  },
  "dxChartOptions.argumentAxis.constantLines.label.horizontalAlignment": {
    "shortDescription": "Aligns constant line labels in the horizontal direction."
  },
  "dxChartOptions.argumentAxis.constantLines.label.text": {
    "shortDescription": "Specifies the text of a constant line label. By default, equals to the value of the constant line."
  },
  "dxChartOptions.argumentAxis.constantLines.label.verticalAlignment": {
    "shortDescription": "Aligns constant line labels in the vertical direction."
  },
  "dxChartOptions.argumentAxis.constantLines.value": {
    "shortDescription": "Specifies the value indicated by a constant line. Setting this property is necessary."
  },
  "dxChartOptions.argumentAxis.constantLineStyle": {
    "shortDescription": "Specifies the appearance of those constant lines that belong to the argument axis."
  },
  "dxChartOptions.argumentAxis.constantLineStyle.label": {
    "shortDescription": "Specifies the appearance of the labels of those constant lines that belong to the argument axis."
  },
  "dxChartOptions.argumentAxis.constantLineStyle.label.horizontalAlignment": {
    "shortDescription": "Aligns constant line labels in the horizontal direction."
  },
  "dxChartOptions.argumentAxis.constantLineStyle.label.verticalAlignment": {
    "shortDescription": "Aligns constant line labels in the vertical direction."
  },
  "dxChartOptions.argumentAxis.customPosition": {
    "shortDescription": "Specifies the position of the argument axis on the value axis."
  },
  "dxChartOptions.argumentAxis.customPositionAxis": {
    "shortDescription": "Specifies the [name](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/name.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#name') of a value axis on which the argument axis should be positioned. Applies only to [multi-axis charts](/concepts/05%20UI%20Components/Chart/20%20Axes/70%20Multi-Axis%20Chart.md '/Documentation/Guide/UI_Components/Chart/Axes/Multi-Axis_Chart/')."
  },
  "dxChartOptions.argumentAxis.endOnTick": {
    "shortDescription": "Specifies whether to force the axis to start and end on ticks."
  },
  "dxChartOptions.argumentAxis.holidays": {
    "shortDescription": "Dates to be excluded from the axis when [workdaysOnly](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/workdaysOnly.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#workdaysOnly') is **true**."
  },
  "dxChartOptions.argumentAxis.hoverMode": {
    "shortDescription": "Specifies chart elements to be highlighted when a user points to an axis label."
  },
  "dxChartOptions.argumentAxis.label": {
    "shortDescription": "Configures the labels of the argument axis."
  },
  "dxChartOptions.argumentAxis.label.customizeHint": {
    "shortDescription": "Specifies the hint that appears when a user points to an axis label."
  },
  "dxChartOptions.argumentAxis.label.customizeText": {
    "shortDescription": "Customizes the text displayed by axis labels."
  },
  "dxChartOptions.argumentAxis.label.format": {
    "shortDescription": "Formats a value before it is displayed in an axis label."
  },
  "dxChartOptions.argumentAxis.linearThreshold": {
    "shortDescription": "Specifies a value used to calculate the range on a [logarithmic axis](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/type.md '{basewidgetpath}/Configuration/argumentAxis/#type') within which the axis should be linear. Applies only if the data source contains negative values or zeroes."
  },
  "dxChartOptions.argumentAxis.logarithmBase": {
    "shortDescription": "Specifies the value to be raised to a power when generating ticks for an axis of the *\"logarithmic\"* [type](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#type')."
  },
  "dxChartOptions.argumentAxis.minorTickCount": {
    "shortDescription": "Specifies how many [minor ticks](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAxisSettings/minorTick '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/minorTick/') to place between two neighboring major ticks."
  },
  "dxChartOptions.argumentAxis.minorTickInterval": {
    "shortDescription": "Specifies the interval between [minor ticks](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAxisSettings/minorTick '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/minorTick/'). Applies only to the axes of the *\"continuous\"* [type](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#type')."
  },
  "dxChartOptions.argumentAxis.minVisualRangeLength": {
    "shortDescription": "Specifies the minimum length of the [visual range](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/visualRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/visualRange/')."
  },
  "dxChartOptions.argumentAxis.offset": {
    "shortDescription": "Specifies the shift in pixels of the argument axis."
  },
  "dxChartOptions.argumentAxis.position": {
    "shortDescription": "Relocates the argument axis."
  },
  "dxChartOptions.argumentAxis.singleWorkdays": {
    "shortDescription": "Dates to be included on the axis when [workdaysOnly](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/workdaysOnly.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#workdaysOnly') is **true**."
  },
  "dxChartOptions.argumentAxis.strips": {
    "shortDescription": "Declares a collection of strips belonging to the argument axis."
  },
  "dxChartOptions.argumentAxis.strips.color": {
    "shortDescription": "Specifies the color of the strip."
  },
  "dxChartOptions.argumentAxis.strips.endValue": {
    "shortDescription": "Along with the **startValue** property, limits the strip."
  },
  "dxChartOptions.argumentAxis.strips.label": {
    "shortDescription": "Configures the strip label."
  },
  "dxChartOptions.argumentAxis.strips.label.text": {
    "shortDescription": "Specifies the text of the strip label."
  },
  "dxChartOptions.argumentAxis.strips.startValue": {
    "shortDescription": "Along with the **endValue** property, limits the strip."
  },
  "dxChartOptions.argumentAxis.tickInterval": {
    "shortDescription": "Specifies the interval between [major ticks](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAxisSettings/tick '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/tick/')."
  },
  "dxChartOptions.argumentAxis.title": {
    "shortDescription": "Configures the axis title."
  },
  "dxChartOptions.argumentAxis.title.text": {
    "shortDescription": "Specifies the text of the axis title."
  },
  "dxChartOptions.argumentAxis.type": {
    "shortDescription": "Specifies the type of the argument axis."
  },
  "dxChartOptions.argumentAxis.visualRange": {
    "shortDescription": "Defines the axis' displayed range. Cannot be wider than the [wholeRange](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/wholeRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/wholeRange/')."
  },
  "dxChartOptions.argumentAxis.visualRangeUpdateMode": {
    "shortDescription": "Specifies how the axis's [visual range](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/visualRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/visualRange/') should behave when chart data is updated."
  },
  "dxChartOptions.argumentAxis.wholeRange": {
    "shortDescription": "Defines the range where the axis can be [zoomed and panned](/concepts/05%20UI%20Components/Chart/95%20Zooming%20and%20Panning '/Documentation/Guide/UI_Components/Chart/Zooming_and_Panning/')."
  },
  "dxChartOptions.argumentAxis.workdaysOnly": {
    "shortDescription": "Leaves only workdays on the axis: the [work week](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/workWeek.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#workWeek') days plus [single workdays](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/singleWorkdays.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#singleWorkdays') minus [holidays](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/holidays.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#holidays'). Applies only if the axis' [argumentType](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/argumentType.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#argumentType') is *\"datetime\"*."
  },
  "dxChartOptions.argumentAxis.workWeek": {
    "shortDescription": "Specifies which days are workdays. The array can contain values from 0 (Sunday) to 6 (Saturday). Applies only if [workdaysOnly](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/argumentAxis/workdaysOnly.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/argumentAxis/#workdaysOnly') is **true**."
  },
  "dxChartOptions.autoHidePointMarkers": {
    "shortDescription": "Specifies whether to hide [series point markers](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/point/symbol.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/point/#symbol') automatically to reduce visual clutter."
  },
  "dxChartOptions.barGroupPadding": {
    "shortDescription": "Controls the padding and consequently the width of a group of bars with the same argument using relative units. Ignored if the [barGroupWidth](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/barGroupWidth.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/#barGroupWidth') property is set."
  },
  "dxChartOptions.barGroupWidth": {
    "shortDescription": "Specifies a fixed width for groups of bars with the same argument, measured in pixels. Takes precedence over the [barGroupPadding](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/barGroupPadding.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/#barGroupPadding') property."
  },
  "dxChartOptions.commonAnnotationSettings": {
    "shortDescription": "Specifies settings common for all annotations in the chart."
  },
  "dxChartOptions.commonAxisSettings": {
    "shortDescription": "Defines common settings for both the argument and value axis in a chart."
  },
  "dxChartOptions.commonAxisSettings.aggregatedPointsPosition": {
    "shortDescription": "Specifies the start position of the aggregated series points in the aggregation interval."
  },
  "dxChartOptions.commonAxisSettings.allowDecimals": {
    "shortDescription": "Specifies whether to allow decimal values on the axis. When **false**, the axis contains integer values only."
  },
  "dxChartOptions.commonAxisSettings.breakStyle": {
    "shortDescription": "Configures the scale breaks' appearance."
  },
  "dxChartOptions.commonAxisSettings.breakStyle.color": {
    "shortDescription": "Specifies the scale breaks' color."
  },
  "dxChartOptions.commonAxisSettings.breakStyle.line": {
    "shortDescription": "Specifies the scale breaks' line style."
  },
  "dxChartOptions.commonAxisSettings.breakStyle.width": {
    "shortDescription": "Specifies the scale breaks' width in pixels."
  },
  "dxChartOptions.commonAxisSettings.color": {
    "shortDescription": "Specifies the color of the axis line."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle": {
    "shortDescription": "Configures the appearance of all constant lines in the UI component."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.color": {
    "shortDescription": "Specifies the color of constant lines."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.dashStyle": {
    "shortDescription": "Specifies the dash style of constant lines."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.label": {
    "shortDescription": "Configures constant line labels."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.label.font": {
    "shortDescription": "Specifies font properties for constant line labels."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.label.position": {
    "shortDescription": "Specifies the position of constant line labels on the chart plot."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.label.visible": {
    "shortDescription": "Makes constant line labels visible."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.paddingLeftRight": {
    "shortDescription": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.paddingTopBottom": {
    "shortDescription": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
  },
  "dxChartOptions.commonAxisSettings.constantLineStyle.width": {
    "shortDescription": "Specifies the width of constant lines in pixels."
  },
  "dxChartOptions.commonAxisSettings.discreteAxisDivisionMode": {
    "shortDescription": "Specifies whether ticks and grid lines should cross axis labels or lie between them. Applies only to the axes of the *\"discrete\"* type."
  },
  "dxChartOptions.commonAxisSettings.endOnTick": {
    "shortDescription": "Specifies whether to force the axis to start and end on ticks."
  },
  "dxChartOptions.commonAxisSettings.grid": {
    "shortDescription": "Configures the grid."
  },
  "dxChartOptions.commonAxisSettings.grid.color": {
    "shortDescription": "Specifies the color of grid lines."
  },
  "dxChartOptions.commonAxisSettings.grid.opacity": {
    "shortDescription": "Specifies how transparent grid lines should be."
  },
  "dxChartOptions.commonAxisSettings.grid.visible": {
    "shortDescription": "Makes grid lines visible."
  },
  "dxChartOptions.commonAxisSettings.grid.width": {
    "shortDescription": "Specifies the width of grid lines in pixels."
  },
  "dxChartOptions.commonAxisSettings.inverted": {
    "shortDescription": "Inverts the axis."
  },
  "dxChartOptions.commonAxisSettings.label": {
    "shortDescription": "Configures axis labels."
  },
  "dxChartOptions.commonAxisSettings.label.alignment": {
    "shortDescription": "Aligns axis labels in relation to ticks."
  },
  "dxChartOptions.commonAxisSettings.label.displayMode": {
    "shortDescription": "Allows you to rotate or stagger axis labels. Applies to the horizontal axis only."
  },
  "dxChartOptions.commonAxisSettings.label.font": {
    "shortDescription": "Specifies font properties for axis labels."
  },
  "dxChartOptions.commonAxisSettings.label.indentFromAxis": {
    "shortDescription": "Adds a pixel-measured empty space between an axis and its labels."
  },
  "dxChartOptions.commonAxisSettings.label.overlappingBehavior": {
    "shortDescription": "Decides how to arrange axis labels when there is not enough space to display all of them."
  },
  "dxChartOptions.commonAxisSettings.label.position": {
    "shortDescription": "Specifies the position of labels relative to the chart or its axis."
  },
  "dxChartOptions.commonAxisSettings.label.rotationAngle": {
    "shortDescription": "Specifies the rotation angle of axis labels. Applies only if **displayMode** or **overlappingBehavior** is *\"rotate\"*."
  },
  "dxChartOptions.commonAxisSettings.label.staggeringSpacing": {
    "shortDescription": "Adds a pixel-measured empty space between two staggered rows of axis labels. Applies only if **displayMode** or **overlappingBehavior** is *\"stagger\"*."
  },
  "dxChartOptions.commonAxisSettings.label.template": {
    "shortDescription": "Specifies a custom template for axis labels."
  },
  "dxChartOptions.commonAxisSettings.label.textOverflow": {
    "shortDescription": "Specifies what to do with axis labels that overflow the allocated space after applying [wordWrap](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAxisSettings/label/wordWrap.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/commonAxisSettings/label/#wordWrap'): hide, truncate them and display an ellipsis, or do nothing."
  },
  "dxChartOptions.commonAxisSettings.label.visible": {
    "shortDescription": "Shows/hides axis labels."
  },
  "dxChartOptions.commonAxisSettings.label.wordWrap": {
    "shortDescription": "Specifies how to wrap texts that do not fit into a single line."
  },
  "dxChartOptions.commonAxisSettings.maxValueMargin": {
    "shortDescription": "Controls the empty space between the maximum series points and the axis. Applies only to the axes of the *\"continuous\"* and *\"logarithmic\"* type."
  },
  "dxChartOptions.commonAxisSettings.minorGrid": {
    "shortDescription": "Configures the minor grid."
  },
  "dxChartOptions.commonAxisSettings.minorGrid.color": {
    "shortDescription": "Specifies a color for the lines of the minor grid."
  },
  "dxChartOptions.commonAxisSettings.minorGrid.opacity": {
    "shortDescription": "Specifies how transparent the lines of the minor grid should be."
  },
  "dxChartOptions.commonAxisSettings.minorGrid.visible": {
    "shortDescription": "Makes the minor grid visible."
  },
  "dxChartOptions.commonAxisSettings.minorGrid.width": {
    "shortDescription": "Specifies a width for the lines of the minor grid in pixels."
  },
  "dxChartOptions.commonAxisSettings.minorTick": {
    "shortDescription": "Configures the appearance of minor axis ticks."
  },
  "dxChartOptions.commonAxisSettings.minorTick.color": {
    "shortDescription": "Specifies the color of minor ticks."
  },
  "dxChartOptions.commonAxisSettings.minorTick.length": {
    "shortDescription": "Specifies the length of minor ticks in pixels."
  },
  "dxChartOptions.commonAxisSettings.minorTick.opacity": {
    "shortDescription": "Specifies how transparent minor ticks should be."
  },
  "dxChartOptions.commonAxisSettings.minorTick.shift": {
    "shortDescription": "Shifts minor ticks from the reference position."
  },
  "dxChartOptions.commonAxisSettings.minorTick.visible": {
    "shortDescription": "Makes minor ticks visible."
  },
  "dxChartOptions.commonAxisSettings.minorTick.width": {
    "shortDescription": "Specifies the width of minor ticks in pixels."
  },
  "dxChartOptions.commonAxisSettings.minValueMargin": {
    "shortDescription": "Controls the empty space between the minimum series points and the axis. Applies only to the axes of the *\"continuous\"* and *\"logarithmic\"* type."
  },
  "dxChartOptions.commonAxisSettings.opacity": {
    "shortDescription": "Specifies how transparent the axis line should be."
  },
  "dxChartOptions.commonAxisSettings.placeholderSize": {
    "shortDescription": "Reserves a pixel-measured space for the axis."
  },
  "dxChartOptions.commonAxisSettings.stripStyle": {
    "shortDescription": "Configures the appearance of strips."
  },
  "dxChartOptions.commonAxisSettings.stripStyle.label": {
    "shortDescription": "Configures the appearance of strip labels."
  },
  "dxChartOptions.commonAxisSettings.stripStyle.label.font": {
    "shortDescription": "Specifies font properties for strip labels."
  },
  "dxChartOptions.commonAxisSettings.stripStyle.label.horizontalAlignment": {
    "shortDescription": "Aligns strip labels in the horizontal direction."
  },
  "dxChartOptions.commonAxisSettings.stripStyle.label.verticalAlignment": {
    "shortDescription": "Aligns strip labels in the vertical direction."
  },
  "dxChartOptions.commonAxisSettings.stripStyle.paddingLeftRight": {
    "shortDescription": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
  },
  "dxChartOptions.commonAxisSettings.stripStyle.paddingTopBottom": {
    "shortDescription": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
  },
  "dxChartOptions.commonAxisSettings.tick": {
    "shortDescription": "Configures the appearance of major axis ticks."
  },
  "dxChartOptions.commonAxisSettings.tick.color": {
    "shortDescription": "Specifies the color of ticks."
  },
  "dxChartOptions.commonAxisSettings.tick.length": {
    "shortDescription": "Specifies the length of ticks in pixels."
  },
  "dxChartOptions.commonAxisSettings.tick.opacity": {
    "shortDescription": "Specifies how transparent ticks should be."
  },
  "dxChartOptions.commonAxisSettings.tick.shift": {
    "shortDescription": "Shifts ticks from the reference position."
  },
  "dxChartOptions.commonAxisSettings.tick.visible": {
    "shortDescription": "Makes ticks visible."
  },
  "dxChartOptions.commonAxisSettings.tick.width": {
    "shortDescription": "Specifies the width of ticks in pixels."
  },
  "dxChartOptions.commonAxisSettings.title": {
    "shortDescription": "Configures axis titles."
  },
  "dxChartOptions.commonAxisSettings.title.alignment": {
    "shortDescription": "Aligns the axis title to the left, center, or right of the axis."
  },
  "dxChartOptions.commonAxisSettings.title.font": {
    "shortDescription": "Specifies font properties for the axis title."
  },
  "dxChartOptions.commonAxisSettings.title.margin": {
    "shortDescription": "Adds a pixel-measured empty space between the axis title and axis labels."
  },
  "dxChartOptions.commonAxisSettings.title.textOverflow": {
    "shortDescription": "Specifies what to do with the axis title when it overflows the allocated space after applying [wordWrap](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAxisSettings/title/wordWrap.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/commonAxisSettings/title/#wordWrap'): hide, truncate them and display an ellipsis, or do nothing."
  },
  "dxChartOptions.commonAxisSettings.title.wordWrap": {
    "shortDescription": "Specifies how to wrap the axis title if it does not fit into a single line."
  },
  "dxChartOptions.commonAxisSettings.valueMarginsEnabled": {
    "shortDescription": "Adds an empty space between the axis and the minimum and maximum series points."
  },
  "dxChartOptions.commonAxisSettings.visible": {
    "shortDescription": "Makes the axis line visible."
  },
  "dxChartOptions.commonAxisSettings.width": {
    "shortDescription": "Specifies the width of the axis line in pixels."
  },
  "dxChartOptions.commonPaneSettings": {
    "shortDescription": "Defines common settings for all panes in a chart."
  },
  "dxChartOptions.commonPaneSettings.backgroundColor": {
    "shortDescription": "Specifies the color of the pane's background."
  },
  "dxChartOptions.commonPaneSettings.border": {
    "shortDescription": "Configures the pane border."
  },
  "dxChartOptions.commonPaneSettings.border.bottom": {
    "shortDescription": "Shows/hides the bottom border of the pane. Applies only when the **border**.**visible** property is **true**."
  },
  "dxChartOptions.commonPaneSettings.border.color": {
    "shortDescription": "Specifies the color of the pane border."
  },
  "dxChartOptions.commonPaneSettings.border.dashStyle": {
    "shortDescription": "Specifies the dash style of the pane border."
  },
  "dxChartOptions.commonPaneSettings.border.left": {
    "shortDescription": "Shows/hides the left border of the pane. Applies only when the **border**.**visible** property is **true**."
  },
  "dxChartOptions.commonPaneSettings.border.opacity": {
    "shortDescription": "Specifies how transparent the pane border should be."
  },
  "dxChartOptions.commonPaneSettings.border.right": {
    "shortDescription": "Shows/hides the right border of the pane. Applies only when the **border**.**visible** property is **true**."
  },
  "dxChartOptions.commonPaneSettings.border.top": {
    "shortDescription": "Shows/hides the top border of the pane. Applies only when the **border**.**visible** property is **true**."
  },
  "dxChartOptions.commonPaneSettings.border.visible": {
    "shortDescription": "Shows the pane border."
  },
  "dxChartOptions.commonPaneSettings.border.width": {
    "shortDescription": "Specifies the width of the pane border in pixels."
  },
  "dxChartOptions.commonSeriesSettings": {
    "shortDescription": "Specifies settings common for all series in the chart."
  },
  "dxChartOptions.commonSeriesSettings.area": {
    "shortDescription": "Defines common settings for all [*area* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/AreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/AreaSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.bar": {
    "shortDescription": "Defines common settings for all [*bar* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/BarSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/BarSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.bubble": {
    "shortDescription": "Defines common settings for all [*bubble* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/BubbleSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/BubbleSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.candlestick": {
    "shortDescription": "Defines common settings for all [*candlestick* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CandleStickSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/CandleStickSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.fullstackedarea": {
    "shortDescription": "Defines common settings for all [*full-stacked area* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/FullStackedAreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/FullStackedAreaSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.fullstackedbar": {
    "shortDescription": "Defines common settings for all [*full-stacked bar* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/FullStackedBarSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/FullStackedBarSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.fullstackedline": {
    "shortDescription": "Defines common settings for all [*full-stacked line* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/FullStackedLineSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/FullStackedLineSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.fullstackedspline": {
    "shortDescription": "Defines common settings for all [*full-stacked spline* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/FullStackedSplineSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/FullStackedSplineSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.fullstackedsplinearea": {
    "shortDescription": "Defines common settings for all [*full-stacked spline area* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/FullStackedSplineAreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/FullStackedSplineAreaSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.line": {
    "shortDescription": "Defines common settings for all [*line* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/LineSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/LineSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.rangearea": {
    "shortDescription": "Defines common settings for all [*range area* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/RangeAreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/RangeAreaSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.rangebar": {
    "shortDescription": "Defines common settings for all [*range bar* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/RangeBarSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/RangeBarSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.scatter": {
    "shortDescription": "Defines common settings for all [*scatter* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/ScatterSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/ScatterSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.spline": {
    "shortDescription": "Defines common settings for all [*spline* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/SplineSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/SplineSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.splinearea": {
    "shortDescription": "Defines common settings for all [*spline area* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/SplineAreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/SplineAreaSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.stackedarea": {
    "shortDescription": "Defines common settings for all [*stacked area* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StackedAreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StackedAreaSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.stackedbar": {
    "shortDescription": "Defines common settings for all [*stacked bar* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StackedBarSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StackedBarSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.stackedline": {
    "shortDescription": "Defines common settings for all [*stacked line* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StackedLineSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StackedLineSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.stackedspline": {
    "shortDescription": "Defines common settings for all [*stacked spline* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StackedSplineSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StackedSplineSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.stackedsplinearea": {
    "shortDescription": "Defines common settings for all [*stacked spline area* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StackedSplineAreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StackedSplineAreaSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.steparea": {
    "shortDescription": "Defines common settings for all [*step area* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StepAreaSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StepAreaSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.stepline": {
    "shortDescription": "Defines common settings for all [*step line* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StepLineSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StepLineSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.stock": {
    "shortDescription": "Defines common settings for all [*stock* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/StockSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/StockSeries/')."
  },
  "dxChartOptions.commonSeriesSettings.type": {
    "shortDescription": "Specifies the type of the series."
  },
  "dxChartOptions.containerBackgroundColor": {
    "shortDescription": "Specifies background color of the chart container."
  },
  "dxChartOptions.crosshair": {
    "shortDescription": "Configures the crosshair feature."
  },
  "dxChartOptions.crosshair.color": {
    "shortDescription": "Specifies the color of the crosshair lines."
  },
  "dxChartOptions.crosshair.dashStyle": {
    "shortDescription": "Specifies the dash style of the crosshair lines."
  },
  "dxChartOptions.crosshair.enabled": {
    "shortDescription": "Enables the crosshair."
  },
  "dxChartOptions.crosshair.horizontalLine": {
    "shortDescription": "Configures the horizontal crosshair line individually."
  },
  "dxChartOptions.crosshair.horizontalLine.color": {
    "shortDescription": "Specifies the color of the horizontal crosshair line."
  },
  "dxChartOptions.crosshair.horizontalLine.dashStyle": {
    "shortDescription": "Specifies the dash style of the horizontal crosshair line."
  },
  "dxChartOptions.crosshair.horizontalLine.label": {
    "shortDescription": "Configures the label that belongs to the horizontal crosshair line."
  },
  "dxChartOptions.crosshair.horizontalLine.label.backgroundColor": {
    "shortDescription": "Paints the background of the label that belongs to the horizontal crosshair line."
  },
  "dxChartOptions.crosshair.horizontalLine.label.customizeText": {
    "shortDescription": "Customizes the text displayed by the label that belongs to the horizontal crosshair line."
  },
  "dxChartOptions.crosshair.horizontalLine.label.font": {
    "shortDescription": "Specifies font properties for the label of the horizontal crosshair line."
  },
  "dxChartOptions.crosshair.horizontalLine.label.format": {
    "shortDescription": "Formats a point value before it is displayed in the crosshair label."
  },
  "dxChartOptions.crosshair.horizontalLine.label.visible": {
    "shortDescription": "Makes the label of the horizontal crosshair line visible. Applies only if the crosshair feature is [enabled](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/crosshair/enabled.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/crosshair/#enabled') and the horizontal line is [visible](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/crosshair/horizontalLine/visible.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/crosshair/horizontalLine/#visible')."
  },
  "dxChartOptions.crosshair.horizontalLine.opacity": {
    "shortDescription": "Specifies how transparent the horizontal crosshair line should be."
  },
  "dxChartOptions.crosshair.horizontalLine.visible": {
    "shortDescription": "Specifies whether to show the horizontal crosshair line or not."
  },
  "dxChartOptions.crosshair.horizontalLine.width": {
    "shortDescription": "Specifies the width of the horizontal crosshair line in pixels."
  },
  "dxChartOptions.crosshair.label": {
    "shortDescription": "Configures the crosshair labels."
  },
  "dxChartOptions.crosshair.label.backgroundColor": {
    "shortDescription": "Paints the background of the crosshair labels."
  },
  "dxChartOptions.crosshair.label.customizeText": {
    "shortDescription": "Customizes the text displayed by the crosshair labels."
  },
  "dxChartOptions.crosshair.label.font": {
    "shortDescription": "Specifies font properties for the crosshair labels."
  },
  "dxChartOptions.crosshair.label.format": {
    "shortDescription": "Formats a point value/argument before it is displayed in the crosshair label."
  },
  "dxChartOptions.crosshair.label.visible": {
    "shortDescription": "Makes the crosshair labels visible. Applies only if the crosshair feature is [enabled](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/crosshair/enabled.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/crosshair/#enabled')."
  },
  "dxChartOptions.crosshair.opacity": {
    "shortDescription": "Specifies how transparent the crosshair lines should be."
  },
  "dxChartOptions.crosshair.verticalLine": {
    "shortDescription": "Configures the vertical crosshair line individually."
  },
  "dxChartOptions.crosshair.verticalLine.color": {
    "shortDescription": "Specifies the color of the vertical crosshair line."
  },
  "dxChartOptions.crosshair.verticalLine.dashStyle": {
    "shortDescription": "Specifies the dash style of the vertical crosshair line."
  },
  "dxChartOptions.crosshair.verticalLine.label": {
    "shortDescription": "Configures the label that belongs to the vertical crosshair line."
  },
  "dxChartOptions.crosshair.verticalLine.label.backgroundColor": {
    "shortDescription": "Paints the background of the label that belongs to the vertical crosshair line."
  },
  "dxChartOptions.crosshair.verticalLine.label.customizeText": {
    "shortDescription": "Customizes the text displayed by the label that belongs to the vertical crosshair line."
  },
  "dxChartOptions.crosshair.verticalLine.label.font": {
    "shortDescription": "Specifies font properties for the label of the vertical crosshair line."
  },
  "dxChartOptions.crosshair.verticalLine.label.format": {
    "shortDescription": "Formats the point argument before it is displayed in the crosshair label."
  },
  "dxChartOptions.crosshair.verticalLine.label.visible": {
    "shortDescription": "Makes the label of the vertical crosshair line visible. Applies only if the crosshair feature is [enabled](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/crosshair/enabled.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/crosshair/#enabled') and the vertical line is [visible](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/crosshair/verticalLine/visible.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/crosshair/verticalLine/#visible')."
  },
  "dxChartOptions.crosshair.verticalLine.opacity": {
    "shortDescription": "Specifies how transparent the vertical crosshair line should be."
  },
  "dxChartOptions.crosshair.verticalLine.visible": {
    "shortDescription": "Specifies whether to show the vertical crosshair line or not."
  },
  "dxChartOptions.crosshair.verticalLine.width": {
    "shortDescription": "Specifies the width of the vertical crosshair line in pixels."
  },
  "dxChartOptions.crosshair.width": {
    "shortDescription": "Specifies the width of the crosshair lines."
  },
  "dxChartOptions.customizeAnnotation": {
    "shortDescription": "Customizes an individual [annotation](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAnnotationSettings '{basewidgetpath}/Configuration/annotations/')."
  },
  "dxChartOptions.dataPrepareSettings": {
    "shortDescription": "Processes data before visualizing it."
  },
  "dxChartOptions.dataPrepareSettings.checkTypeForAllData": {
    "shortDescription": "Validates the type of each value coming from the data source."
  },
  "dxChartOptions.dataPrepareSettings.convertToAxisDataType": {
    "shortDescription": "Converts data coming from a data source into a data type supported by the axis."
  },
  "dxChartOptions.dataPrepareSettings.sortingMethod": {
    "shortDescription": "Specifies the sorting order in which series points should be drawn."
  },
  "dxChartOptions.defaultPane": {
    "shortDescription": "Specifies which pane should be used by default."
  },
  "dxChartOptions.legend": {
    "shortDescription": "Specifies the properties of a chart's legend."
  },
  "dxChartOptions.legend.customizeHint": {
    "shortDescription": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
  },
  "dxChartOptions.legend.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed by a legend item."
  },
  "dxChartOptions.legend.hoverMode": {
    "shortDescription": "Specifies what series elements to highlight when a corresponding item in the legend is hovered over."
  },
  "dxChartOptions.legend.position": {
    "shortDescription": "Specifies whether the legend is located outside or inside the chart's plot."
  },
  "dxChartOptions.maxBubbleSize": {
    "shortDescription": "Specifies a coefficient determining the diameter of the largest bubble."
  },
  "dxChartOptions.minBubbleSize": {
    "shortDescription": "Specifies the diameter of the smallest bubble measured in pixels."
  },
  "dxChartOptions.negativesAsZeroes": {
    "shortDescription": "Forces the UI component to treat negative values as zeroes. Applies to stacked-like series only."
  },
  "dxChartOptions.onArgumentAxisClick": {
    "shortDescription": "A function that is executed when a [label](/concepts/05%20UI%20Components/Chart/20%20Axes/15%20Axis%20Labels.md '/Documentation/Guide/UI_Components/Chart/Axes/Axis_Labels/') on the [argument axis](/concepts/05%20UI%20Components/Chart/20%20Axes/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Axes/Overview/') is clicked or tapped."
  },
  "dxChartOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxChartOptions.onDone": {
    "shortDescription": "A function that is executed when all series are ready."
  },
  "dxChartOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxChartOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxChartOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxChartOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxChartOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxChartOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxChartOptions.onLegendClick": {
    "shortDescription": "A function that is executed when a [legend item](/concepts/05%20UI%20Components/Chart/35%20Legend/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Legend/Overview/') is clicked or tapped."
  },
  "dxChartOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxChartOptions.onPointClick": {
    "shortDescription": "A function that is executed when a series point is clicked or tapped."
  },
  "dxChartOptions.onPointHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a series point."
  },
  "dxChartOptions.onPointSelectionChanged": {
    "shortDescription": "A function that is executed when a series point is selected or selection is canceled."
  },
  "dxChartOptions.onSeriesClick": {
    "shortDescription": "A function that is executed when a [series](/concepts/05%20UI%20Components/Chart/10%20Series/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Series/Overview/') is clicked or tapped."
  },
  "dxChartOptions.onSeriesHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a series."
  },
  "dxChartOptions.onSeriesSelectionChanged": {
    "shortDescription": "A function that is executed when a series is selected or selection is canceled."
  },
  "dxChartOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxChartOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxChartOptions.onZoomEnd": {
    "shortDescription": "A function that is executed when zooming or panning ends."
  },
  "dxChartOptions.onZoomStart": {
    "shortDescription": "A function that is executed when zooming or panning begins."
  },
  "dxChartOptions.panes": {
    "shortDescription": "Declares a collection of panes."
  },
  "dxChartOptions.panes.height": {
    "shortDescription": "Specifies the pane's height (or width when the chart is [rotated](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/rotated.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/#rotated')) in a [multi-pane chart](/concepts/05%20UI%20Components/Chart/40%20Panes/10%20Multi-Pane%20Chart.md '/Documentation/Guide/UI_Components/Chart/Panes/Multi-Pane_Chart/')."
  },
  "dxChartOptions.panes.name": {
    "shortDescription": "Specifies the name of the pane."
  },
  "dxChartOptions.resizePanesOnZoom": {
    "shortDescription": "Specifies whether panes can be resized if other chart elements require more space after [zooming or panning](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/zoomAndPan '/Documentation/ApiReference/UI_Components/dxChart/Configuration/zoomAndPan/')."
  },
  "dxChartOptions.resolveLabelOverlapping": {
    "shortDescription": "Specifies how the chart must behave when [series point labels](/concepts/05%20UI%20Components/Chart/15%20Point%20Labels/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Point_Labels/Overview/') overlap."
  },
  "dxChartOptions.rotated": {
    "shortDescription": "Swaps the axes around making the value axis horizontal and the argument axis vertical."
  },
  "dxChartOptions.scrollBar": {
    "shortDescription": "Specifies the settings of the [scroll bar](/concepts/05%20UI%20Components/Chart/95%20Zooming%20and%20Panning/03%20Using%20the%20Scroll%20Bar.md '/Documentation/Guide/UI_Components/Chart/Zooming_and_Panning/#Using_the_Scroll_Bar')."
  },
  "dxChartOptions.scrollBar.color": {
    "shortDescription": "Specifies the color of the scroll bar."
  },
  "dxChartOptions.scrollBar.offset": {
    "shortDescription": "Specifies the spacing between the scroll bar and the chart's plot in pixels."
  },
  "dxChartOptions.scrollBar.opacity": {
    "shortDescription": "Specifies the opacity of the scroll bar."
  },
  "dxChartOptions.scrollBar.position": {
    "shortDescription": "Specifies the position of the scroll bar in the chart."
  },
  "dxChartOptions.scrollBar.visible": {
    "shortDescription": "Specifies whether the scroll bar is visible or not."
  },
  "dxChartOptions.scrollBar.width": {
    "shortDescription": "Specifies the width of the scroll bar in pixels."
  },
  "dxChartOptions.series": {
    "shortDescription": "Specifies properties for Chart UI component series."
  },
  "dxChartOptions.seriesSelectionMode": {
    "shortDescription": "Specifies whether a single series or multiple series can be selected in the chart."
  },
  "dxChartOptions.seriesTemplate": {
    "shortDescription": "Defines properties for the series template."
  },
  "dxChartOptions.seriesTemplate.customizeSeries": {
    "shortDescription": "Specifies a callback function that returns a [series](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/series '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/') object with individual series settings."
  },
  "dxChartOptions.seriesTemplate.nameField": {
    "shortDescription": "Specifies a data source field that represents the series name."
  },
  "dxChartOptions.stickyHovering": {
    "shortDescription": "Specifies whether a point should remain in the hover state when the mouse pointer moves away."
  },
  "dxChartOptions.synchronizeMultiAxes": {
    "shortDescription": "Indicates whether or not to synchronize value axes when they are displayed on a single pane."
  },
  "dxChartOptions.tooltip": {
    "shortDescription": "Configures tooltips."
  },
  "dxChartOptions.tooltip.location": {
    "shortDescription": "Specifies whether the tooltip must be located in the center of a series point or on its edge. Applies to bar-like and bubble series only."
  },
  "dxChartOptions.valueAxis": {
    "shortDescription": "Configures the value axis."
  },
  "dxChartOptions.valueAxis.autoBreaksEnabled": {
    "shortDescription": "Enables auto-calculated scale breaks. Applies only if the axis' [type](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#type') is *\"continuous\"* or *\"logarithmic\"* and [valueType](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/valueType.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#valueType') is *\"numeric\"*."
  },
  "dxChartOptions.valueAxis.axisDivisionFactor": {
    "shortDescription": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the *\"continuous\"* and *\"logarithmic\"* [types](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#type')."
  },
  "dxChartOptions.valueAxis.breaks": {
    "shortDescription": "Declares a custom scale break collection. Applies only if the axis' [type](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#type') is *\"continuous\"* or *\"logarithmic\"*."
  },
  "dxChartOptions.valueAxis.categories": {
    "shortDescription": "Specifies the order of categories on an axis of the *\"discrete\"* [type](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#type')."
  },
  "dxChartOptions.valueAxis.constantLines": {
    "shortDescription": "Declares a collection of constant lines belonging to the value axis."
  },
  "dxChartOptions.valueAxis.constantLines.displayBehindSeries": {
    "shortDescription": "Specifies whether to display the constant line behind or in front of the series."
  },
  "dxChartOptions.valueAxis.constantLines.extendAxis": {
    "shortDescription": "Specifies whether to extend the axis's default [visual range](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/visualRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/visualRange/') to display the constant line."
  },
  "dxChartOptions.valueAxis.constantLines.label": {
    "shortDescription": "Configures the constant line label."
  },
  "dxChartOptions.valueAxis.constantLines.label.horizontalAlignment": {
    "shortDescription": "Aligns constant line labels in the horizontal direction."
  },
  "dxChartOptions.valueAxis.constantLines.label.text": {
    "shortDescription": "Specifies the text of a constant line label. By default, equals to the value of the constant line."
  },
  "dxChartOptions.valueAxis.constantLines.label.verticalAlignment": {
    "shortDescription": "Aligns constant line labels in the vertical direction."
  },
  "dxChartOptions.valueAxis.constantLines.value": {
    "shortDescription": "Specifies the value indicated by a constant line. Setting this property is necessary."
  },
  "dxChartOptions.valueAxis.constantLineStyle": {
    "shortDescription": "Specifies the appearance of those constant lines that belong to the value axis."
  },
  "dxChartOptions.valueAxis.constantLineStyle.label": {
    "shortDescription": "Specifies the appearance of the labels of those constant lines that belong to the value axis."
  },
  "dxChartOptions.valueAxis.constantLineStyle.label.horizontalAlignment": {
    "shortDescription": "Aligns constant line labels in the horizontal direction."
  },
  "dxChartOptions.valueAxis.constantLineStyle.label.verticalAlignment": {
    "shortDescription": "Aligns constant line labels in the vertical direction."
  },
  "dxChartOptions.valueAxis.customPosition": {
    "shortDescription": "Specifies the position of the value axis on the argument axis."
  },
  "dxChartOptions.valueAxis.endOnTick": {
    "shortDescription": "Specifies whether to force the axis to start and end on ticks."
  },
  "dxChartOptions.valueAxis.label": {
    "shortDescription": "Configures the labels of the value axis."
  },
  "dxChartOptions.valueAxis.label.customizeHint": {
    "shortDescription": "Specifies the hint that appears when a user points to an axis label."
  },
  "dxChartOptions.valueAxis.label.customizeText": {
    "shortDescription": "Customizes the text displayed by axis labels."
  },
  "dxChartOptions.valueAxis.label.format": {
    "shortDescription": "Formats a value before it is displayed in an axis label."
  },
  "dxChartOptions.valueAxis.linearThreshold": {
    "shortDescription": "Specifies a value used to calculate the range on a [logarithmic axis](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '{basewidgetpath}/Configuration/valueAxis/#type') within which the axis should be linear. Applies only if the data source contains negative values or zeroes."
  },
  "dxChartOptions.valueAxis.logarithmBase": {
    "shortDescription": "Specifies the value to be raised to a power when generating ticks for an axis of the  *\"logarithmic\"* [type](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#type')."
  },
  "dxChartOptions.valueAxis.maxAutoBreakCount": {
    "shortDescription": "Sets a limit on [auto-calculated scale breaks](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/autoBreaksEnabled.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#autoBreaksEnabled'). [Custom scale breaks](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/breaks '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/breaks/') are not counted."
  },
  "dxChartOptions.valueAxis.minorTickCount": {
    "shortDescription": "Specifies how many [minor ticks](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAxisSettings/minorTick '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/minorTick/') to place between two neighboring major ticks."
  },
  "dxChartOptions.valueAxis.minorTickInterval": {
    "shortDescription": "Specifies the interval between [minor ticks](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAxisSettings/minorTick '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/minorTick/'). Applies only to [continuous axes](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#type')."
  },
  "dxChartOptions.valueAxis.minVisualRangeLength": {
    "shortDescription": "Specifies the minimum length of the [visual range](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/visualRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/visualRange/')."
  },
  "dxChartOptions.valueAxis.multipleAxesSpacing": {
    "shortDescription": "Adds a pixel-measured empty space between two side-by-side value axes. Applies if several value axes are [located on one side](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/position.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#position') of the chart."
  },
  "dxChartOptions.valueAxis.name": {
    "shortDescription": "Specifies the name of the value axis."
  },
  "dxChartOptions.valueAxis.offset": {
    "shortDescription": "Specifies the shift in pixels of the value axis."
  },
  "dxChartOptions.valueAxis.pane": {
    "shortDescription": "Binds the value axis to a [pane](/concepts/05%20UI%20Components/Chart/40%20Panes/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Panes/Overview/')."
  },
  "dxChartOptions.valueAxis.position": {
    "shortDescription": "Relocates the value axis."
  },
  "dxChartOptions.valueAxis.showZero": {
    "shortDescription": "Specifies whether or not to show zero on the value axis."
  },
  "dxChartOptions.valueAxis.strips": {
    "shortDescription": "Declares a collection of strips belonging to the value axis."
  },
  "dxChartOptions.valueAxis.strips.color": {
    "shortDescription": "Specifies the color of the strip."
  },
  "dxChartOptions.valueAxis.strips.endValue": {
    "shortDescription": "Along with the **startValue** property, limits the strip."
  },
  "dxChartOptions.valueAxis.strips.label": {
    "shortDescription": "Configures the strip label."
  },
  "dxChartOptions.valueAxis.strips.label.text": {
    "shortDescription": "Specifies the text of the strip label."
  },
  "dxChartOptions.valueAxis.strips.startValue": {
    "shortDescription": "Along with the **endValue** property, limits the strip."
  },
  "dxChartOptions.valueAxis.synchronizedValue": {
    "shortDescription": "Synchronizes two or more value axes with each other at a specific value."
  },
  "dxChartOptions.valueAxis.tickInterval": {
    "shortDescription": "Specifies the interval between [major ticks](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAxisSettings/tick '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/tick/'). Does not apply to [discrete axes](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#type')."
  },
  "dxChartOptions.valueAxis.title": {
    "shortDescription": "Configures the axis title."
  },
  "dxChartOptions.valueAxis.title.text": {
    "shortDescription": "Specifies the text of the axis title."
  },
  "dxChartOptions.valueAxis.type": {
    "shortDescription": "Specifies the type of the value axis."
  },
  "dxChartOptions.valueAxis.valueType": {
    "shortDescription": "Casts values to a specified data type."
  },
  "dxChartOptions.valueAxis.visualRange": {
    "shortDescription": "Defines the axis' displayed range. Cannot be wider than the [wholeRange](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/wholeRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/wholeRange/')."
  },
  "dxChartOptions.valueAxis.visualRangeUpdateMode": {
    "shortDescription": "Specifies how the axis's [visual range](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/visualRange '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/visualRange/') should behave when chart data is updated."
  },
  "dxChartOptions.valueAxis.wholeRange": {
    "shortDescription": "Defines the range where the axis can be [zoomed and panned](/concepts/05%20UI%20Components/Chart/95%20Zooming%20and%20Panning '/Documentation/Guide/UI_Components/Chart/Zooming_and_Panning/')."
  },
  "dxChartOptions.zoomAndPan": {
    "shortDescription": "Configures zooming and panning."
  },
  "dxChartOptions.zoomAndPan.allowMouseWheel": {
    "shortDescription": "Specifies whether users can use the mouse wheel to zoom the chart. Applies only if zoom is allowed for the [argument](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/zoomAndPan/argumentAxis.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/zoomAndPan/#argumentAxis') or [value axis](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/zoomAndPan/valueAxis.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/zoomAndPan/#valueAxis')."
  },
  "dxChartOptions.zoomAndPan.allowTouchGestures": {
    "shortDescription": "Specifies whether users can use touch gestures to zoom or pan the chart. Applies only if zoom and pan are allowed for the [argument](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/zoomAndPan/argumentAxis.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/zoomAndPan/#argumentAxis') or [value axis](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/zoomAndPan/valueAxis.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/zoomAndPan/#valueAxis')."
  },
  "dxChartOptions.zoomAndPan.argumentAxis": {
    "shortDescription": "Specifies whether users are allowed to zoom and/or pan the argument axis."
  },
  "dxChartOptions.zoomAndPan.dragBoxStyle": {
    "shortDescription": "Configures the box that appears when users zoom the chart by selecting an area with the drag gesture. Applies only if [dragToZoom](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/zoomAndPan/dragToZoom.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/zoomAndPan/#dragToZoom') is **true**."
  },
  "dxChartOptions.zoomAndPan.dragBoxStyle.color": {
    "shortDescription": "Specifies the drag box's color."
  },
  "dxChartOptions.zoomAndPan.dragBoxStyle.opacity": {
    "shortDescription": "Specifies the drag box's transparency."
  },
  "dxChartOptions.zoomAndPan.dragToZoom": {
    "shortDescription": "Enables users to zoom the chart by selecting an area with the drag gesture. Applies only on devices that use a mouse."
  },
  "dxChartOptions.zoomAndPan.panKey": {
    "shortDescription": "Specifies the key that enables panning when [dragToZoom](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/zoomAndPan/dragToZoom.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/zoomAndPan/#dragToZoom') is **true**. Applies only on devices that use a mouse."
  },
  "dxChartOptions.zoomAndPan.valueAxis": {
    "shortDescription": "Specifies whether users are allowed to zoom and/or pan the value axis."
  },
  "dxChartPanes": {
    "shortDescription": "Declares a collection of panes."
  },
  "dxChartSeriesTypes": {
    "shortDescription": "This section lists objects that define properties used to configure series of specific types."
  },
  "dxChartSeriesTypes.AreaSeries": {
    "shortDescription": "Describes settings supported by a series of the *area* type."
  },
  "dxChartSeriesTypes.AreaSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.AreaSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.AreaSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.AreaSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.AreaSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.AreaSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.AreaSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.AreaSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.BarSeries": {
    "shortDescription": "Describes settings supported by a series of the *bar* type."
  },
  "dxChartSeriesTypes.BarSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.BarSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.BarSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.BarSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.BarSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.BarSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a bar."
  },
  "dxChartSeriesTypes.BubbleSeries": {
    "shortDescription": "Describes settings supported by a series of the *bubble* type."
  },
  "dxChartSeriesTypes.BubbleSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.BubbleSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.BubbleSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.BubbleSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.BubbleSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.BubbleSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a bubble."
  },
  "dxChartSeriesTypes.CandleStickSeries": {
    "shortDescription": "Describes settings supported by a series of the *candlestick* type."
  },
  "dxChartSeriesTypes.CandleStickSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.CandleStickSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.CandleStickSeries.argumentField": {
    "shortDescription": "Specifies which data source field provides arguments for series points."
  },
  "dxChartSeriesTypes.CandleStickSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user pauses on a series."
  },
  "dxChartSeriesTypes.CandleStickSeries.hoverStyle": {
    "shortDescription": "Configures the appearance adopted by the series when a user points to it."
  },
  "dxChartSeriesTypes.CandleStickSeries.hoverStyle.hatching": {
    "shortDescription": "Configures hatching that applies when a user points to the series."
  },
  "dxChartSeriesTypes.CandleStickSeries.hoverStyle.hatching.direction": {
    "shortDescription": "Specifies the direction of hatching lines."
  },
  "dxChartSeriesTypes.CandleStickSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.CandleStickSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.CandleStickSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a point."
  },
  "dxChartSeriesTypes.CandleStickSeries.selectionStyle": {
    "shortDescription": "Configures the appearance adopted by the series when a user selects it."
  },
  "dxChartSeriesTypes.CandleStickSeries.selectionStyle.hatching": {
    "shortDescription": "Configures hatching that applies when a user selects the series."
  },
  "dxChartSeriesTypes.CandleStickSeries.selectionStyle.hatching.direction": {
    "shortDescription": "Specifies the direction of hatching lines."
  },
  "dxChartSeriesTypes.CommonSeries": {
    "shortDescription": "An object that defines configuration properties for chart series."
  },
  "dxChartSeriesTypes.CommonSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.CommonSeries.aggregation.calculate": {
    "shortDescription": "Specifies a custom aggregate function. Applies only if the [aggregation method](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/aggregation/method.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/aggregation/#method') is *\"custom\"*."
  },
  "dxChartSeriesTypes.CommonSeries.aggregation.enabled": {
    "shortDescription": "Enables data aggregation for the series."
  },
  "dxChartSeriesTypes.CommonSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.CommonSeries.argumentField": {
    "shortDescription": "Specifies which data source field provides arguments for series points."
  },
  "dxChartSeriesTypes.CommonSeries.axis": {
    "shortDescription": "Binds the series to a value axis."
  },
  "dxChartSeriesTypes.CommonSeries.barOverlapGroup": {
    "shortDescription": "Allows you to group bar series so that bars with the same argument overlap."
  },
  "dxChartSeriesTypes.CommonSeries.barPadding": {
    "shortDescription": "Controls the padding and consequently the width of all bars in a series using relative units. Ignored if the [barWidth](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/barWidth.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/#barWidth') property is set."
  },
  "dxChartSeriesTypes.CommonSeries.barWidth": {
    "shortDescription": "Specifies a fixed width for all bars in a series, measured in pixels. Takes precedence over the [barPadding](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/barPadding.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/#barPadding') property."
  },
  "dxChartSeriesTypes.CommonSeries.border": {
    "shortDescription": "Configures the series border (in area-like series) or the series point border (in bar-like and bubble series)."
  },
  "dxChartSeriesTypes.CommonSeries.border.color": {
    "shortDescription": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series)."
  },
  "dxChartSeriesTypes.CommonSeries.border.dashStyle": {
    "shortDescription": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
  },
  "dxChartSeriesTypes.CommonSeries.border.visible": {
    "shortDescription": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series)."
  },
  "dxChartSeriesTypes.CommonSeries.border.width": {
    "shortDescription": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
  },
  "dxChartSeriesTypes.CommonSeries.closeValueField": {
    "shortDescription": "Specifies which data source field provides close values for points of a financial series."
  },
  "dxChartSeriesTypes.CommonSeries.color": {
    "shortDescription": "Specifies the color of the series."
  },
  "dxChartSeriesTypes.CommonSeries.cornerRadius": {
    "shortDescription": "Makes bars look rounded. Applies only to bar-like series."
  },
  "dxChartSeriesTypes.CommonSeries.dashStyle": {
    "shortDescription": "Specifies the dash style of the series line. Applies only to line-like series."
  },
  "dxChartSeriesTypes.CommonSeries.highValueField": {
    "shortDescription": "Specifies which data source field provides high values for points of a financial series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle": {
    "shortDescription": "Configures the appearance adopted by the series when a user points to it."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.border": {
    "shortDescription": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.border.color": {
    "shortDescription": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.border.dashStyle": {
    "shortDescription": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.border.visible": {
    "shortDescription": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.border.width": {
    "shortDescription": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.color": {
    "shortDescription": "Specifies the color of the series in the hovered state."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.dashStyle": {
    "shortDescription": "Specifies the dash style of the series line when the series is in the hovered state. Applies only to line-like series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.hatching": {
    "shortDescription": "Configures hatching that applies when a user points to the series."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.direction": {
    "shortDescription": "Specifies the direction of hatching lines."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.opacity": {
    "shortDescription": "Specifies how transparent hatching lines should be."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.step": {
    "shortDescription": "Specifies the distance between two side-by-side hatching lines in pixels."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.width": {
    "shortDescription": "Specifies the width of hatching lines in pixels."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.highlight": {
    "shortDescription": "Specifies whether to lighten the series when a user hovers the mouse pointer over it."
  },
  "dxChartSeriesTypes.CommonSeries.hoverStyle.width": {
    "shortDescription": "Specifies the pixel-measured width of the series line when the series is in the hovered state."
  },
  "dxChartSeriesTypes.CommonSeries.ignoreEmptyPoints": {
    "shortDescription": "Specifies whether the series should ignore null data points."
  },
  "dxChartSeriesTypes.CommonSeries.innerColor": {
    "shortDescription": "Specifies a filling color for the body of a series point that visualizes a [non-reduced](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/reduction '/Documentation/ApiReference/UI_Components/dxChart/Configuration/commonSeriesSettings/reduction/') value. Applies only to [*candlestick* series](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CandleStickSeries '/Documentation/ApiReference/UI_Components/dxChart/Series_Types/CandleStickSeries/')."
  },
  "dxChartSeriesTypes.CommonSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.CommonSeries.label.alignment": {
    "shortDescription": "Aligns point labels in relation to their points."
  },
  "dxChartSeriesTypes.CommonSeries.label.argumentFormat": {
    "shortDescription": "Formats the point argument before it is displayed in the point label. To format the point value, use the [format](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/label/format.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/series/label/#format') property."
  },
  "dxChartSeriesTypes.CommonSeries.label.backgroundColor": {
    "shortDescription": "Colors the point labels' background. The default color is inherited from the points."
  },
  "dxChartSeriesTypes.CommonSeries.label.border": {
    "shortDescription": "Configures the borders of point labels."
  },
  "dxChartSeriesTypes.CommonSeries.label.border.color": {
    "shortDescription": "Colors the border."
  },
  "dxChartSeriesTypes.CommonSeries.label.border.dashStyle": {
    "shortDescription": "Specifies the dash style of the border."
  },
  "dxChartSeriesTypes.CommonSeries.label.border.visible": {
    "shortDescription": "Makes the border visible."
  },
  "dxChartSeriesTypes.CommonSeries.label.border.width": {
    "shortDescription": "Specifies the width of the border in pixels."
  },
  "dxChartSeriesTypes.CommonSeries.label.connector": {
    "shortDescription": "Configures the label connectors."
  },
  "dxChartSeriesTypes.CommonSeries.label.connector.color": {
    "shortDescription": "Colors the connectors."
  },
  "dxChartSeriesTypes.CommonSeries.label.connector.visible": {
    "shortDescription": "Makes the connectors visible. Applies only if **label**.**visible** is set to **true**."
  },
  "dxChartSeriesTypes.CommonSeries.label.connector.width": {
    "shortDescription": "Specifies the width of the connectors in pixels."
  },
  "dxChartSeriesTypes.CommonSeries.label.customizeText": {
    "shortDescription": "Customizes text displayed by point labels."
  },
  "dxChartSeriesTypes.CommonSeries.label.displayFormat": {
    "shortDescription": "Specifies the label's text."
  },
  "dxChartSeriesTypes.CommonSeries.label.font": {
    "shortDescription": "Specifies font properties for point labels."
  },
  "dxChartSeriesTypes.CommonSeries.label.format": {
    "shortDescription": "Formats the point value before it is displayed in the point label."
  },
  "dxChartSeriesTypes.CommonSeries.label.horizontalOffset": {
    "shortDescription": "Along with **verticalOffset**, shifts point labels from their initial positions."
  },
  "dxChartSeriesTypes.CommonSeries.label.position": {
    "shortDescription": "Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series."
  },
  "dxChartSeriesTypes.CommonSeries.label.rotationAngle": {
    "shortDescription": "Rotates point labels."
  },
  "dxChartSeriesTypes.CommonSeries.label.showForZeroValues": {
    "shortDescription": "Specifies whether or not to show labels for points with zero value. Applies only to bar-like series."
  },
  "dxChartSeriesTypes.CommonSeries.label.verticalOffset": {
    "shortDescription": "Along with **horizontalOffset**, shifts point labels from their initial positions."
  },
  "dxChartSeriesTypes.CommonSeries.label.visible": {
    "shortDescription": "Makes the point labels visible."
  },
  "dxChartSeriesTypes.CommonSeries.lowValueField": {
    "shortDescription": "Specifies which data source field provides low values for points of a financial series."
  },
  "dxChartSeriesTypes.CommonSeries.maxLabelCount": {
    "shortDescription": "Specifies a limit for the number of point labels."
  },
  "dxChartSeriesTypes.CommonSeries.minBarSize": {
    "shortDescription": "Specifies the minimal possible height (or length if the chart is [rotated](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/rotated.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/#rotated')) of a bar in pixels. Applies only to bar-like series."
  },
  "dxChartSeriesTypes.CommonSeries.opacity": {
    "shortDescription": "Specifies how transparent the series should be."
  },
  "dxChartSeriesTypes.CommonSeries.openValueField": {
    "shortDescription": "Specifies which data source field provides open values for points of a financial series."
  },
  "dxChartSeriesTypes.CommonSeries.pane": {
    "shortDescription": "Specifies which [pane](/concepts/05%20UI%20Components/Chart/40%20Panes/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Panes/Overview/') the series should belong to. Accepts the [name](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/panes/name.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/panes/#name') of the pane."
  },
  "dxChartSeriesTypes.CommonSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.CommonSeries.point.border": {
    "shortDescription": "Configures the appearance of the series point border in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.CommonSeries.point.border.color": {
    "shortDescription": "Colors the border."
  },
  "dxChartSeriesTypes.CommonSeries.point.border.visible": {
    "shortDescription": "Makes the border visible."
  },
  "dxChartSeriesTypes.CommonSeries.point.border.width": {
    "shortDescription": "Sets the width of the border in pixels."
  },
  "dxChartSeriesTypes.CommonSeries.point.color": {
    "shortDescription": "Colors the series points."
  },
  "dxChartSeriesTypes.CommonSeries.point.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user pauses on a series point."
  },
  "dxChartSeriesTypes.CommonSeries.point.hoverStyle": {
    "shortDescription": "Configures the appearance adopted by a series point when a user pauses on it."
  },
  "dxChartSeriesTypes.CommonSeries.point.hoverStyle.border": {
    "shortDescription": "Configures the appearance of the point border when a user pauses on the point."
  },
  "dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.color": {
    "shortDescription": "Specifies the color of the point border when the point is in the hovered state."
  },
  "dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.visible": {
    "shortDescription": "Makes the border visible when a user pauses on the series point."
  },
  "dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.width": {
    "shortDescription": "Specifies the width of the point border when the point is in the hovered state."
  },
  "dxChartSeriesTypes.CommonSeries.point.hoverStyle.color": {
    "shortDescription": "Specifies the color of series points in the hovered state."
  },
  "dxChartSeriesTypes.CommonSeries.point.hoverStyle.size": {
    "shortDescription": "Specfies the diameter of series points in the hovered state."
  },
  "dxChartSeriesTypes.CommonSeries.point.image": {
    "shortDescription": "Substitutes the [standard point symbols](/api-reference/10%20UI%20Components/dxChart/5%20Series%20Types/CommonSeries/point/symbol.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/commonSeriesSettings/point/#symbol') with an image."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.height": {
    "shortDescription": "Specifies the height of the image used instead of a point marker."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.height.rangeMaxPoint": {
    "shortDescription": "Specifies the height of the image that represents the maximum point in a *range area* series."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.height.rangeMinPoint": {
    "shortDescription": "Specifies the height of the image that represents the minimum point in a *range area* series."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.url": {
    "shortDescription": "Specifies the URL of the image to be used as a point marker."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.url.rangeMaxPoint": {
    "shortDescription": "Specifies the URL of the image to be used as a maximum point marker."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.url.rangeMinPoint": {
    "shortDescription": "Specifies the URL of the image to be used as a maximum point marker."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.width": {
    "shortDescription": "Specifies the width of an image that is used as a point marker."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.width.rangeMaxPoint": {
    "shortDescription": "Specifies the width of the image that represents the maximum point in a *range area* series."
  },
  "dxChartSeriesTypes.CommonSeries.point.image.width.rangeMinPoint": {
    "shortDescription": "Specifies the width of the image that represents the minimum point in a *range area* series."
  },
  "dxChartSeriesTypes.CommonSeries.point.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series point."
  },
  "dxChartSeriesTypes.CommonSeries.point.selectionStyle": {
    "shortDescription": "Configures the appearance of a selected series point."
  },
  "dxChartSeriesTypes.CommonSeries.point.selectionStyle.border": {
    "shortDescription": "Configures the border of a selected point."
  },
  "dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.color": {
    "shortDescription": "Specifies the color of the point border when the point is selected."
  },
  "dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.visible": {
    "shortDescription": "Makes the border of a selected point visible."
  },
  "dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.width": {
    "shortDescription": "Specifies the width of the point border when the point is selected."
  },
  "dxChartSeriesTypes.CommonSeries.point.selectionStyle.color": {
    "shortDescription": "Specifies the color of series points in the selected state."
  },
  "dxChartSeriesTypes.CommonSeries.point.selectionStyle.size": {
    "shortDescription": "Specfies the diameter of series points in the selected state."
  },
  "dxChartSeriesTypes.CommonSeries.point.size": {
    "shortDescription": "Specifies the diameter of series points in pixels."
  },
  "dxChartSeriesTypes.CommonSeries.point.symbol": {
    "shortDescription": "Specifies which symbol should represent series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.CommonSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.CommonSeries.rangeValue1Field": {
    "shortDescription": "Coupled with the **rangeValue2Field** property, specifies which data source field provides values for a range-like series."
  },
  "dxChartSeriesTypes.CommonSeries.rangeValue2Field": {
    "shortDescription": "Coupled with the **rangeValue1Field** property, specifies which data source field provides values for a range-like series."
  },
  "dxChartSeriesTypes.CommonSeries.reduction": {
    "shortDescription": "Specifies reduction properties for financial series."
  },
  "dxChartSeriesTypes.CommonSeries.reduction.color": {
    "shortDescription": "Specifies a color for the points whose price has decreased in comparison to the price of the previous point."
  },
  "dxChartSeriesTypes.CommonSeries.reduction.level": {
    "shortDescription": "Specifies whether high, low, open or close prices of points should be compared."
  },
  "dxChartSeriesTypes.CommonSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle": {
    "shortDescription": "Configures the appearance adopted by the series when a user selects it."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.border": {
    "shortDescription": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.border.color": {
    "shortDescription": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.border.dashStyle": {
    "shortDescription": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.border.visible": {
    "shortDescription": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.border.width": {
    "shortDescription": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.color": {
    "shortDescription": "Specifies the color of the series in the selected state."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.dashStyle": {
    "shortDescription": "Specifies the dash style of the series line when the series is in the selected state. Applies only to line-like series."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.hatching": {
    "shortDescription": "Configures hatching that applies when a user selects the series."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.direction": {
    "shortDescription": "Specifies the direction of hatching lines."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.opacity": {
    "shortDescription": "Specifies how transparent hatching lines should be."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.step": {
    "shortDescription": "Specifies the distance between two side-by-side hatching lines in pixels."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.width": {
    "shortDescription": "Specifies the width of hatching lines in pixels."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.highlight": {
    "shortDescription": "Specifies whether to lighten the series when a user selects it."
  },
  "dxChartSeriesTypes.CommonSeries.selectionStyle.width": {
    "shortDescription": "Specifies the pixel-measured width of the series line when the series is in the selected state."
  },
  "dxChartSeriesTypes.CommonSeries.showInLegend": {
    "shortDescription": "Specifies whether to show the series in the [legend](/concepts/05%20UI%20Components/Chart/35%20Legend/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Legend/Overview/') or not."
  },
  "dxChartSeriesTypes.CommonSeries.sizeField": {
    "shortDescription": "Specifies which data source field provides size values for bubbles. Required by and applies only to *bubble* series."
  },
  "dxChartSeriesTypes.CommonSeries.stack": {
    "shortDescription": "Specifies which stack the series should belongs to. Applies only to *stacked bar* and *full-stacked bar* series."
  },
  "dxChartSeriesTypes.CommonSeries.tagField": {
    "shortDescription": "Specifies which data source field provides auxiliary data for series points."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar": {
    "shortDescription": "Configures error bars."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.color": {
    "shortDescription": "Specifies the color of error bars."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.displayMode": {
    "shortDescription": "Specifies whether error bars must be displayed in full or partially."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.edgeLength": {
    "shortDescription": "Specifies the length of the lines that indicate error bar edges."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.highValueField": {
    "shortDescription": "Specifies which data field provides high error values."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.lineWidth": {
    "shortDescription": "Specifies the width of the error bar line."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.lowValueField": {
    "shortDescription": "Specifies which data field provides low error values."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.opacity": {
    "shortDescription": "Specifies how trasparent error bars should be."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.type": {
    "shortDescription": "Specifies how error bar values must be calculated."
  },
  "dxChartSeriesTypes.CommonSeries.valueErrorBar.value": {
    "shortDescription": "Specifies the value to be used for generating error bars."
  },
  "dxChartSeriesTypes.CommonSeries.valueField": {
    "shortDescription": "Specifies which data source field provides values for series points."
  },
  "dxChartSeriesTypes.CommonSeries.visible": {
    "shortDescription": "Specifies whether the series is visible or not."
  },
  "dxChartSeriesTypes.CommonSeries.width": {
    "shortDescription": "Specifies the width of the series line in pixels. Applies only to line-like series."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries": {
    "shortDescription": "Describes settings supported by a series of the *full-stacked area* type."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries.label": {
    "shortDescription": "An object defining the label configuration properties."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.FullStackedAreaSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.FullStackedBarSeries": {
    "shortDescription": "Describes settings supported by a series of the *full-stacked bar* type."
  },
  "dxChartSeriesTypes.FullStackedBarSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.FullStackedBarSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.FullStackedBarSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.FullStackedBarSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.FullStackedBarSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.FullStackedBarSeries.label.position": {
    "shortDescription": "Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series."
  },
  "dxChartSeriesTypes.FullStackedBarSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a bar."
  },
  "dxChartSeriesTypes.FullStackedLineSeries": {
    "shortDescription": "Describes settings supported by a series of the *full-stacked line* type."
  },
  "dxChartSeriesTypes.FullStackedLineSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.FullStackedLineSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.FullStackedLineSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.FullStackedLineSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.FullStackedLineSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.FullStackedLineSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries": {
    "shortDescription": "Describes settings supported by a series of the *full-stacked spline area* type."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.FullStackedSplineAreaSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.FullStackedSplineSeries": {
    "shortDescription": "Describes settings supported by a series of the *full-stacked spline area* type.\nAn object defining a series of the **fullStackedSpline** type."
  },
  "dxChartSeriesTypes.FullStackedSplineSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.FullStackedSplineSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.FullStackedSplineSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.FullStackedSplineSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.FullStackedSplineSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.FullStackedSplineSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.LineSeries": {
    "shortDescription": "Describes settings supported by a series of the *line* type."
  },
  "dxChartSeriesTypes.LineSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.LineSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.LineSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.LineSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.LineSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.LineSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.RangeAreaSeries": {
    "shortDescription": "Describes settings supported by a series of the *range area* type."
  },
  "dxChartSeriesTypes.RangeAreaSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.RangeAreaSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.RangeAreaSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.RangeAreaSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.RangeAreaSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.RangeAreaSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.RangeAreaSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.RangeAreaSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.RangeBarSeries": {
    "shortDescription": "Describes settings supported by a series of the *range bar* type."
  },
  "dxChartSeriesTypes.RangeBarSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.RangeBarSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.RangeBarSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.RangeBarSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.RangeBarSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.RangeBarSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a range bar."
  },
  "dxChartSeriesTypes.ScatterSeries": {
    "shortDescription": "Describes settings supported by a series of the *scatter* type."
  },
  "dxChartSeriesTypes.ScatterSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.ScatterSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.ScatterSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.ScatterSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.SplineAreaSeries": {
    "shortDescription": "Describes settings supported by a series of the *spline area* type."
  },
  "dxChartSeriesTypes.SplineAreaSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.SplineAreaSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.SplineAreaSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.SplineAreaSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.SplineAreaSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.SplineAreaSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.SplineAreaSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.SplineAreaSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.SplineSeries": {
    "shortDescription": "Describes settings supported by a series of the *spline* type."
  },
  "dxChartSeriesTypes.SplineSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.SplineSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.SplineSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.SplineSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.SplineSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.SplineSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.StackedAreaSeries": {
    "shortDescription": "Describes settings supported by a series of the *stacked area* type."
  },
  "dxChartSeriesTypes.StackedAreaSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.StackedAreaSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.StackedAreaSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.StackedAreaSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.StackedAreaSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.StackedAreaSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.StackedAreaSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.StackedAreaSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.StackedBarSeries": {
    "shortDescription": "Describes settings supported by a series of the *stacked bar* type."
  },
  "dxChartSeriesTypes.StackedBarSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.StackedBarSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.StackedBarSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.StackedBarSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.StackedBarSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.StackedBarSeries.label.position": {
    "shortDescription": "Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series."
  },
  "dxChartSeriesTypes.StackedBarSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a bar."
  },
  "dxChartSeriesTypes.StackedLineSeries": {
    "shortDescription": "Describes settings supported by a series of the *stacked line* type."
  },
  "dxChartSeriesTypes.StackedLineSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.StackedLineSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.StackedLineSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.StackedLineSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.StackedLineSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.StackedLineSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries": {
    "shortDescription": "Describes settings supported by a series of the *stacked spline area* type."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.StackedSplineAreaSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.StackedSplineSeries": {
    "shortDescription": "Describes settings supported by a series of the *stacked spline* type."
  },
  "dxChartSeriesTypes.StackedSplineSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.StackedSplineSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.StackedSplineSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.StackedSplineSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.StackedSplineSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.StackedSplineSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.StepAreaSeries": {
    "shortDescription": "Describes settings supported by a series of the *step rea* type."
  },
  "dxChartSeriesTypes.StepAreaSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.StepAreaSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.StepAreaSeries.border": {
    "shortDescription": "Configures the series border (in area-like series) or the series point border (in bar-like and bubble series)."
  },
  "dxChartSeriesTypes.StepAreaSeries.border.visible": {
    "shortDescription": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series)."
  },
  "dxChartSeriesTypes.StepAreaSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.StepAreaSeries.hoverStyle": {
    "shortDescription": "Configures the appearance adopted by the series when a user points to it."
  },
  "dxChartSeriesTypes.StepAreaSeries.hoverStyle.border": {
    "shortDescription": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
  },
  "dxChartSeriesTypes.StepAreaSeries.hoverStyle.border.visible": {
    "shortDescription": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
  },
  "dxChartSeriesTypes.StepAreaSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.StepAreaSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.StepAreaSeries.point": {
    "shortDescription": "Configures series points in scatter, line- and area-like series."
  },
  "dxChartSeriesTypes.StepAreaSeries.point.visible": {
    "shortDescription": "Makes the series points visible."
  },
  "dxChartSeriesTypes.StepAreaSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.StepAreaSeries.selectionStyle": {
    "shortDescription": "Configures the appearance adopted by the series when a user selects it."
  },
  "dxChartSeriesTypes.StepAreaSeries.selectionStyle.border": {
    "shortDescription": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
  },
  "dxChartSeriesTypes.StepAreaSeries.selectionStyle.border.visible": {
    "shortDescription": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
  },
  "dxChartSeriesTypes.StepLineSeries": {
    "shortDescription": "Describes settings supported by a series of the *step line* type."
  },
  "dxChartSeriesTypes.StepLineSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.StepLineSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.StepLineSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "dxChartSeriesTypes.StepLineSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.StepLineSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.StepLineSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "dxChartSeriesTypes.StockSeries": {
    "shortDescription": "Describes settings supported by a series of the *stock* type."
  },
  "dxChartSeriesTypes.StockSeries.aggregation": {
    "shortDescription": "Configures data aggregation for the series."
  },
  "dxChartSeriesTypes.StockSeries.aggregation.method": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "dxChartSeriesTypes.StockSeries.argumentField": {
    "shortDescription": "Specifies which data source field provides arguments for series points."
  },
  "dxChartSeriesTypes.StockSeries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user pauses on a series."
  },
  "dxChartSeriesTypes.StockSeries.label": {
    "shortDescription": "Configures point labels."
  },
  "dxChartSeriesTypes.StockSeries.label.customizeText": {
    "shortDescription": "Customizes the text displayed by point labels."
  },
  "dxChartSeriesTypes.StockSeries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a point."
  },
  "dxChartTooltip": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChartValueAxis": {
    "shortDescription": "Configures the value axis."
  },
  "dxChartValueAxisConstantLines": {
    "shortDescription": "Declares a collection of constant lines belonging to the value axis."
  },
  "dxChartValueAxisConstantLinesLabel": {
    "shortDescription": "Configures the constant line label."
  },
  "dxChartValueAxisConstantLineStyle": {
    "shortDescription": "Specifies the appearance of those constant lines that belong to the value axis."
  },
  "dxChartValueAxisConstantLineStyleLabel": {
    "shortDescription": "Specifies the appearance of the labels of those constant lines that belong to the value axis."
  },
  "dxChartValueAxisLabel": {
    "shortDescription": "Configures the labels of the value axis."
  },
  "dxChartValueAxisStrips": {
    "shortDescription": "Declares a collection of strips belonging to the value axis."
  },
  "dxChartValueAxisStripsLabel": {
    "shortDescription": "Configures the strip label."
  },
  "dxChartValueAxisTitle": {
    "shortDescription": "Configures the axis title."
  },
  "dxChat": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChat.contentReady": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChat.messageEntered": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChat.renderMessage(message)": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChat.typingEnd": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChat.typingStart": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.activeStateEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.alerts": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.dataSource": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.dayHeaderFormat": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.focusStateEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.hoverStateEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.items": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.messageTemplate": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.messageTimestampFormat": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.onContentReady": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.onDisposing": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.onInitialized": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.onMessageEntered": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.onOptionChanged": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.onTypingEnd": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.onTypingStart": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.registerKeyHandler": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.reloadOnChange": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.showAvatar": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.showDayHeaders": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.showMessageTimestamp": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.showUserName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.tabIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.typingUsers": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxChatOptions.user": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxCheckBox": {
    "shortDescription": "The CheckBox is a small box, which when selected by the end user, shows that a particular feature has been enabled or a specific property has been chosen."
  },
  "dxCheckBox.blur()": {
    "shortDescription": "Removes focus from the check box."
  },
  "dxCheckBox.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxCheckBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxCheckBoxOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxCheckBoxOptions.enableThreeStateBehavior": {
    "shortDescription": "Specifies whether users can set the CheckBox state to indeterminate."
  },
  "dxCheckBoxOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxCheckBoxOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxCheckBoxOptions.iconSize": {
    "shortDescription": "Specifies the check box icon's width and height."
  },
  "dxCheckBoxOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxCheckBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxCheckBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxCheckBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxCheckBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxCheckBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxCheckBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxCheckBoxOptions.text": {
    "shortDescription": "Specifies the text displayed by the check box."
  },
  "dxCheckBoxOptions.value": {
    "shortDescription": "Specifies the UI component state."
  },
  "dxCircularGauge": {
    "shortDescription": "The CircularGauge is a UI component that indicates values on a circular numeric scale."
  },
  "dxCircularGaugeOptions.centerTemplate": {
    "shortDescription": "Specifies a custom template for content in the component's center."
  },
  "dxCircularGaugeOptions.geometry": {
    "shortDescription": "Specifies the properties required to set the geometry of the CircularGauge UI component."
  },
  "dxCircularGaugeOptions.geometry.endAngle": {
    "shortDescription": "Specifies the end angle of the circular gauge's arc."
  },
  "dxCircularGaugeOptions.geometry.startAngle": {
    "shortDescription": "Specifies the start angle of the circular gauge's arc."
  },
  "dxCircularGaugeOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxCircularGaugeOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxCircularGaugeOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxCircularGaugeOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxCircularGaugeOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxCircularGaugeOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxCircularGaugeOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxCircularGaugeOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxCircularGaugeOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxCircularGaugeOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxCircularGaugeOptions.rangeContainer": {
    "shortDescription": "Specifies gauge range container properties."
  },
  "dxCircularGaugeOptions.rangeContainer.orientation": {
    "shortDescription": "Specifies the orientation of the range container in the CircularGauge UI component."
  },
  "dxCircularGaugeOptions.rangeContainer.width": {
    "shortDescription": "Specifies the range container's width in pixels."
  },
  "dxCircularGaugeOptions.scale": {
    "shortDescription": "Specifies a gauge's scale properties."
  },
  "dxCircularGaugeOptions.scale.label": {
    "shortDescription": "Specifies common properties for scale labels."
  },
  "dxCircularGaugeOptions.scale.label.hideFirstOrLast": {
    "shortDescription": "Specifies which label to hide in case of overlapping."
  },
  "dxCircularGaugeOptions.scale.label.indentFromTick": {
    "shortDescription": "Specifies the spacing between scale labels and ticks."
  },
  "dxCircularGaugeOptions.scale.orientation": {
    "shortDescription": "Specifies the orientation of scale ticks."
  },
  "dxCircularGaugeOptions.subvalueIndicator": {
    "shortDescription": "Specifies the appearance properties of subvalue indicators."
  },
  "dxCircularGaugeOptions.subvalueIndicator.type": {
    "shortDescription": "Specifies the type of subvalue indicators."
  },
  "dxCircularGaugeOptions.valueIndicator": {
    "shortDescription": "Specifies the appearance properties of the value indicator."
  },
  "dxCircularGaugeOptions.valueIndicator.type": {
    "shortDescription": "Specifies the value indicator type."
  },
  "dxCircularGaugeRangeContainer": {
    "shortDescription": "Specifies gauge range container properties."
  },
  "dxCircularGaugeScale": {
    "shortDescription": "Specifies a gauge's scale properties."
  },
  "dxCircularGaugeScaleLabel": {
    "shortDescription": "Specifies common properties for scale labels."
  },
  "dxColorBox": {
    "shortDescription": "The ColorBox is a UI component that allows an end user to enter a color or pick it out from the drop-down editor."
  },
  "dxColorBox.contentReady": {
    "shortDescription": ""
  },
  "dxColorBox.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxColorBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxColorBoxOptions.applyButtonText": {
    "shortDescription": "Specifies the text displayed on the button that applies changes and closes the drop-down editor."
  },
  "dxColorBoxOptions.applyValueMode": {
    "shortDescription": "Specifies the way an end user applies the selected value."
  },
  "dxColorBoxOptions.cancelButtonText": {
    "shortDescription": "Specifies the text displayed on the button that cancels changes and closes the drop-down editor."
  },
  "dxColorBoxOptions.dropDownOptions": {
    "shortDescription": "Configures the drop-down field which holds the [content](/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#contentTemplate)."
  },
  "dxColorBoxOptions.editAlphaChannel": {
    "shortDescription": "Specifies whether or not the UI component value includes the alpha channel component."
  },
  "dxColorBoxOptions.fieldTemplate": {
    "shortDescription": "Specifies a custom template for the input field. Must contain the [TextBox](/api-reference/10%20UI%20Components/dxTextBox '/Documentation/ApiReference/UI_Components/dxTextBox/') UI component."
  },
  "dxColorBoxOptions.keyStep": {
    "shortDescription": "Specifies the size of a step by which a handle is moved using a keyboard shortcut."
  },
  "dxColorBoxOptions.maxLength": {
    "shortDescription": "Specifies the maximum number of characters you can enter into the textbox."
  },
  "dxColorBoxOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxColorBoxOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxColorBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxColorBoxOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxColorBoxOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxColorBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxColorBoxOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxColorBoxOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxColorBoxOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxColorBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxColorBoxOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxColorBoxOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxColorBoxOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxColorBoxOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxColorBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxColorBoxOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxColorBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxColorBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxColorBoxOptions.spellcheck": {
    "shortDescription": "Specifies whether or not the UI component checks the inner text for spelling mistakes."
  },
  "dxColorBoxOptions.value": {
    "shortDescription": "Specifies the currently selected value."
  },
  "dxColorBoxOptions.valueChangeEvent": {
    "shortDescription": "Specifies the <a href=\"https://en.wikipedia.org/wiki/DOM_events\" target=\"_blank\">DOM events</a> after which the UI component's [value](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should be updated."
  },
  "dxContextMenu": {
    "shortDescription": "The ContextMenu UI component displays a single- or multi-level context menu. An end user invokes this menu by a right click or a long press."
  },
  "dxContextMenu.hidden": {
    "shortDescription": "Raised after the ContextMenu is hidden."
  },
  "dxContextMenu.hide()": {
    "shortDescription": "Hides the UI component."
  },
  "dxContextMenu.hiding": {
    "shortDescription": "Raised before the ContextMenu is hidden."
  },
  "dxContextMenu.positioning": {
    "shortDescription": "Raised before the ContextMenu is positioned."
  },
  "dxContextMenu.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxContextMenu.show()": {
    "shortDescription": "Shows the UI component."
  },
  "dxContextMenu.showing": {
    "shortDescription": "Raised before the ContextMenu is shown."
  },
  "dxContextMenu.shown": {
    "shortDescription": "Raised after the ContextMenu is shown."
  },
  "dxContextMenu.toggle(showing)": {
    "shortDescription": "Shows or hides the UI component depending on the argument."
  },
  "dxContextMenuItem.items": {
    "shortDescription": "Specifies nested menu items."
  },
  "dxContextMenuOptions.closeOnOutsideClick": {
    "shortDescription": "Specifies whether to close the UI component if a user clicks outside it.",
    "depNote": "Use the hideOnOutsideClick option instead."
  },
  "dxContextMenuOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxContextMenuOptions.hideOnOutsideClick": {
    "shortDescription": "Specifies whether to hide the UI component if a user clicks outside it."
  },
  "dxContextMenuOptions.items": {
    "shortDescription": "Holds an array of menu items."
  },
  "dxContextMenuOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxContextMenuOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxContextMenuOptions.onHidden": {
    "shortDescription": "A function that is executed after the ContextMenu is hidden."
  },
  "dxContextMenuOptions.onHiding": {
    "shortDescription": "A function that is executed before the ContextMenu is hidden."
  },
  "dxContextMenuOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxContextMenuOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxContextMenuOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxContextMenuOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxContextMenuOptions.onItemReordered": {
    "shortDescription": "A function that is executed after a collection item is moved to another position."
  },
  "dxContextMenuOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxContextMenuOptions.onPositioning": {
    "shortDescription": "A function that is executed before the ContextMenu is positioned."
  },
  "dxContextMenuOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a collection item is selected or selection is canceled."
  },
  "dxContextMenuOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxContextMenuOptions.onShowing": {
    "shortDescription": "A function that is executed before the ContextMenu is shown."
  },
  "dxContextMenuOptions.onShown": {
    "shortDescription": "A function that is executed after the ContextMenu is shown."
  },
  "dxContextMenuOptions.position": {
    "shortDescription": "An object defining UI component [positioning properties](/api-reference/50%20Common/Object%20Structures/positionConfig '/Documentation/ApiReference/Common/Object_Structures/PositionConfig/')."
  },
  "dxContextMenuOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxContextMenuOptions.showEvent": {
    "shortDescription": "Specifies properties for displaying the UI component."
  },
  "dxContextMenuOptions.showEvent.delay": {
    "shortDescription": "The delay in milliseconds after which the UI component is displayed."
  },
  "dxContextMenuOptions.showEvent.name": {
    "shortDescription": "Specifies the event names on which the UI component is shown."
  },
  "dxContextMenuOptions.submenuDirection": {
    "shortDescription": "Specifies the direction at which submenus are displayed."
  },
  "dxContextMenuOptions.target": {
    "shortDescription": "The target element associated with the context menu."
  },
  "dxContextMenuOptions.visible": {
    "shortDescription": "A Boolean value specifying whether or not the UI component is visible."
  },
  "dxDataGrid": {
    "shortDescription": "The DataGrid is a UI component that represents data from a local or remote source in the form of a grid. This UI component offers such basic features as [sorting](/concepts/05%20UI%20Components/DataGrid/25%20Sorting '/Documentation/Guide/UI_Components/DataGrid/Sorting/'), [grouping](/concepts/05%20UI%20Components/DataGrid/45%20Grouping '/Documentation/Guide/UI_Components/DataGrid/Grouping/'), [filtering](/concepts/05%20UI%20Components/DataGrid/30%20Filtering%20and%20Searching '/Documentation/Guide/UI_Components/DataGrid/Filtering_and_Searching/'), as well as more advanced capabilities, like [state storing](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/stateStoring '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/stateStoring/'), [client-side exporting](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/export '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/export/'), [master-detail interface](/concepts/05%20UI%20Components/DataGrid/60%20Master-Detail%20Interface '/Documentation/Guide/UI_Components/DataGrid/Master-Detail_Interface/'), and many others."
  },
  "dxDataGrid.addColumn(columnOptions)": {
    "shortDescription": "Adds a new column."
  },
  "dxDataGrid.addRow()": {
    "shortDescription": "Adds an empty data row and switches it to the editing state."
  },
  "dxDataGrid.cellClick": {
    "shortDescription": "Raised when a cell is clicked or tapped."
  },
  "dxDataGrid.cellDblClick": {
    "shortDescription": "Raised when a cell is double-clicked or double-tapped."
  },
  "dxDataGrid.cellHoverChanged": {
    "shortDescription": "Raised after the pointer enters or leaves a cell."
  },
  "dxDataGrid.cellPrepared": {
    "shortDescription": "Raised after a cell is created."
  },
  "dxDataGrid.clearGrouping()": {
    "shortDescription": "Ungroups grid records."
  },
  "dxDataGrid.collapseAll(groupIndex)": {
    "shortDescription": "Collapses master rows or groups of a specific level."
  },
  "dxDataGrid.collapseRow(key)": {
    "shortDescription": "Collapses a group or a master row with a specific key."
  },
  "dxDataGrid.contextMenuPreparing": {
    "shortDescription": "Raised before the context menu is rendered."
  },
  "dxDataGrid.editingStart": {
    "shortDescription": "Raised before a cell or row switches to the editing state."
  },
  "dxDataGrid.editorPrepared": {
    "shortDescription": "Raised after an editor is created."
  },
  "dxDataGrid.editorPreparing": {
    "shortDescription": "Raised before an editor is created."
  },
  "dxDataGrid.expandAll(groupIndex)": {
    "shortDescription": "Expands master rows or groups of a specific level. Does not apply if data is remote."
  },
  "dxDataGrid.expandRow(key)": {
    "shortDescription": "Expands a group or a master row with a specific key."
  },
  "dxDataGrid.exporting": {
    "shortDescription": "Raised before data is exported."
  },
  "dxDataGrid.focusedCellChanged": {
    "shortDescription": "Raised after the focused cell changes."
  },
  "dxDataGrid.focusedCellChanging": {
    "shortDescription": "Raised before the focused cell changes."
  },
  "dxDataGrid.focusedRowChanged": {
    "shortDescription": "Raised after the focused row changes. Applies only when [focusedRowEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowEnabled.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#focusedRowEnabled') is **true**."
  },
  "dxDataGrid.focusedRowChanging": {
    "shortDescription": "Raised before the focused row changes. Applies only when [focusedRowEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowEnabled.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#focusedRowEnabled') is **true**."
  },
  "dxDataGrid.getSelectedRowKeys()": {
    "shortDescription": "Gets the currently selected rows' keys."
  },
  "dxDataGrid.getSelectedRowsData()": {
    "shortDescription": "Gets the selected rows' data objects."
  },
  "dxDataGrid.getTotalSummaryValue(summaryItemName)": {
    "shortDescription": "Gets the value of a [total summary item](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/totalItems '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/totalItems/')."
  },
  "dxDataGrid.getVisibleColumns()": {
    "shortDescription": "Gets all visible columns."
  },
  "dxDataGrid.getVisibleColumns(headerLevel)": {
    "shortDescription": "Gets all visible columns at a specific hierarchical level of column headers. Use it to access [banded columns](/concepts/05%20UI%20Components/DataGrid/15%20Columns/10%20Column%20Types/2%20Band%20Columns.md '/Documentation/Guide/UI_Components/DataGrid/Columns/Column_Types/Band_Columns/')."
  },
  "dxDataGrid.getVisibleRows()": {
    "shortDescription": "Gets currently rendered rows."
  },
  "dxDataGrid.isRowExpanded(key)": {
    "shortDescription": "Checks whether a specific group or master row is expanded or collapsed."
  },
  "dxDataGrid.isRowSelected(data)": {
    "shortDescription": "Checks whether a row found using its data object is selected. Takes effect only if **selection**.[deferred](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/selection/deferred.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/selection/#deferred') is **true**."
  },
  "dxDataGrid.rowClick": {
    "shortDescription": "Raised when a row is clicked or tapped."
  },
  "dxDataGrid.rowDblClick": {
    "shortDescription": "Raised when a row is double-clicked or double-tapped."
  },
  "dxDataGrid.rowPrepared": {
    "shortDescription": "Raised after a row is created."
  },
  "dxDataGrid.totalCount()": {
    "shortDescription": "Gets the total row count."
  },
  "dxDataGridColumn.allowExporting": {
    "shortDescription": "Specifies whether data from this column should be exported. Applies only if the column is [visible](/api-reference/_hidden/GridBaseColumn/visible.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#visible')."
  },
  "dxDataGridColumn.allowGrouping": {
    "shortDescription": "Specifies whether the user can group data by values of this column. Applies only when grouping is enabled."
  },
  "dxDataGridColumn.autoExpandGroup": {
    "shortDescription": "Specifies whether groups appear expanded or not when records are grouped by a specific column. Setting this property makes sense only when grouping is [allowed](/api-reference/_hidden/dxDataGridColumn/allowGrouping.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#allowGrouping') for this column."
  },
  "dxDataGridColumn.buttons": {
    "shortDescription": "Allows you to customize buttons in the edit column or create a custom [command column](/concepts/05%20UI%20Components/DataGrid/15%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/DataGrid/Columns/Column_Types/Command_Columns/'). Applies only if the column's [type](/api-reference/_hidden/dxDataGridColumn/type.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#type') is *\"buttons\"*."
  },
  "dxDataGridColumn.calculateGroupValue": {
    "shortDescription": "Sets custom column values used to group grid records."
  },
  "dxDataGridColumn.cellTemplate": {
    "shortDescription": "Specifies a custom template for data cells."
  },
  "dxDataGridColumn.columns": {
    "shortDescription": "An array of grid columns."
  },
  "dxDataGridColumn.editCellTemplate": {
    "shortDescription": "Specifies a custom template for data cells in an editing state."
  },
  "dxDataGridColumn.groupCellTemplate": {
    "shortDescription": "Specifies a custom template for group cells (group rows)."
  },
  "dxDataGridColumn.groupIndex": {
    "shortDescription": "Specifies the index of a column when grid records are [grouped](/concepts/05%20UI%20Components/DataGrid/45%20Grouping '/Documentation/Guide/UI_Components/DataGrid/Grouping/') by the values of this column."
  },
  "dxDataGridColumn.headerCellTemplate": {
    "shortDescription": "Specifies a custom template for column headers."
  },
  "dxDataGridColumn.showWhenGrouped": {
    "shortDescription": "Specifies whether or not to display the column when grid records are grouped by it."
  },
  "dxDataGridColumn.type": {
    "shortDescription": "Specifies the [command column](/concepts/05%20UI%20Components/DataGrid/15%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/DataGrid/Columns/Column_Types/Command_Columns/') that this object customizes."
  },
  "dxDataGridColumnButton": {
    "shortDescription": "Allows you to customize buttons in the edit column or create a custom [command column](/concepts/05%20Widgets/DataGrid/15%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/{WidgetName}/Columns/Column_Types/Command_Columns/'). Applies only if the column's [type](/api-reference/_hidden/dxDataGridColumn/type.md '/Documentation/ApiReference/UI_Components/dx{WidgetName}/Configuration/columns/#type') is *\"buttons\"*."
  },
  "dxDataGridColumnButton.disabled": {
    "shortDescription": "Specifies whether the button is disabled."
  },
  "dxDataGridColumnButton.name": {
    "shortDescription": "The name used to identify a built-in button."
  },
  "dxDataGridColumnButton.onClick": {
    "shortDescription": "A function that is executed when the button is clicked or tapped."
  },
  "dxDataGridColumnButton.template": {
    "shortDescription": "Specifies a custom button template."
  },
  "dxDataGridColumnButton.visible": {
    "shortDescription": "Specifies the button's visibility."
  },
  "dxDataGridEditing": {
    "shortDescription": "Configures editing."
  },
  "dxDataGridOptions.columns": {
    "shortDescription": "An array of grid columns."
  },
  "dxDataGridOptions.customizeColumns": {
    "shortDescription": "Customizes columns after they are created."
  },
  "dxDataGridOptions.dataRowTemplate": {
    "shortDescription": "Specifies a custom template for data rows."
  },
  "dxDataGridOptions.editing": {
    "shortDescription": "Configures editing."
  },
  "dxDataGridOptions.editing.allowAdding": {
    "shortDescription": "Specifies whether a user can add new rows."
  },
  "dxDataGridOptions.editing.allowDeleting": {
    "shortDescription": "Specifies whether a user can delete rows. It is called for each data row when defined as a function."
  },
  "dxDataGridOptions.editing.allowUpdating": {
    "shortDescription": "Specifies whether a user can update rows. It is called for each data row when defined as a function."
  },
  "dxDataGridOptions.editing.newRowPosition": {
    "shortDescription": "Specifies a position for a new row."
  },
  "dxDataGridOptions.editing.texts": {
    "shortDescription": "Contains properties that specify texts for editing-related UI elements."
  },
  "dxDataGridOptions.export": {
    "shortDescription": "Configures client-side exporting."
  },
  "dxDataGridOptions.export.allowExportSelectedData": {
    "shortDescription": "Allows users to export selected rows only."
  },
  "dxDataGridOptions.export.enabled": {
    "shortDescription": "Adds the Export button to the DataGrid's toolbar."
  },
  "dxDataGridOptions.export.formats": {
    "shortDescription": "Specifies the availability and captions of data export buttons."
  },
  "dxDataGridOptions.export.texts": {
    "shortDescription": "Configures the texts of export commands, buttons, and hints."
  },
  "dxDataGridOptions.export.texts.exportAll": {
    "shortDescription": "The text or hint of the command that exports all data."
  },
  "dxDataGridOptions.export.texts.exportSelectedRows": {
    "shortDescription": "The text of the command that exports selected rows. Applies when the [allowExportSelectedData](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/export/allowExportSelectedData.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/export/#allowExportSelectedData') property is **true**."
  },
  "dxDataGridOptions.export.texts.exportTo": {
    "shortDescription": "The hint of the **Export** button when the [allowExportSelectedData](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/export/allowExportSelectedData.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/export/#allowExportSelectedData') property is **true**."
  },
  "dxDataGridOptions.grouping": {
    "shortDescription": "Configures grouping."
  },
  "dxDataGridOptions.grouping.allowCollapsing": {
    "shortDescription": "Specifies whether the user can collapse grouped records in a grid or not."
  },
  "dxDataGridOptions.grouping.autoExpandAll": {
    "shortDescription": "Specifies whether groups appear expanded or not."
  },
  "dxDataGridOptions.grouping.contextMenuEnabled": {
    "shortDescription": "Enables the user to group data using the context menu."
  },
  "dxDataGridOptions.grouping.expandMode": {
    "shortDescription": "Specifies the event on which a group will be expanded/collapsed."
  },
  "dxDataGridOptions.grouping.texts": {
    "shortDescription": "Defines the texts of grouping-related visual elements."
  },
  "dxDataGridOptions.grouping.texts.groupByThisColumn": {
    "shortDescription": "Specifies the text of the context menu item that groups data by a specific column."
  },
  "dxDataGridOptions.grouping.texts.groupContinuedMessage": {
    "shortDescription": "Specifies the message displayed in a group row when the corresponding group is continued from the previous page."
  },
  "dxDataGridOptions.grouping.texts.groupContinuesMessage": {
    "shortDescription": "Specifies the message displayed in a group row when the corresponding group continues on the next page."
  },
  "dxDataGridOptions.grouping.texts.ungroup": {
    "shortDescription": "Specifies the text of the context menu item that clears grouping settings of a specific column."
  },
  "dxDataGridOptions.grouping.texts.ungroupAll": {
    "shortDescription": "Specifies the text of the context menu item that clears grouping settings of all columns."
  },
  "dxDataGridOptions.groupPanel": {
    "shortDescription": "Configures the [group panel](/concepts/05%20UI%20Components/DataGrid/45%20Grouping/10%20User%20Interaction/10%20Group%20Data.md '/Documentation/Guide/UI_Components/DataGrid/Grouping/#User_Interaction/Group_Data')."
  },
  "dxDataGridOptions.groupPanel.allowColumnDragging": {
    "shortDescription": "Specifies whether columns can be dragged onto or from the group panel."
  },
  "dxDataGridOptions.groupPanel.emptyPanelText": {
    "shortDescription": "Specifies text displayed by the group panel when it does not contain any columns."
  },
  "dxDataGridOptions.groupPanel.visible": {
    "shortDescription": "Specifies whether the [group panel](/concepts/05%20UI%20Components/DataGrid/45%20Grouping/10%20User%20Interaction/10%20Group%20Data.md '/Documentation/Guide/UI_Components/DataGrid/Grouping/#User_Interaction/Group_Data') is visible or not."
  },
  "dxDataGridOptions.keyExpr": {
    "shortDescription": "Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique. This property applies only if data is a [simple array](/concepts/70%20Data%20Binding/00%20Specify%20a%20Data%20Source/10%20Local%20Array.md '/Documentation/Guide/Data_Binding/Specify_a_Data_Source/Local_Array/')."
  },
  "dxDataGridOptions.masterDetail": {
    "shortDescription": "Allows you to build a [master-detail interface](/concepts/05%20UI%20Components/DataGrid/60%20Master-Detail%20Interface '/Documentation/Guide/UI_Components/DataGrid/Master-Detail_Interface/') in the grid."
  },
  "dxDataGridOptions.masterDetail.autoExpandAll": {
    "shortDescription": "Specifies whether detail sections appear expanded or collapsed."
  },
  "dxDataGridOptions.masterDetail.enabled": {
    "shortDescription": "Enables an end-user to expand/collapse detail sections."
  },
  "dxDataGridOptions.masterDetail.template": {
    "shortDescription": "Specifies a custom template for detail sections."
  },
  "dxDataGridOptions.onAdaptiveDetailRowPreparing": {
    "shortDescription": "A function that is executed before an adaptive detail row is rendered."
  },
  "dxDataGridOptions.onCellClick": {
    "shortDescription": "A function that is executed when a cell is clicked or tapped. Executed before [onRowClick](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/onRowClick.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#onRowClick')."
  },
  "dxDataGridOptions.onCellDblClick": {
    "shortDescription": "A function that is executed when a cell is double-clicked or double-tapped. Executed before [onRowDblClick](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/onRowDblClick.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#onRowDblClick')."
  },
  "dxDataGridOptions.onCellHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a cell."
  },
  "dxDataGridOptions.onCellPrepared": {
    "shortDescription": "A function that is executed after a grid cell is created."
  },
  "dxDataGridOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxDataGridOptions.onContextMenuPreparing": {
    "shortDescription": "A function that is executed before the context menu is rendered."
  },
  "dxDataGridOptions.onDataErrorOccurred": {
    "shortDescription": "A function that is executed when an error occurs in the data source."
  },
  "dxDataGridOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDataGridOptions.onEditCanceled": {
    "shortDescription": "A function that is executed after row changes are discarded."
  },
  "dxDataGridOptions.onEditCanceling": {
    "shortDescription": "A function that is executed when the edit operation is canceled, but row changes are not yet discarded."
  },
  "dxDataGridOptions.onEditingStart": {
    "shortDescription": "A function that is executed before a cell or row switches to the editing state."
  },
  "dxDataGridOptions.onEditorPrepared": {
    "shortDescription": "A function that is executed after an editor is created. Not executed for cells with an [editCellTemplate](/api-reference/_hidden/dxDataGridColumn/editCellTemplate.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#editCellTemplate')."
  },
  "dxDataGridOptions.onEditorPreparing": {
    "shortDescription": "A function used to customize a cell's [editor](/api-reference/_hidden/GridBaseColumn/editorOptions.md '{basewidgetpath}/Configuration/columns/#editorOptions'). Not executed for cells with an [editCellTemplate](/api-reference/_hidden/dxDataGridColumn/editCellTemplate.md '{basewidgetpath}/Configuration/columns/#editCellTemplate')."
  },
  "dxDataGridOptions.onExporting": {
    "shortDescription": "A function that is executed before data is exported."
  },
  "dxDataGridOptions.onFocusedCellChanged": {
    "shortDescription": "A function that is executed after the focused cell changes. Applies only to cells in data or group rows."
  },
  "dxDataGridOptions.onFocusedCellChanging": {
    "shortDescription": "A function that is executed before the focused cell changes. Applies only to cells in data or group rows."
  },
  "dxDataGridOptions.onFocusedRowChanged": {
    "shortDescription": "A function that is executed after the focused row changes. Applies only to data or group rows. [focusedRowEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowEnabled.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#focusedRowEnabled') should be **true**."
  },
  "dxDataGridOptions.onFocusedRowChanging": {
    "shortDescription": "A function that is executed before the focused row changes. Applies only to data or group rows. [focusedRowEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowEnabled.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#focusedRowEnabled') should be **true**."
  },
  "dxDataGridOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDataGridOptions.onInitNewRow": {
    "shortDescription": "A function that is executed before a new row is added to the UI component."
  },
  "dxDataGridOptions.onKeyDown": {
    "shortDescription": "A function that is executed when the UI component is in focus and a key has been pressed down."
  },
  "dxDataGridOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDataGridOptions.onRowClick": {
    "shortDescription": "A function that is executed when a row is clicked or tapped."
  },
  "dxDataGridOptions.onRowCollapsed": {
    "shortDescription": "A function that is executed after a row is collapsed."
  },
  "dxDataGridOptions.onRowCollapsing": {
    "shortDescription": "A function that is executed before a row is collapsed."
  },
  "dxDataGridOptions.onRowDblClick": {
    "shortDescription": "A function that is executed when a row is double-clicked or double-tapped. Executed after [onCellDblClick](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/onCellDblClick.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#onCellDblClick')."
  },
  "dxDataGridOptions.onRowExpanded": {
    "shortDescription": "A function that is executed after a row is expanded."
  },
  "dxDataGridOptions.onRowExpanding": {
    "shortDescription": "A function that is executed before a row is expanded."
  },
  "dxDataGridOptions.onRowInserted": {
    "shortDescription": "A function that is executed after a new row has been inserted into the data source."
  },
  "dxDataGridOptions.onRowInserting": {
    "shortDescription": "A function that is executed before a new row is inserted into the data source."
  },
  "dxDataGridOptions.onRowPrepared": {
    "shortDescription": "A function that is executed after a row is created."
  },
  "dxDataGridOptions.onRowRemoved": {
    "shortDescription": "A function that is executed after a row has been removed from the data source."
  },
  "dxDataGridOptions.onRowRemoving": {
    "shortDescription": "A function that is executed before a row is removed from the data source."
  },
  "dxDataGridOptions.onRowUpdated": {
    "shortDescription": "A function that is executed after a row has been updated in the data source."
  },
  "dxDataGridOptions.onRowUpdating": {
    "shortDescription": "A function that is executed before a row is updated in the data source."
  },
  "dxDataGridOptions.onRowValidating": {
    "shortDescription": "A function that is executed after cells in a row are validated against [validation rules](/api-reference/_hidden/GridBaseColumn/validationRules.md '{basewidgetpath}/Configuration/columns/#validationRules')."
  },
  "dxDataGridOptions.onSaved": {
    "shortDescription": "A function that is executed after row changes are saved."
  },
  "dxDataGridOptions.onSaving": {
    "shortDescription": "A function that is executed before pending row changes are saved."
  },
  "dxDataGridOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed after selecting a row or clearing its selection."
  },
  "dxDataGridOptions.onToolbarPreparing": {
    "shortDescription": "A function that is executed before the toolbar is created."
  },
  "dxDataGridOptions.remoteOperations": {
    "shortDescription": "Notifies the DataGrid of the server's data processing operations."
  },
  "dxDataGridOptions.remoteOperations.filtering": {
    "shortDescription": "Specifies whether or not [filtering](/concepts/05%20UI%20Components/DataGrid/30%20Filtering%20and%20Searching '/Documentation/Guide/UI_Components/DataGrid/Filtering_and_Searching/') must be performed on the server side."
  },
  "dxDataGridOptions.remoteOperations.grouping": {
    "shortDescription": "Specifies whether or not [grouping](/concepts/05%20UI%20Components/DataGrid/45%20Grouping '/Documentation/Guide/UI_Components/DataGrid/Grouping/') must be performed on the server side."
  },
  "dxDataGridOptions.remoteOperations.groupPaging": {
    "shortDescription": "Specifies whether paging by groups should be performed on the server side."
  },
  "dxDataGridOptions.remoteOperations.paging": {
    "shortDescription": "Specifies whether or not [paging](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/paging '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/paging/') must be performed on the server side."
  },
  "dxDataGridOptions.remoteOperations.sorting": {
    "shortDescription": "Specifies whether or not [sorting](/concepts/05%20UI%20Components/DataGrid/25%20Sorting '/Documentation/Guide/UI_Components/DataGrid/Sorting/') must be performed on the server side."
  },
  "dxDataGridOptions.remoteOperations.summary": {
    "shortDescription": "Specifies whether or not [summaries](/concepts/05%20UI%20Components/DataGrid/65%20Summaries/10%20Total%20Summary '/Documentation/Guide/UI_Components/DataGrid/Summaries/Total_Summary/') summaries are calculated on the server-side."
  },
  "dxDataGridOptions.rowTemplate": {
    "shortDescription": "Specifies a custom template for rows.",
    "depNote": "Use the dataRowTemplate option instead."
  },
  "dxDataGridOptions.scrolling": {
    "shortDescription": "Configures scrolling."
  },
  "dxDataGridOptions.scrolling.mode": {
    "shortDescription": "Specifies the scrolling mode."
  },
  "dxDataGridOptions.selection": {
    "shortDescription": "Configures runtime selection."
  },
  "dxDataGridOptions.selection.deferred": {
    "shortDescription": "Makes selection deferred."
  },
  "dxDataGridOptions.selection.maxFilterLengthInRequest": {
    "shortDescription": ""
  },
  "dxDataGridOptions.selection.selectAllMode": {
    "shortDescription": "Specifies the mode in which all the records are selected. Applies only if **selection**.[allowSelectAll](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/selection/allowSelectAll.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/selection/#allowSelectAll') is **true**."
  },
  "dxDataGridOptions.selection.sensitivity": {
    "shortDescription": "Specifies how to filter selected DataGrid rows based on sensitivity."
  },
  "dxDataGridOptions.selection.showCheckBoxesMode": {
    "shortDescription": "Specifies when to display the selection column and row selection checkboxes. Applies only if **selection**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/selection/mode.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/selection/#mode') is *\"multiple\"*."
  },
  "dxDataGridOptions.selectionFilter": {
    "shortDescription": "Specifies [filters](/concepts/70%20Data%20Binding/5%20Data%20Layer/2%20Reading%20Data/15%20Filtering '/Documentation/Guide/Data_Binding/Data_Layer/#Reading_Data/Filtering') for the rows that must be selected initially. Applies only if **selection**.[deferred](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/selection/deferred.md '{basewidgetpath}/Configuration/selection/#deferred') is **true**."
  },
  "dxDataGridOptions.sortByGroupSummaryInfo": {
    "shortDescription": "Allows you to sort [groups](/concepts/05%20UI%20Components/DataGrid/45%20Grouping '/Documentation/Guide/UI_Components/DataGrid/Grouping/') according to the values of group summary items."
  },
  "dxDataGridOptions.sortByGroupSummaryInfo.groupColumn": {
    "shortDescription": "Specifies the identifier of the column that must be used in [grouping](/concepts/05%20UI%20Components/DataGrid/45%20Grouping '/Documentation/Guide/UI_Components/DataGrid/Grouping/') so that sorting by [group summary item values](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/groupItems '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/groupItems/') be applied."
  },
  "dxDataGridOptions.sortByGroupSummaryInfo.sortOrder": {
    "shortDescription": "Specifies the sort order of group summary item values."
  },
  "dxDataGridOptions.sortByGroupSummaryInfo.summaryItem": {
    "shortDescription": "Specifies the group summary item whose values must be used to sort groups."
  },
  "dxDataGridOptions.summary": {
    "shortDescription": "Specifies the properties of the grid summary."
  },
  "dxDataGridOptions.summary.calculateCustomSummary": {
    "shortDescription": "Specifies a custom aggregate function. This function is called for summary items whose [summaryType](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/totalItems/summaryType.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/totalItems/#summaryType') is *\"custom\"*."
  },
  "dxDataGridOptions.summary.groupItems": {
    "shortDescription": "Specifies items of the group summary."
  },
  "dxDataGridOptions.summary.groupItems.alignByColumn": {
    "shortDescription": "Indicates whether to display group summary items in parentheses after the group row header or to align them by the corresponding columns within the group row."
  },
  "dxDataGridOptions.summary.groupItems.column": {
    "shortDescription": "Specifies the column that provides data for a group summary item."
  },
  "dxDataGridOptions.summary.groupItems.customizeText": {
    "shortDescription": "Customizes the text to be displayed in the summary item."
  },
  "dxDataGridOptions.summary.groupItems.displayFormat": {
    "shortDescription": "Specifies the summary item's text."
  },
  "dxDataGridOptions.summary.groupItems.name": {
    "shortDescription": "Specifies the group summary item's identifier."
  },
  "dxDataGridOptions.summary.groupItems.showInColumn": {
    "shortDescription": "Specifies the column that must hold the summary item when this item is [displayed in the group footer](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/groupItems/showInGroupFooter.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/groupItems/#showInGroupFooter') or [aligned by a column in the group row](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/groupItems/alignByColumn.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/groupItems/#alignByColumn')."
  },
  "dxDataGridOptions.summary.groupItems.showInGroupFooter": {
    "shortDescription": "Specifies whether or not a summary item must be displayed in the group footer."
  },
  "dxDataGridOptions.summary.groupItems.skipEmptyValues": {
    "shortDescription": "Specifies whether to skip *empty strings*, **null**, and **undefined** values when calculating a summary. Does not apply when you use a remote data source."
  },
  "dxDataGridOptions.summary.groupItems.summaryType": {
    "shortDescription": "Specifies how to aggregate data for the group summary item."
  },
  "dxDataGridOptions.summary.groupItems.valueFormat": {
    "shortDescription": "Specifies a summary item value's display format."
  },
  "dxDataGridOptions.summary.recalculateWhileEditing": {
    "shortDescription": "Specifies whether to recalculate summaries while a user edits data."
  },
  "dxDataGridOptions.summary.skipEmptyValues": {
    "shortDescription": "Specifies whether to skip *empty strings*, **null** and **undefined** values when calculating a summary. Does not apply when you use a remote data source."
  },
  "dxDataGridOptions.summary.texts": {
    "shortDescription": "Contains properties that specify text patterns for summary items."
  },
  "dxDataGridOptions.summary.texts.avg": {
    "shortDescription": "Specifies a pattern for the *\"avg\"* summary items when they are displayed in the parent column."
  },
  "dxDataGridOptions.summary.texts.avgOtherColumn": {
    "shortDescription": "Specifies a pattern for the *\"avg\"* summary items displayed in a group row or in any other column rather than the parent one."
  },
  "dxDataGridOptions.summary.texts.count": {
    "shortDescription": "Specifies a pattern for the *\"count\"* summary items."
  },
  "dxDataGridOptions.summary.texts.max": {
    "shortDescription": "Specifies a pattern for the *\"max\"* summary items when they are displayed in the parent column."
  },
  "dxDataGridOptions.summary.texts.maxOtherColumn": {
    "shortDescription": "Specifies a pattern for the *\"max\"* summary items displayed in a group row or in any other column rather than the parent one."
  },
  "dxDataGridOptions.summary.texts.min": {
    "shortDescription": "Specifies a pattern for the *\"min\"* summary items when they are displayed in the parent column."
  },
  "dxDataGridOptions.summary.texts.minOtherColumn": {
    "shortDescription": "Specifies a pattern for the *\"min\"* summary items displayed in a group row or in any other column rather than the parent one."
  },
  "dxDataGridOptions.summary.texts.sum": {
    "shortDescription": "Specifies a pattern for the *\"sum\"* summary items when they are displayed in the parent column."
  },
  "dxDataGridOptions.summary.texts.sumOtherColumn": {
    "shortDescription": "Specifies a pattern for the *\"sum\"* summary items displayed in a group row or in any other column rather than the parent one."
  },
  "dxDataGridOptions.summary.totalItems": {
    "shortDescription": "Specifies items of the total summary."
  },
  "dxDataGridOptions.summary.totalItems.alignment": {
    "shortDescription": "Specifies the alignment of a summary item."
  },
  "dxDataGridOptions.summary.totalItems.column": {
    "shortDescription": "Specifies the column that provides data for a summary item."
  },
  "dxDataGridOptions.summary.totalItems.cssClass": {
    "shortDescription": "Specifies a CSS class to be applied to a summary item."
  },
  "dxDataGridOptions.summary.totalItems.customizeText": {
    "shortDescription": "Customizes the text to be displayed in the summary item."
  },
  "dxDataGridOptions.summary.totalItems.displayFormat": {
    "shortDescription": "Specifies the summary item's text."
  },
  "dxDataGridOptions.summary.totalItems.name": {
    "shortDescription": "Specifies the total summary item's identifier."
  },
  "dxDataGridOptions.summary.totalItems.showInColumn": {
    "shortDescription": "Specifies the column that must hold the summary item."
  },
  "dxDataGridOptions.summary.totalItems.skipEmptyValues": {
    "shortDescription": "<!-- %shortDescription% -->"
  },
  "dxDataGridOptions.summary.totalItems.summaryType": {
    "shortDescription": "Specifies how to aggregate data for the total summary item."
  },
  "dxDataGridOptions.summary.totalItems.valueFormat": {
    "shortDescription": "Specifies a summary item value's display format."
  },
  "dxDataGridOptions.toolbar": {
    "shortDescription": "Configures the toolbar."
  },
  "dxDataGridRowObject": {
    "shortDescription": "A grid row."
  },
  "dxDataGridRowObject.data": {
    "shortDescription": "The [data object](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/dataSource.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#dataSource') represented by the row."
  },
  "dxDataGridRowObject.groupIndex": {
    "shortDescription": "The [group index](/concepts/05%20UI%20Components/DataGrid/45%20Grouping/20%20API/05%20Group%20Index%20and%20Key.md '/Documentation/Guide/UI_Components/DataGrid/Grouping/#API/Group_Index_and_Key') of the row. Available when the [rowType](/api-reference/10%20UI%20Components/dxDataGrid/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Row/#rowType') is *\"group\"*."
  },
  "dxDataGridRowObject.isEditing": {
    "shortDescription": "Indicates whether the row is in the editing state."
  },
  "dxDataGridRowObject.isExpanded": {
    "shortDescription": "Indicates whether the row is expanded or collapsed. Available if [rowType](/api-reference/10%20UI%20Components/dxDataGrid/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Row/#rowType') is *\"data\"* or *\"group\"*."
  },
  "dxDataGridRowObject.isNewRow": {
    "shortDescription": "Indicates that the row is added, but not yet saved. Available if [rowType](/api-reference/10%20UI%20Components/dxDataGrid/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Row/#rowType') is *\"data\"*."
  },
  "dxDataGridRowObject.isSelected": {
    "shortDescription": "Indicates whether the row is [selected](/concepts/05%20UI%20Components/DataGrid/50%20Selection '/Documentation/Guide/UI_Components/DataGrid/Selection/'). Available if [rowType](/api-reference/10%20UI%20Components/dxDataGrid/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Row/#rowType') is *\"data\"*."
  },
  "dxDataGridRowObject.key": {
    "shortDescription": "The key of the data object represented by the row."
  },
  "dxDataGridRowObject.rowIndex": {
    "shortDescription": "The *visible* index of the row."
  },
  "dxDataGridRowObject.rowType": {
    "shortDescription": "The row's type."
  },
  "dxDataGridRowObject.values": {
    "shortDescription": "Values of the row as they exist in the data source."
  },
  "dxDataGridScrolling": {
    "shortDescription": "Configures scrolling."
  },
  "dxDataGridSortByGroupSummaryInfoItem": {
    "shortDescription": "Allows you to sort [groups](/concepts/05%20UI%20Components/DataGrid/45%20Grouping '/Documentation/Guide/UI_Components/DataGrid/Grouping/') according to the values of group summary items."
  },
  "dxDataGridToolbar": {
    "shortDescription": "Configures the toolbar."
  },
  "dxDataGridToolbar.disabled": {
    "shortDescription": "Specifies whether the toolbar responds to user interaction."
  },
  "dxDataGridToolbar.items": {
    "shortDescription": "Configures toolbar items."
  },
  "dxDataGridToolbar.visible": {
    "shortDescription": "Specifies whether the toolbar is visible."
  },
  "dxDataGridToolbarItem": {
    "shortDescription": "Configures toolbar items."
  },
  "dxDataGridToolbarItem.location": {
    "shortDescription": "Specifies a location for the item on the toolbar."
  },
  "dxDataGridToolbarItem.name": {
    "shortDescription": "A name used to identify the toolbar item."
  },
  "dxDateBox": {
    "shortDescription": "The DateBox is a UI component that displays date and time in a specified format, and enables a user to pick or type in the required date/time value."
  },
  "dxDateBox.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxDateBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxDateBoxOptions.adaptivityEnabled": {
    "shortDescription": "Specifies whether or not adaptive UI component rendering is enabled on a small screen."
  },
  "dxDateBoxOptions.dateOutOfRangeMessage": {
    "shortDescription": "Specifies the message displayed if the specified date is later than the [max](/api-reference/10%20UI%20Components/dxDateBox/1%20Configuration/max.md '{basewidgetpath}/Configuration/#max') value or earlier than the [min](/api-reference/10%20UI%20Components/dxDateBox/1%20Configuration/min.md '{basewidgetpath}/Configuration/#min') value."
  },
  "dxDateBoxOptions.disabledDates": {
    "shortDescription": "Specifies dates that users cannot select. Applies only if [pickerType](/api-reference/10%20UI%20Components/dxDateBox/1%20Configuration/pickerType.md '/Documentation/ApiReference/UI_Components/dxDateBox/Configuration/#pickerType') is *\"calendar\"*."
  },
  "dxDateBoxOptions.inputAttr": {
    "shortDescription": "Specifies the attributes to be passed on to the underlying HTML element."
  },
  "dxDateBoxOptions.interval": {
    "shortDescription": "Specifies the interval between neighboring values in the popup list in minutes."
  },
  "dxDateBoxOptions.invalidDateMessage": {
    "shortDescription": "Specifies the message displayed if the typed value is not a valid date or time."
  },
  "dxDateBoxOptions.label": {
    "shortDescription": "Specifies a text string used to annotate the editor's [value](/api-reference/10%20UI%20Components/dxDateBox/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxDateBox/Configuration/#value')."
  },
  "dxDateBoxOptions.maxLength": {
    "shortDescription": "Specifies the maximum number of characters you can enter into the textbox."
  },
  "dxDateBoxOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxDateBoxOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxDateBoxOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxDateBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxDateBoxOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxDateBoxOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxDateBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDateBoxOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxDateBoxOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxDateBoxOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxDateBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDateBoxOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxDateBoxOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxDateBoxOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxDateBoxOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxDateBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDateBoxOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxDateBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxDateBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxDateBoxOptions.pickerType": {
    "shortDescription": "Specifies the type of the date/time picker."
  },
  "dxDateBoxOptions.placeholder": {
    "shortDescription": "Specifies a placeholder for the input field."
  },
  "dxDateBoxOptions.showAnalogClock": {
    "shortDescription": "Specifies whether to show the analog clock in the value picker. Applies only if [type](/api-reference/10%20UI%20Components/dxDateBox/1%20Configuration/type.md '/Documentation/ApiReference/UI_Components/dxDateBox/Configuration/#type') is *\"datetime\"* and [pickerType](/api-reference/10%20UI%20Components/dxDateBox/1%20Configuration/pickerType.md '/Documentation/ApiReference/UI_Components/dxDateBox/Configuration/#pickerType') is *\"calendar\"*."
  },
  "dxDateBoxOptions.text": {
    "shortDescription": "The read-only property that stores the text displayed by the UI component **input** element."
  },
  "dxDateBoxOptions.type": {
    "shortDescription": "A format used to display date/time information."
  },
  "dxDateBoxOptions.value": {
    "shortDescription": "Specifies the currently selected date and time."
  },
  "dxDateRangeBox": {
    "shortDescription": "DateRangeBox is a UI component that allows a user to select a date range (pick or enter start and end dates)."
  },
  "dxDateRangeBox.endDateField()": {
    "shortDescription": "Gets the `<input>` element of the UI component's end date field."
  },
  "dxDateRangeBox.field()": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDateRangeBox.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxDateRangeBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxDateRangeBox.startDateField()": {
    "shortDescription": "Gets the `<input>` element of the UI component's start date field."
  },
  "dxDateRangeBoxOptions.disableOutOfRangeSelection": {
    "shortDescription": "Specifies whether the UI component disables date selection before the start date and after the end date."
  },
  "dxDateRangeBoxOptions.endDate": {
    "shortDescription": "Specifies the range's end date."
  },
  "dxDateRangeBoxOptions.endDateInputAttr": {
    "shortDescription": "Specifies the attributes passed to the end date input field."
  },
  "dxDateRangeBoxOptions.endDateLabel": {
    "shortDescription": "Specifies the label of the end date input field."
  },
  "dxDateRangeBoxOptions.endDateName": {
    "shortDescription": "Specifies the **name** attribute of the end date input field."
  },
  "dxDateRangeBoxOptions.endDateOutOfRangeMessage": {
    "shortDescription": "Specifies the message displayed if the specified end date is later than the [max](/api-reference/10%20UI%20Components/DateBoxBase/1%20Configuration/max.md '{basewidgetpath}/Configuration/#max') value or earlier than the [min](/api-reference/10%20UI%20Components/DateBoxBase/1%20Configuration/min.md '{basewidgetpath}/Configuration/#min') value."
  },
  "dxDateRangeBoxOptions.endDatePlaceholder": {
    "shortDescription": "Specifies a placeholder for the end date input field."
  },
  "dxDateRangeBoxOptions.endDateText": {
    "shortDescription": "Returns the text displayed by the end date input field."
  },
  "dxDateRangeBoxOptions.inputAttr": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDateRangeBoxOptions.invalidEndDateMessage": {
    "shortDescription": "Specifies a message for invalid end date input."
  },
  "dxDateRangeBoxOptions.invalidStartDateMessage": {
    "shortDescription": "Specifies a message for invalid start date input."
  },
  "dxDateRangeBoxOptions.label": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDateRangeBoxOptions.maxLength": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDateRangeBoxOptions.multiView": {
    "shortDescription": "Specifies whether the UI component displays a single-month calendar or a multi-month calendar."
  },
  "dxDateRangeBoxOptions.name": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDateRangeBoxOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxDateRangeBoxOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxDateRangeBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxDateRangeBoxOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxDateRangeBoxOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxDateRangeBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDateRangeBoxOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxDateRangeBoxOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxDateRangeBoxOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxDateRangeBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDateRangeBoxOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxDateRangeBoxOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxDateRangeBoxOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxDateRangeBoxOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxDateRangeBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDateRangeBoxOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxDateRangeBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxDateRangeBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxDateRangeBoxOptions.openOnFieldClick": {
    "shortDescription": "Specifies whether a user can open the popup calendar by clicking an input field."
  },
  "dxDateRangeBoxOptions.placeholder": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDateRangeBoxOptions.startDate": {
    "shortDescription": "Specifies the start date of date range."
  },
  "dxDateRangeBoxOptions.startDateInputAttr": {
    "shortDescription": "Specifies the attributes passed to the start date input field."
  },
  "dxDateRangeBoxOptions.startDateLabel": {
    "shortDescription": "Specifies a label of the start date input field."
  },
  "dxDateRangeBoxOptions.startDateName": {
    "shortDescription": "Specifies the **name** attribute of the start date input field."
  },
  "dxDateRangeBoxOptions.startDateOutOfRangeMessage": {
    "shortDescription": "Specifies the message displayed if the specified start date is later than the [max](/api-reference/10%20UI%20Components/DateBoxBase/1%20Configuration/max.md '{basewidgetpath}/Configuration/#max') value or earlier than the [min](/api-reference/10%20UI%20Components/DateBoxBase/1%20Configuration/min.md '{basewidgetpath}/Configuration/#min') value."
  },
  "dxDateRangeBoxOptions.startDatePlaceholder": {
    "shortDescription": "Specifies a placeholder for the start date input field."
  },
  "dxDateRangeBoxOptions.startDateText": {
    "shortDescription": "Returns the text displayed by the start date input field."
  },
  "dxDateRangeBoxOptions.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDateRangeBoxOptions.value": {
    "shortDescription": "An array that specifies the selected range (start and end dates)."
  },
  "dxDeferRendering": {
    "shortDescription": "The DeferRendering is a UI component that waits for its content to be ready before rendering it. While the content is getting ready, the DeferRendering displays a loading indicator."
  },
  "dxDeferRendering.rendered": {
    "shortDescription": "Raised when the content is rendered but not yet displayed."
  },
  "dxDeferRendering.shown": {
    "shortDescription": "Raised when the content is displayed and animation is completed."
  },
  "dxDeferRenderingOptions.animation": {
    "shortDescription": "Specifies the animation to be used to show the rendered content."
  },
  "dxDeferRenderingOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxDeferRenderingOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDeferRenderingOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDeferRenderingOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDeferRenderingOptions.onRendered": {
    "shortDescription": "A function that is executed when the content is rendered but not yet displayed."
  },
  "dxDeferRenderingOptions.onShown": {
    "shortDescription": "A function that is executed when the content is displayed and animation is completed."
  },
  "dxDeferRenderingOptions.renderWhen": {
    "shortDescription": "Specifies when the UI component content is rendered."
  },
  "dxDeferRenderingOptions.showLoadIndicator": {
    "shortDescription": "Indicates if a load indicator should be shown until the UI component's content is rendered."
  },
  "dxDeferRenderingOptions.staggerItemSelector": {
    "shortDescription": "Specifies a jQuery selector of items that should be rendered using a staggered animation."
  },
  "dxDiagram": {
    "shortDescription": "The Diagram UI component provides a visual interface to help you design new and modify existing diagrams."
  },
  "dxDiagram.customCommand": {
    "shortDescription": "Raised after a custom command item was clicked and allows you to implement custom command logic."
  },
  "dxDiagram.export()": {
    "shortDescription": "Exports the diagram data to a JSON object."
  },
  "dxDiagram.exportTo(format, callback)": {
    "shortDescription": "Exports the diagram to an image format."
  },
  "dxDiagram.fitToContent()": {
    "shortDescription": "Fits the diagram content into the work area. The maximum scale is 100%."
  },
  "dxDiagram.fitToWidth()": {
    "shortDescription": "Fits the diagram content's width into the work area width. The maximum scale is 100%."
  },
  "dxDiagram.getEdgeDataSource()": {
    "shortDescription": "Returns the [DataSource](/api-reference/30%20Data%20Layer/DataSource '/Documentation/ApiReference/Data_Layer/DataSource/') instance."
  },
  "dxDiagram.getItemById(id)": {
    "shortDescription": "Returns a [shape](/api-reference/10%20UI%20Components/dxDiagram/7%20Interfaces/dxDiagramShape '/Documentation/ApiReference/UI_Components/dxDiagram/Interfaces/dxDiagramShape/') or [connector](/api-reference/10%20UI%20Components/dxDiagram/7%20Interfaces/dxDiagramConnector '/Documentation/ApiReference/UI_Components/dxDiagram/Interfaces/dxDiagramConnector/') object specified by its internal identifier."
  },
  "dxDiagram.getItemByKey(key)": {
    "shortDescription": "Returns a [shape](/api-reference/10%20UI%20Components/dxDiagram/7%20Interfaces/dxDiagramShape '/Documentation/ApiReference/UI_Components/dxDiagram/Interfaces/dxDiagramShape/') or [connector](/api-reference/10%20UI%20Components/dxDiagram/7%20Interfaces/dxDiagramConnector '/Documentation/ApiReference/UI_Components/dxDiagram/Interfaces/dxDiagramConnector/') object specified by its key."
  },
  "dxDiagram.getItems()": {
    "shortDescription": "Returns an array of diagram items."
  },
  "dxDiagram.getNodeDataSource()": {
    "shortDescription": "Gets the [DataSource](/api-reference/30%20Data%20Layer/DataSource '/Documentation/ApiReference/Data_Layer/DataSource/') instance."
  },
  "dxDiagram.getSelectedItems()": {
    "shortDescription": "Returns an array of selected diagram items."
  },
  "dxDiagram.import(data, updateExistingItemsOnly)": {
    "shortDescription": "Imports the diagram data."
  },
  "dxDiagram.itemClick": {
    "shortDescription": "Raised after a shape or connector is clicked."
  },
  "dxDiagram.itemDblClick": {
    "shortDescription": "Raised after a shape or connector is double-clicked."
  },
  "dxDiagram.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxDiagram.requestEditOperation": {
    "shortDescription": "Raised before a user edits a diagram and before the UI related to an edit operation is updated. Requests clarification about edit operation availability."
  },
  "dxDiagram.requestLayoutUpdate": {
    "shortDescription": "Raised after diagram data has been changed."
  },
  "dxDiagram.scrollToItem(item)": {
    "shortDescription": "Scrolls the view area to the specified item."
  },
  "dxDiagram.selectionChanged": {
    "shortDescription": "Raised after the selection is changed in the Diagram."
  },
  "dxDiagram.setSelectedItems(items)": {
    "shortDescription": "Selects the specified items."
  },
  "dxDiagram.updateToolbox()": {
    "shortDescription": "Updates the diagram toolboxes."
  },
  "dxDiagramAddShapeArgs": {
    "shortDescription": "Contains information about the processed shape."
  },
  "dxDiagramAddShapeArgs.position": {
    "shortDescription": "A position where the shape is being added."
  },
  "dxDiagramAddShapeArgs.position.x": {
    "shortDescription": "A horizontal position where the shape is being added."
  },
  "dxDiagramAddShapeArgs.position.y": {
    "shortDescription": "A vertical position where the shape is being added."
  },
  "dxDiagramAddShapeArgs.shape": {
    "shortDescription": "The processed shape."
  },
  "dxDiagramAddShapeFromToolboxArgs": {
    "shortDescription": "Contains information about the processed shape."
  },
  "dxDiagramAddShapeFromToolboxArgs.shapeType": {
    "shortDescription": "The type of the processed shape."
  },
  "dxDiagramBeforeChangeConnectorTextArgs": {
    "shortDescription": "Contains information about the processed connector."
  },
  "dxDiagramBeforeChangeConnectorTextArgs.connector": {
    "shortDescription": "The processed connector."
  },
  "dxDiagramBeforeChangeConnectorTextArgs.index": {
    "shortDescription": "The index of the processed text in the connector's [texts](/api-reference/10%20UI%20Components/dxDiagram/7%20Interfaces/dxDiagramConnector/texts.md '/Documentation/ApiReference/UI_Components/dxDiagram/Interfaces/dxDiagramConnector/#texts') collection."
  },
  "dxDiagramBeforeChangeShapeTextArgs": {
    "shortDescription": "Contains information about the processed shape."
  },
  "dxDiagramBeforeChangeShapeTextArgs.shape": {
    "shortDescription": "The processed shape."
  },
  "dxDiagramChangeConnectionArgs": {
    "shortDescription": "Contains information about the processed connection."
  },
  "dxDiagramChangeConnectionArgs.connectionPointIndex": {
    "shortDescription": "The index of the processed point in the shape's connection point collection."
  },
  "dxDiagramChangeConnectionArgs.connector": {
    "shortDescription": "The processed connector."
  },
  "dxDiagramChangeConnectionArgs.connectorPosition": {
    "shortDescription": "The position of the connector in the processed point."
  },
  "dxDiagramChangeConnectionArgs.newShape": {
    "shortDescription": "The new connected shape."
  },
  "dxDiagramChangeConnectionArgs.oldShape": {
    "shortDescription": "The previous connected shape."
  },
  "dxDiagramChangeConnectorPointsArgs": {
    "shortDescription": "Contains information about the processed connector."
  },
  "dxDiagramChangeConnectorPointsArgs.connector": {
    "shortDescription": "The processed connector."
  },
  "dxDiagramChangeConnectorPointsArgs.newPoints": {
    "shortDescription": "The array of new connection points."
  },
  "dxDiagramChangeConnectorPointsArgs.newPoints.x": {
    "shortDescription": "A horizontal position of the point."
  },
  "dxDiagramChangeConnectorPointsArgs.newPoints.y": {
    "shortDescription": "A vertical position of the point."
  },
  "dxDiagramChangeConnectorPointsArgs.oldPoints": {
    "shortDescription": "The array of previous connection points."
  },
  "dxDiagramChangeConnectorPointsArgs.oldPoints.x": {
    "shortDescription": "A horizontal position of the point."
  },
  "dxDiagramChangeConnectorPointsArgs.oldPoints.y": {
    "shortDescription": "A vertical position of the point."
  },
  "dxDiagramChangeConnectorTextArgs": {
    "shortDescription": "Contains information about the processed connector."
  },
  "dxDiagramChangeConnectorTextArgs.connector": {
    "shortDescription": "The processed connector."
  },
  "dxDiagramChangeConnectorTextArgs.index": {
    "shortDescription": "The index of the processed text in the connector's [texts](/api-reference/10%20UI%20Components/dxDiagram/7%20Interfaces/dxDiagramConnector/texts.md '/Documentation/ApiReference/UI_Components/dxDiagram/Interfaces/dxDiagramConnector/#texts') collection."
  },
  "dxDiagramChangeConnectorTextArgs.text": {
    "shortDescription": "The new connector text."
  },
  "dxDiagramChangeShapeTextArgs": {
    "shortDescription": "Contains information about the processed shape."
  },
  "dxDiagramChangeShapeTextArgs.shape": {
    "shortDescription": "The processed shape."
  },
  "dxDiagramChangeShapeTextArgs.text": {
    "shortDescription": "The new shape text."
  },
  "dxDiagramConnector": {
    "shortDescription": "An object that provides information about a connector in the [Diagram](/api-reference/10%20UI%20Components/dxDiagram '/Documentation/ApiReference/UI_Components/dxDiagram/') UI component."
  },
  "dxDiagramConnector.fromId": {
    "shortDescription": "Gets the connector's start node identifier."
  },
  "dxDiagramConnector.fromKey": {
    "shortDescription": "Specifies the connector's start node key."
  },
  "dxDiagramConnector.fromPointIndex": {
    "shortDescription": "The index of a shape connection point where the connector starts."
  },
  "dxDiagramConnector.points": {
    "shortDescription": "Gets the connector's key points."
  },
  "dxDiagramConnector.points.x": {
    "shortDescription": "A horizontal position of the point."
  },
  "dxDiagramConnector.points.y": {
    "shortDescription": "A vertical position of the point."
  },
  "dxDiagramConnector.texts": {
    "shortDescription": "Specifies the connector's text."
  },
  "dxDiagramConnector.toId": {
    "shortDescription": "Gets the connector's end node identifier."
  },
  "dxDiagramConnector.toKey": {
    "shortDescription": "Specifies the connector's end node key."
  },
  "dxDiagramConnector.toPointIndex": {
    "shortDescription": "The index of the shape connection point where the connector ends."
  },
  "dxDiagramDeleteConnectorArgs": {
    "shortDescription": "Contains information about the processed connector."
  },
  "dxDiagramDeleteConnectorArgs.connector": {
    "shortDescription": "The processed connector."
  },
  "dxDiagramDeleteShapeArgs": {
    "shortDescription": "Contains information about the processed shape."
  },
  "dxDiagramDeleteShapeArgs.shape": {
    "shortDescription": "The processed shape."
  },
  "dxDiagramItem": {
    "shortDescription": "An object that provides information about an item (shape or connector) in the [Diagram](/api-reference/10%20UI%20Components/dxDiagram '/Documentation/ApiReference/UI_Components/dxDiagram/') UI component."
  },
  "dxDiagramItem.dataItem": {
    "shortDescription": "Returns the data item that is bound to the diagram item."
  },
  "dxDiagramItem.id": {
    "shortDescription": "Specifies the item's internal identifier."
  },
  "dxDiagramItem.itemType": {
    "shortDescription": "Returns the type of the item."
  },
  "dxDiagramItem.key": {
    "shortDescription": "Gets the item's key from a data source."
  },
  "dxDiagramMoveShapeArgs": {
    "shortDescription": "Contains information about the processed shape."
  },
  "dxDiagramMoveShapeArgs.newPosition": {
    "shortDescription": "The new shape position."
  },
  "dxDiagramMoveShapeArgs.newPosition.x": {
    "shortDescription": "The new horizontal shape position specified in [units](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/units.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/#units')."
  },
  "dxDiagramMoveShapeArgs.newPosition.y": {
    "shortDescription": "The new vertical shape position specified in [units](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/units.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/#units')."
  },
  "dxDiagramMoveShapeArgs.oldPosition": {
    "shortDescription": "The previous shape position."
  },
  "dxDiagramMoveShapeArgs.oldPosition.x": {
    "shortDescription": "The previous horizontal shape position specified in [units](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/units.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/#units')."
  },
  "dxDiagramMoveShapeArgs.oldPosition.y": {
    "shortDescription": "The previous vertical shape position specified in [units](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/units.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/#units')."
  },
  "dxDiagramMoveShapeArgs.shape": {
    "shortDescription": "The processed shape."
  },
  "dxDiagramOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxDiagramOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxDiagramOptions.autoZoomMode": {
    "shortDescription": "Specifies how the Diagram UI component automatically zooms the work area."
  },
  "dxDiagramOptions.contextMenu": {
    "shortDescription": "Configures the context menu's settings."
  },
  "dxDiagramOptions.contextMenu.commands": {
    "shortDescription": "Lists commands in the context menu."
  },
  "dxDiagramOptions.contextMenu.enabled": {
    "shortDescription": "Specifies whether the context menu is enabled."
  },
  "dxDiagramOptions.contextToolbox": {
    "shortDescription": "Configures the context toolbox's settings."
  },
  "dxDiagramOptions.contextToolbox.category": {
    "shortDescription": "Specifies the category of shapes that are displayed in the context toolbox."
  },
  "dxDiagramOptions.contextToolbox.displayMode": {
    "shortDescription": "Specifies how shapes are displayed in the context toolbox."
  },
  "dxDiagramOptions.contextToolbox.enabled": {
    "shortDescription": "Specifies the context toolbox's availability."
  },
  "dxDiagramOptions.contextToolbox.shapeIconsPerRow": {
    "shortDescription": "Specifies the number of shape icons in a row."
  },
  "dxDiagramOptions.contextToolbox.shapes": {
    "shortDescription": "Lists the shapes that are displayed in the context toolbox. The built-in shape types are shown in the [Shape Types](/concepts/05%20UI%20Components/Diagram/40%20Shape%20Types.md '/Documentation/Guide/UI_Components/Diagram/Shape_Types/') section."
  },
  "dxDiagramOptions.contextToolbox.width": {
    "shortDescription": "Specifies the context toolbox's width in pixels."
  },
  "dxDiagramOptions.customShapes": {
    "shortDescription": "Provide access to an array of custom shapes."
  },
  "dxDiagramOptions.customShapes.allowEditImage": {
    "shortDescription": "Specifies whether a card shape's image can be edited."
  },
  "dxDiagramOptions.customShapes.allowEditText": {
    "shortDescription": "Specifies whether the shape's text can be edited."
  },
  "dxDiagramOptions.customShapes.allowResize": {
    "shortDescription": "Specifies whether the shape can be resized."
  },
  "dxDiagramOptions.customShapes.backgroundImageHeight": {
    "shortDescription": "Specifies the shape background image's fractional height."
  },
  "dxDiagramOptions.customShapes.backgroundImageLeft": {
    "shortDescription": "Specifies the shape background image's left offset."
  },
  "dxDiagramOptions.customShapes.backgroundImageToolboxUrl": {
    "shortDescription": "Specifies the shape image displayed in the toolbox."
  },
  "dxDiagramOptions.customShapes.backgroundImageTop": {
    "shortDescription": "Specifies the shape background image's top offset."
  },
  "dxDiagramOptions.customShapes.backgroundImageUrl": {
    "shortDescription": "Specifies the shape background image's URL."
  },
  "dxDiagramOptions.customShapes.backgroundImageWidth": {
    "shortDescription": "Specifies the shape background image's fractional width."
  },
  "dxDiagramOptions.customShapes.baseType": {
    "shortDescription": "Specifies the base shape type for the custom shape. The built-in shape types are shown in the [Shape Types](/concepts/05%20UI%20Components/Diagram/40%20Shape%20Types.md '/Documentation/Guide/UI_Components/Diagram/Shape_Types/') section."
  },
  "dxDiagramOptions.customShapes.category": {
    "shortDescription": "Specifies a category to which the custom shape belongs."
  },
  "dxDiagramOptions.customShapes.connectionPoints": {
    "shortDescription": "An array of the shape's connection points."
  },
  "dxDiagramOptions.customShapes.connectionPoints.x": {
    "shortDescription": "Specifies the horizontal offset."
  },
  "dxDiagramOptions.customShapes.connectionPoints.y": {
    "shortDescription": "Specifies the vertical offset."
  },
  "dxDiagramOptions.customShapes.defaultHeight": {
    "shortDescription": "Specifies the initial height of the shape."
  },
  "dxDiagramOptions.customShapes.defaultImageUrl": {
    "shortDescription": "Specifies the URL of an image displayed in a card shape."
  },
  "dxDiagramOptions.customShapes.defaultText": {
    "shortDescription": "Specifies the initial text of the shape."
  },
  "dxDiagramOptions.customShapes.defaultWidth": {
    "shortDescription": "Specifies the initial width of the shape."
  },
  "dxDiagramOptions.customShapes.imageHeight": {
    "shortDescription": "Specifies the shape image's fractional height."
  },
  "dxDiagramOptions.customShapes.imageLeft": {
    "shortDescription": "Specifies the shape image's left offset."
  },
  "dxDiagramOptions.customShapes.imageTop": {
    "shortDescription": "Specifies the shape image's top offset."
  },
  "dxDiagramOptions.customShapes.imageWidth": {
    "shortDescription": "Specifies the shape image's fractional width."
  },
  "dxDiagramOptions.customShapes.keepRatioOnAutoSize": {
    "shortDescription": "Specifies whether the shape maintains its width-to-height ratio on [auto resize](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/nodes/autoSizeEnabled.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/nodes/#autoSizeEnabled')."
  },
  "dxDiagramOptions.customShapes.maxHeight": {
    "shortDescription": "Specifies the maximum height of the shape."
  },
  "dxDiagramOptions.customShapes.maxWidth": {
    "shortDescription": "Specifies the maximum width of the shape."
  },
  "dxDiagramOptions.customShapes.minHeight": {
    "shortDescription": "Specifies the maximum height of the shape."
  },
  "dxDiagramOptions.customShapes.minWidth": {
    "shortDescription": "Specifies the minimum width of the shape."
  },
  "dxDiagramOptions.customShapes.template": {
    "shortDescription": "Specifies a custom template for the shape."
  },
  "dxDiagramOptions.customShapes.templateHeight": {
    "shortDescription": "Specifies the shape template's fractional height."
  },
  "dxDiagramOptions.customShapes.templateLeft": {
    "shortDescription": "Specifies the shape template's left offset."
  },
  "dxDiagramOptions.customShapes.templateTop": {
    "shortDescription": "Specifies the shape template's top offset."
  },
  "dxDiagramOptions.customShapes.templateWidth": {
    "shortDescription": "Specifies the shape template's fractional width."
  },
  "dxDiagramOptions.customShapes.textHeight": {
    "shortDescription": "Specifies the shape text container's height."
  },
  "dxDiagramOptions.customShapes.textLeft": {
    "shortDescription": "Specifies the shape text's left offset."
  },
  "dxDiagramOptions.customShapes.textTop": {
    "shortDescription": "Specifies the shape text's top offset."
  },
  "dxDiagramOptions.customShapes.textWidth": {
    "shortDescription": "Specifies the shape text container's width."
  },
  "dxDiagramOptions.customShapes.title": {
    "shortDescription": "Specifies the shape's tooltip in the toolbox panel."
  },
  "dxDiagramOptions.customShapes.toolboxTemplate": {
    "shortDescription": "Specifies a custom template for the shape in the toolbox."
  },
  "dxDiagramOptions.customShapes.toolboxWidthToHeightRatio": {
    "shortDescription": "Specifies the aspect ratio of the shape in the toolbox."
  },
  "dxDiagramOptions.customShapes.type": {
    "shortDescription": "Specifies the custom shape's identifier."
  },
  "dxDiagramOptions.customShapeTemplate": {
    "shortDescription": "Specifies a custom template for shapes."
  },
  "dxDiagramOptions.customShapeToolboxTemplate": {
    "shortDescription": "Specifies a custom template for shapes in the toolbox."
  },
  "dxDiagramOptions.defaultItemProperties": {
    "shortDescription": "Configures default item properties."
  },
  "dxDiagramOptions.defaultItemProperties.connectorLineEnd": {
    "shortDescription": "Specifies the default tip of a connector's end point."
  },
  "dxDiagramOptions.defaultItemProperties.connectorLineStart": {
    "shortDescription": "Specifies the default tip of a connector's start point."
  },
  "dxDiagramOptions.defaultItemProperties.connectorLineType": {
    "shortDescription": "Specifies the default type of a connector."
  },
  "dxDiagramOptions.defaultItemProperties.shapeMaxHeight": {
    "shortDescription": "Specifies the default maximum height of a shape."
  },
  "dxDiagramOptions.defaultItemProperties.shapeMaxWidth": {
    "shortDescription": "Specifies the default maximum width of a shape."
  },
  "dxDiagramOptions.defaultItemProperties.shapeMinHeight": {
    "shortDescription": "Specifies the default minimum height of a shape."
  },
  "dxDiagramOptions.defaultItemProperties.shapeMinWidth": {
    "shortDescription": "Specifies the default minimum width of a shape."
  },
  "dxDiagramOptions.defaultItemProperties.style": {
    "shortDescription": "Specifies a default item style."
  },
  "dxDiagramOptions.defaultItemProperties.textStyle": {
    "shortDescription": "Specifies an item's default text style."
  },
  "dxDiagramOptions.edges": {
    "shortDescription": "Allows you to bind the collection of diagram edges to a data source. For more information, see the [Data Binding](/concepts/05%20UI%20Components/Diagram/10%20Data%20Binding '/Documentation/Guide/UI_Components/Diagram/Data_Binding/') section."
  },
  "dxDiagramOptions.edges.customDataExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's custom data."
  },
  "dxDiagramOptions.edges.dataSource": {
    "shortDescription": "Binds the **edges** collection to the specified data. Specify this property if you use [node and edge](/concepts/05%20UI%20Components/Diagram/10%20Data%20Binding/10%20Node%20and%20Edge%20Arrays.md '/Documentation/Guide/UI_Components/Diagram/Data_Binding/#Node_and_Edge_Arrays') data sources."
  },
  "dxDiagramOptions.edges.fromExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's start node key."
  },
  "dxDiagramOptions.edges.fromLineEndExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's line start tip."
  },
  "dxDiagramOptions.edges.fromPointIndexExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an index of a shape connection point where an edge starts."
  },
  "dxDiagramOptions.edges.keyExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's key."
  },
  "dxDiagramOptions.edges.lineTypeExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's line type."
  },
  "dxDiagramOptions.edges.lockedExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression whose Boolean value indicates whether an edge is locked."
  },
  "dxDiagramOptions.edges.pointsExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's key points."
  },
  "dxDiagramOptions.edges.styleExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge style."
  },
  "dxDiagramOptions.edges.textExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns edge text."
  },
  "dxDiagramOptions.edges.textStyleExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's text style."
  },
  "dxDiagramOptions.edges.toExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's end node key."
  },
  "dxDiagramOptions.edges.toLineEndExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's line end tip."
  },
  "dxDiagramOptions.edges.toPointIndexExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an index of a shape connection point where an edge ends."
  },
  "dxDiagramOptions.edges.zIndexExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an edge's z-index."
  },
  "dxDiagramOptions.editing": {
    "shortDescription": "Specifies which editing operations a user can perform."
  },
  "dxDiagramOptions.editing.allowAddShape": {
    "shortDescription": "Specifies whether a user can add a shape."
  },
  "dxDiagramOptions.editing.allowChangeConnection": {
    "shortDescription": "Specifies whether a user can change a connection."
  },
  "dxDiagramOptions.editing.allowChangeConnectorPoints": {
    "shortDescription": "Specifies whether a user can change connector points."
  },
  "dxDiagramOptions.editing.allowChangeConnectorText": {
    "shortDescription": "Specifies whether a user can change a connector's text."
  },
  "dxDiagramOptions.editing.allowChangeShapeText": {
    "shortDescription": "Specifies whether a user can change a shape's text."
  },
  "dxDiagramOptions.editing.allowDeleteConnector": {
    "shortDescription": "Specifies whether a user can delete a connector."
  },
  "dxDiagramOptions.editing.allowDeleteShape": {
    "shortDescription": "Specifies whether a user can delete a shape."
  },
  "dxDiagramOptions.editing.allowMoveShape": {
    "shortDescription": "Specifies whether a user can move a shape."
  },
  "dxDiagramOptions.editing.allowResizeShape": {
    "shortDescription": "Specifies whether a user can resize a shape."
  },
  "dxDiagramOptions.export": {
    "shortDescription": "Configures export settings."
  },
  "dxDiagramOptions.export.fileName": {
    "shortDescription": "Specifies the name of the file to which the diagram is exported."
  },
  "dxDiagramOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxDiagramOptions.fullScreen": {
    "shortDescription": "Specifies whether or not to display the UI component in full-screen mode."
  },
  "dxDiagramOptions.gridSize": {
    "shortDescription": "Specifies the grid pitch."
  },
  "dxDiagramOptions.gridSize.items": {
    "shortDescription": "An array that specifies the _Grid Size_ combobox items on _Properties_ panel."
  },
  "dxDiagramOptions.gridSize.value": {
    "shortDescription": "Specifies the grid's pitch."
  },
  "dxDiagramOptions.hasChanges": {
    "shortDescription": "Indicates whether diagram content has unsaved changes."
  },
  "dxDiagramOptions.hint": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on the UI component."
  },
  "dxDiagramOptions.historyToolbar": {
    "shortDescription": "Configures the history toolbar's settings."
  },
  "dxDiagramOptions.historyToolbar.commands": {
    "shortDescription": "Lists commands in the history toolbar."
  },
  "dxDiagramOptions.historyToolbar.visible": {
    "shortDescription": "Specifies the history toolbar's visibility."
  },
  "dxDiagramOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxDiagramOptions.mainToolbar": {
    "shortDescription": "Configures the main toolbar settings."
  },
  "dxDiagramOptions.mainToolbar.commands": {
    "shortDescription": "Lists commands in the toolbar."
  },
  "dxDiagramOptions.mainToolbar.visible": {
    "shortDescription": "Specifies the toolbar's visibility."
  },
  "dxDiagramOptions.nodes": {
    "shortDescription": "Allows you to bind the collection of diagram nodes to a data source. For more information, see the [Data Binding](/concepts/05%20UI%20Components/Diagram/10%20Data%20Binding '/Documentation/Guide/UI_Components/Diagram/Data_Binding/') section."
  },
  "dxDiagramOptions.nodes.autoLayout": {
    "shortDescription": "Specifies an auto-layout algorithm that the UI component uses to build a diagram."
  },
  "dxDiagramOptions.nodes.autoLayout.orientation": {
    "shortDescription": "Specifies the diagram layout orientation."
  },
  "dxDiagramOptions.nodes.autoLayout.type": {
    "shortDescription": "Specifies an auto-layout algorithm that is used to automatically arrange shapes."
  },
  "dxDiagramOptions.nodes.autoSizeEnabled": {
    "shortDescription": "Specifies whether or not a shape size is automatically changed to fit the text when the UI component is bound to a data source."
  },
  "dxDiagramOptions.nodes.containerChildrenExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a container's nested items."
  },
  "dxDiagramOptions.nodes.containerKeyExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a key of a node's parent container node."
  },
  "dxDiagramOptions.nodes.customDataExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a node's custom data."
  },
  "dxDiagramOptions.nodes.dataSource": {
    "shortDescription": "Binds the **nodes** collection to the specified data. For more information, see the [Data Binding](/concepts/05%20UI%20Components/Diagram/10%20Data%20Binding '/Documentation/Guide/UI_Components/Diagram/Data_Binding/') section."
  },
  "dxDiagramOptions.nodes.heightExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a node's height."
  },
  "dxDiagramOptions.nodes.imageUrlExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns an image URL or Base64 encoded image for a node."
  },
  "dxDiagramOptions.nodes.itemsExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a node's child items."
  },
  "dxDiagramOptions.nodes.keyExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns node keys."
  },
  "dxDiagramOptions.nodes.leftExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns the x-coordinate of a node's left border."
  },
  "dxDiagramOptions.nodes.lockedExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression whose Boolean value indicates whether a node is locked."
  },
  "dxDiagramOptions.nodes.parentKeyExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a parent node key for a node."
  },
  "dxDiagramOptions.nodes.styleExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a node style."
  },
  "dxDiagramOptions.nodes.textExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns node texts."
  },
  "dxDiagramOptions.nodes.textStyleExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a node's text style."
  },
  "dxDiagramOptions.nodes.topExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns the y-coordinate of a node's top border."
  },
  "dxDiagramOptions.nodes.typeExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns the shape type for a node."
  },
  "dxDiagramOptions.nodes.widthExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a node's width."
  },
  "dxDiagramOptions.nodes.zIndexExpr": {
    "shortDescription": "Specifies the name of a data source field or an expression that returns a node's z-index."
  },
  "dxDiagramOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxDiagramOptions.onCustomCommand": {
    "shortDescription": "A function that is executed after a custom command item was clicked and allows you to implement the custom command's logic."
  },
  "dxDiagramOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDiagramOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDiagramOptions.onItemClick": {
    "shortDescription": "A function that is executed after a shape or connector is clicked."
  },
  "dxDiagramOptions.onItemDblClick": {
    "shortDescription": "A function that is executed after a shape or connector is double-clicked."
  },
  "dxDiagramOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDiagramOptions.onRequestEditOperation": {
    "shortDescription": "A function that allows you to prohibit an edit operation at run time."
  },
  "dxDiagramOptions.onRequestLayoutUpdate": {
    "shortDescription": "A function that allows you to specify whether or not the UI component should reapply its auto layout after diagram data is reloaded."
  },
  "dxDiagramOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed after the selection is changed in the Diagram."
  },
  "dxDiagramOptions.pageColor": {
    "shortDescription": "Specifies the color of a diagram page."
  },
  "dxDiagramOptions.pageOrientation": {
    "shortDescription": "Specifies the page orientation."
  },
  "dxDiagramOptions.pageSize": {
    "shortDescription": "Specifies a size of pages."
  },
  "dxDiagramOptions.pageSize.height": {
    "shortDescription": "Specifies the page height."
  },
  "dxDiagramOptions.pageSize.items": {
    "shortDescription": "An array that specifies the page size items in the _Page Size_ combobox on _Properties Panel_."
  },
  "dxDiagramOptions.pageSize.items.height": {
    "shortDescription": "Specifies the page height."
  },
  "dxDiagramOptions.pageSize.items.text": {
    "shortDescription": "Specifies the display text."
  },
  "dxDiagramOptions.pageSize.items.width": {
    "shortDescription": "Specifies the page width."
  },
  "dxDiagramOptions.pageSize.width": {
    "shortDescription": "Specifies the page width."
  },
  "dxDiagramOptions.propertiesPanel": {
    "shortDescription": "Configures the Properties panel settings."
  },
  "dxDiagramOptions.propertiesPanel.tabs": {
    "shortDescription": "Contains an array of tabs in the Properties panel."
  },
  "dxDiagramOptions.propertiesPanel.tabs.commands": {
    "shortDescription": "Lists commands in a tab."
  },
  "dxDiagramOptions.propertiesPanel.tabs.groups": {
    "shortDescription": "Contains an array of command groups in the tab."
  },
  "dxDiagramOptions.propertiesPanel.tabs.groups.commands": {
    "shortDescription": "Lists commands in a group."
  },
  "dxDiagramOptions.propertiesPanel.tabs.groups.title": {
    "shortDescription": "Specifies a title of the group."
  },
  "dxDiagramOptions.propertiesPanel.tabs.title": {
    "shortDescription": "Specifies the tab's title."
  },
  "dxDiagramOptions.propertiesPanel.visibility": {
    "shortDescription": "Specifies the panel's visibility."
  },
  "dxDiagramOptions.readOnly": {
    "shortDescription": "Specifies whether the diagram is read-only."
  },
  "dxDiagramOptions.showGrid": {
    "shortDescription": "Specifies whether grid lines are visible."
  },
  "dxDiagramOptions.simpleView": {
    "shortDescription": "Switch the Diagram UI component to simple view mode."
  },
  "dxDiagramOptions.snapToGrid": {
    "shortDescription": "Specifies whether diagram elements should snap to grid lines."
  },
  "dxDiagramOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxDiagramOptions.toolbox": {
    "shortDescription": "Configures the toolbox settings."
  },
  "dxDiagramOptions.toolbox.groups": {
    "shortDescription": "Lists toolbox groups."
  },
  "dxDiagramOptions.toolbox.groups.category": {
    "shortDescription": "Specifies the category of shapes that are displayed in the group."
  },
  "dxDiagramOptions.toolbox.groups.displayMode": {
    "shortDescription": "Specifies how shapes are displayed in the toolbox."
  },
  "dxDiagramOptions.toolbox.groups.expanded": {
    "shortDescription": "Specifies whether the group is expanded."
  },
  "dxDiagramOptions.toolbox.groups.shapes": {
    "shortDescription": "Lists the shapes in the group. The built-in shape types are shown in the [Shape Types](/concepts/05%20UI%20Components/Diagram/40%20Shape%20Types.md '/Documentation/Guide/UI_Components/Diagram/Shape_Types/') section."
  },
  "dxDiagramOptions.toolbox.groups.title": {
    "shortDescription": "Specifies the group title in the toolbox."
  },
  "dxDiagramOptions.toolbox.shapeIconsPerRow": {
    "shortDescription": "Specifies the number of shape icons in a row."
  },
  "dxDiagramOptions.toolbox.showSearch": {
    "shortDescription": "Specifies whether the search box is visible."
  },
  "dxDiagramOptions.toolbox.visibility": {
    "shortDescription": "Specifies the toolbar's visibility."
  },
  "dxDiagramOptions.toolbox.width": {
    "shortDescription": "Specifies the toolbox's width in pixels."
  },
  "dxDiagramOptions.units": {
    "shortDescription": "Specifies the measurement unit for size properties."
  },
  "dxDiagramOptions.useNativeScrolling": {
    "shortDescription": "Specifies whether or not the UI component uses native scrolling."
  },
  "dxDiagramOptions.viewToolbar": {
    "shortDescription": "Configures the view toolbar settings."
  },
  "dxDiagramOptions.viewToolbar.commands": {
    "shortDescription": "Lists commands in the toolbar."
  },
  "dxDiagramOptions.viewToolbar.visible": {
    "shortDescription": "Specifies the view toolbar's visibility."
  },
  "dxDiagramOptions.viewUnits": {
    "shortDescription": "Specifies the measurement unit that is displayed in user interface elements."
  },
  "dxDiagramOptions.zoomLevel": {
    "shortDescription": "Specifies the zoom level."
  },
  "dxDiagramOptions.zoomLevel.items": {
    "shortDescription": "An array that specifies the zoom level items in the _Zoom Level_ combobox on _Properties_ panel."
  },
  "dxDiagramOptions.zoomLevel.value": {
    "shortDescription": "Specifies the zoom level."
  },
  "dxDiagramResizeShapeArgs": {
    "shortDescription": "Contains information about the processed shape."
  },
  "dxDiagramResizeShapeArgs.newSize": {
    "shortDescription": "The new shape size."
  },
  "dxDiagramResizeShapeArgs.newSize.height": {
    "shortDescription": "The new shape height."
  },
  "dxDiagramResizeShapeArgs.newSize.width": {
    "shortDescription": "The new shape width."
  },
  "dxDiagramResizeShapeArgs.oldSize": {
    "shortDescription": "The previous shape size."
  },
  "dxDiagramResizeShapeArgs.oldSize.height": {
    "shortDescription": "The previous shape height."
  },
  "dxDiagramResizeShapeArgs.oldSize.width": {
    "shortDescription": "The previous shape width."
  },
  "dxDiagramResizeShapeArgs.shape": {
    "shortDescription": "The processed shape."
  },
  "dxDiagramShape": {
    "shortDescription": "An object that provides information about a shape in the [Diagram](/api-reference/10%20UI%20Components/dxDiagram '/Documentation/ApiReference/UI_Components/dxDiagram/') UI component."
  },
  "dxDiagramShape.attachedConnectorIds": {
    "shortDescription": "Gets an array of attached connector identifiers."
  },
  "dxDiagramShape.containerChildItemIds": {
    "shortDescription": "Gets identifiers of shapes stored in the container."
  },
  "dxDiagramShape.containerExpanded": {
    "shortDescription": "Gets whether the container is expanded."
  },
  "dxDiagramShape.containerId": {
    "shortDescription": "Gets the identifier of the container that stores the shape."
  },
  "dxDiagramShape.position": {
    "shortDescription": "Specifies the position of the top left shape corner relative to the top left corner of the diagram work area."
  },
  "dxDiagramShape.position.x": {
    "shortDescription": "The horizontal shape position specified in [units](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/units.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/#units')."
  },
  "dxDiagramShape.position.y": {
    "shortDescription": "The vertical shape position specified in [units](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/units.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/#units')."
  },
  "dxDiagramShape.size": {
    "shortDescription": "Specifies the shape size."
  },
  "dxDiagramShape.size.height": {
    "shortDescription": "The shape height specified in [units](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/units.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/#units')."
  },
  "dxDiagramShape.size.width": {
    "shortDescription": "The shape width specified in [units](/api-reference/10%20UI%20Components/dxDiagram/1%20Configuration/units.md '/Documentation/ApiReference/UI_Components/dxDiagram/Configuration/#units')."
  },
  "dxDiagramShape.text": {
    "shortDescription": "Specifies the shape's text."
  },
  "dxDiagramShape.type": {
    "shortDescription": "Specifies the shape type. The built-in shape types are shown in the [Shape Types](/concepts/05%20UI%20Components/Diagram/40%20Shape%20Types.md '/Documentation/Guide/UI_Components/Diagram/Shape_Types/') section."
  },
  "dxDraggable": {
    "shortDescription": "Draggable is a user interface utility that allows UI component elements to be dragged and dropped."
  },
  "dxDraggable.dragEnd": {
    "shortDescription": "Raised when drag gesture is finished."
  },
  "dxDraggable.dragMove": {
    "shortDescription": "Raised every time a draggable item is moved."
  },
  "dxDraggable.dragStart": {
    "shortDescription": "Raised when drag gesture is initialized."
  },
  "dxDraggable.drop": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDraggableOptions.clone": {
    "shortDescription": "Allows a user to drag clones of items instead of actual items."
  },
  "dxDraggableOptions.dragTemplate": {
    "shortDescription": "Specifies custom markup to be shown instead of the item being dragged."
  },
  "dxDraggableOptions.filter": {
    "shortDescription": "Specifies a CSS selector for the items that need to be dragged."
  },
  "dxDraggableOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDraggableOptions.onDragEnd": {
    "shortDescription": "A function that is called when a drag gesture is finished."
  },
  "dxDraggableOptions.onDragMove": {
    "shortDescription": "A function that is called every time a draggable item is moved."
  },
  "dxDraggableOptions.onDragStart": {
    "shortDescription": "A function that is called when a drag gesture is initialized."
  },
  "dxDraggableOptions.onDrop": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxDraggableOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDraggableOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDrawer": {
    "shortDescription": "The Drawer is a dismissible or permanently visible panel used for navigation in responsive web application layouts."
  },
  "dxDrawer.content()": {
    "shortDescription": "Gets the drawer's content."
  },
  "dxDrawer.contentReady": {
    "shortDescription": "Raised when the UI component is rendered and each time the component is repainted."
  },
  "dxDrawer.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxDrawer.hide()": {
    "shortDescription": "Closes the drawer."
  },
  "dxDrawer.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxDrawer.show()": {
    "shortDescription": "Opens the drawer."
  },
  "dxDrawer.toggle()": {
    "shortDescription": "Opens or closes the drawer, reversing the current state."
  },
  "dxDrawer.viewContent()": {
    "shortDescription": ""
  },
  "dxDrawerOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxDrawerOptions.animationDuration": {
    "shortDescription": "Specifies the duration of the drawer's opening and closing animation (in milliseconds). Applies only if [animationEnabled](/api-reference/10%20UI%20Components/dxDrawer/1%20Configuration/animationEnabled.md '/Documentation/ApiReference/UI_Components/dxDrawer/Configuration/#animationEnabled') is **true**."
  },
  "dxDrawerOptions.animationEnabled": {
    "shortDescription": "Specifies whether to use an opening and closing animation."
  },
  "dxDrawerOptions.closeOnOutsideClick": {
    "shortDescription": "Specifies whether to close the drawer if a user clicks or taps the view area."
  },
  "dxDrawerOptions.contentTemplate": {
    "shortDescription": ""
  },
  "dxDrawerOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxDrawerOptions.maxSize": {
    "shortDescription": "Specifies the drawer's width or height (depending on the drawer's [position](/api-reference/10%20UI%20Components/dxDrawer/1%20Configuration/position.md '/Documentation/ApiReference/UI_Components/dxDrawer/Configuration/#position')) in the opened state."
  },
  "dxDrawerOptions.minSize": {
    "shortDescription": "Specifies the drawer's width or height (depending on the drawer's [position](/api-reference/10%20UI%20Components/dxDrawer/1%20Configuration/position.md '/Documentation/ApiReference/UI_Components/dxDrawer/Configuration/#position')) in the closed state."
  },
  "dxDrawerOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxDrawerOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDrawerOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDrawerOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDrawerOptions.opened": {
    "shortDescription": "Specifies whether the drawer is opened."
  },
  "dxDrawerOptions.openedStateMode": {
    "shortDescription": "Specifies how the drawer interacts with the view in the opened state."
  },
  "dxDrawerOptions.position": {
    "shortDescription": "Specifies the drawer's position in relation to the view."
  },
  "dxDrawerOptions.revealMode": {
    "shortDescription": "Specifies the drawer's reveal mode."
  },
  "dxDrawerOptions.shading": {
    "shortDescription": "Specifies whether to shade the view when the drawer is opened."
  },
  "dxDrawerOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxDrawerOptions.template": {
    "shortDescription": "Specifies the drawer's content."
  },
  "dxDropDownBox": {
    "shortDescription": "The DropDownBox UI component consists of a text field, which displays the current value, and a drop-down field, which can contain any UI element."
  },
  "dxDropDownBox.contentReady": {
    "shortDescription": ""
  },
  "dxDropDownBoxOptions.acceptCustomValue": {
    "shortDescription": "Specifies whether the UI component allows a user to enter a custom value."
  },
  "dxDropDownBoxOptions.applyValueMode": {
    "shortDescription": "Specifies the way an end user applies the selected value."
  },
  "dxDropDownBoxOptions.contentTemplate": {
    "shortDescription": "Specifies a custom template for the drop-down content."
  },
  "dxDropDownBoxOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxDropDownBoxOptions.displayValueFormatter": {
    "shortDescription": "Customizes text before it is displayed in the input field."
  },
  "dxDropDownBoxOptions.dropDownOptions": {
    "shortDescription": "Configures the drop-down field which holds the [content](/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#contentTemplate)."
  },
  "dxDropDownBoxOptions.fieldTemplate": {
    "shortDescription": "Specifies a custom template for the text field. Must contain the [TextBox](/api-reference/10%20UI%20Components/dxTextBox '/Documentation/ApiReference/UI_Components/dxTextBox/') UI component."
  },
  "dxDropDownBoxOptions.items": {
    "shortDescription": "An array of items used to synchronize the DropDownBox with an embedded UI component."
  },
  "dxDropDownBoxOptions.itemTemplate": {
    "shortDescription": "Specifies a custom template for items."
  },
  "dxDropDownBoxOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxDropDownBoxOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxDropDownBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxDropDownBoxOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxDropDownBoxOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxDropDownBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDropDownBoxOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxDropDownBoxOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxDropDownBoxOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxDropDownBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDropDownBoxOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxDropDownBoxOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxDropDownBoxOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxDropDownBoxOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxDropDownBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDropDownBoxOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxDropDownBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/DataExpressionMixin/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxDropDownBoxOptions.openOnFieldClick": {
    "shortDescription": "Specifies whether a user can open the drop-down list by clicking a text field."
  },
  "dxDropDownBoxOptions.spellcheck": {
    "shortDescription": "Specifies whether or not the UI component checks the inner text for spelling mistakes."
  },
  "dxDropDownBoxOptions.valueChangeEvent": {
    "shortDescription": "Specifies the <a href=\"https://en.wikipedia.org/wiki/DOM_events\" target=\"_blank\">DOM events</a> after which the UI component's [value](/api-reference/10%20UI%20Components/DataExpressionMixin/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should be updated."
  },
  "dxDropDownButton": {
    "shortDescription": "The DropDownButton is a button that opens a drop-down menu."
  },
  "dxDropDownButton.buttonClick": {
    "shortDescription": "Raised when the button is clicked."
  },
  "dxDropDownButton.close()": {
    "shortDescription": "Closes the drop-down menu."
  },
  "dxDropDownButton.itemClick": {
    "shortDescription": "Raised when an item in the drop-down filed is clicked."
  },
  "dxDropDownButton.open()": {
    "shortDescription": "Opens the drop-down menu."
  },
  "dxDropDownButton.selectionChanged": {
    "shortDescription": "Raised when an item is selected or selection is canceled."
  },
  "dxDropDownButton.toggle()": {
    "shortDescription": "Opens or closes the drop-down menu, reversing the current state."
  },
  "dxDropDownButton.toggle(visibility)": {
    "shortDescription": "Opens or closes the drop-down menu, depending on the argument."
  },
  "dxDropDownButtonItem.key": {
    "shortDescription": "Specifies the name of the list items group in a grouped list."
  },
  "dxDropDownButtonItem.onClick": {
    "shortDescription": "A handler for the [click](/api-reference/10%20UI%20Components/dxDropDownButton/4%20Events/itemClick.md '{basewidgetpath}/Events/#itemClick') event raised for a certain item in the drop-down field."
  },
  "dxDropDownButtonItem.showChevron": {
    "shortDescription": "Specifies whether or not to display a chevron for the list item."
  },
  "dxDropDownButtonOptions.dataSource": {
    "shortDescription": "Provides data for the drop-down menu."
  },
  "dxDropDownButtonOptions.deferRendering": {
    "shortDescription": "Specifies whether to wait until the drop-down menu is opened the first time to render its content.\nSpecifies whether to render the view's content when it is displayed. If **false**, the content is rendered immediately."
  },
  "dxDropDownButtonOptions.displayExpr": {
    "shortDescription": "Specifies the data field whose values should be displayed in the drop-down menu."
  },
  "dxDropDownButtonOptions.dropDownContentTemplate": {
    "shortDescription": "Specifies custom content for the drop-down field."
  },
  "dxDropDownButtonOptions.dropDownOptions": {
    "shortDescription": "Configures the drop-down field."
  },
  "dxDropDownButtonOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether users can use keyboard to focus the UI component."
  },
  "dxDropDownButtonOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user hovers the mouse pointer over it."
  },
  "dxDropDownButtonOptions.icon": {
    "shortDescription": "Specifies the button's icon."
  },
  "dxDropDownButtonOptions.items": {
    "shortDescription": "Provides drop-down menu items."
  },
  "dxDropDownButtonOptions.itemTemplate": {
    "shortDescription": "Specifies a custom template for drop-down menu items."
  },
  "dxDropDownButtonOptions.keyExpr": {
    "shortDescription": "Specifies which data field provides keys used to distinguish between the selected drop-down menu items."
  },
  "dxDropDownButtonOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed in the drop-down menu when it does not contain any items."
  },
  "dxDropDownButtonOptions.onButtonClick": {
    "shortDescription": "A function that is executed when the button is clicked or tapped. If [splitButton](/api-reference/10%20UI%20Components/dxDropDownButton/1%20Configuration/splitButton.md '/Documentation/ApiReference/UI_Components/dxDropDownButton/Configuration/#splitButton') is **true**, this function is executed for the action button only."
  },
  "dxDropDownButtonOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxDropDownButtonOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxDropDownButtonOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxDropDownButtonOptions.onItemClick": {
    "shortDescription": "A function that is executed when a drop-down menu item is clicked."
  },
  "dxDropDownButtonOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxDropDownButtonOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when an item is selected or selection is canceled. In effect when [useSelectMode](/api-reference/10%20UI%20Components/dxDropDownButton/1%20Configuration/useSelectMode.md '/Documentation/ApiReference/UI_Components/dxDropDownButton/Configuration/#useSelectMode') is **true**."
  },
  "dxDropDownButtonOptions.opened": {
    "shortDescription": "Specifies whether the drop-down menu is opened."
  },
  "dxDropDownButtonOptions.selectedItem": {
    "shortDescription": "Contains the selected item's data. Available when [useSelectMode](/api-reference/10%20UI%20Components/dxDropDownButton/1%20Configuration/useSelectMode.md '/Documentation/ApiReference/UI_Components/dxDropDownButton/Configuration/#useSelectMode') is **true**."
  },
  "dxDropDownButtonOptions.selectedItemKey": {
    "shortDescription": "Contains the selected item's key and allows you to specify the initially selected item. Applies when [useSelectMode](/api-reference/10%20UI%20Components/dxDropDownButton/1%20Configuration/useSelectMode.md '/Documentation/ApiReference/UI_Components/dxDropDownButton/Configuration/#useSelectMode') is **true**."
  },
  "dxDropDownButtonOptions.showArrowIcon": {
    "shortDescription": "Specifies whether the arrow icon should be displayed."
  },
  "dxDropDownButtonOptions.splitButton": {
    "shortDescription": "Specifies whether to split the button in two: one [executes an action](/api-reference/10%20UI%20Components/dxDropDownButton/1%20Configuration/onButtonClick.md '/Documentation/ApiReference/UI_Components/dxDropDownButton/Configuration/#onButtonClick'), the other opens and closes the drop-down menu."
  },
  "dxDropDownButtonOptions.stylingMode": {
    "shortDescription": "Specifies how the button is styled."
  },
  "dxDropDownButtonOptions.template": {
    "shortDescription": "Specifies a custom template for the base button in DropDownButton."
  },
  "dxDropDownButtonOptions.text": {
    "shortDescription": "Specifies the button's text. Applies only if [useSelectMode](/api-reference/10%20UI%20Components/dxDropDownButton/1%20Configuration/useSelectMode.md '/Documentation/ApiReference/UI_Components/dxDropDownButton/Configuration/#useSelectMode') is **false**."
  },
  "dxDropDownButtonOptions.type": {
    "shortDescription": "Specifies the drop-down button type."
  },
  "dxDropDownButtonOptions.useItemTextAsTitle": {
    "shortDescription": "Specifies whether the {WidgetName} uses item's text a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\" target=\"_blank\">title</a> attribute."
  },
  "dxDropDownButtonOptions.useSelectMode": {
    "shortDescription": "Specifies whether the UI component stores the selected drop-down menu item."
  },
  "dxDropDownButtonOptions.wrapItemText": {
    "shortDescription": "Specifies whether text that exceeds the drop-down list [width](/api-reference/10%20UI%20Components/DOMComponent/1%20Configuration/width.md '{basewidgetpath}/Configuration/#width') should be wrapped."
  },
  "dxDropDownEditor": {
    "shortDescription": "A drop-down editor UI component."
  },
  "dxDropDownEditor.close()": {
    "shortDescription": "Closes the drop-down editor."
  },
  "dxDropDownEditor.closed": {
    "shortDescription": "Raised once the drop-down editor is closed."
  },
  "dxDropDownEditor.content()": {
    "shortDescription": "Gets the popup window's content."
  },
  "dxDropDownEditor.field()": {
    "shortDescription": "Gets the UI component's `<input>` element."
  },
  "dxDropDownEditor.open()": {
    "shortDescription": "Opens the drop-down editor."
  },
  "dxDropDownEditor.opened": {
    "shortDescription": "Raised once the drop-down editor is opened."
  },
  "dxDropDownEditorOptions.acceptCustomValue": {
    "shortDescription": "Specifies whether or not the UI component allows an end user to enter a custom value."
  },
  "dxDropDownEditorOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxDropDownEditorOptions.applyValueMode": {
    "shortDescription": "Specifies the way an end user applies the selected value."
  },
  "dxDropDownEditorOptions.buttons": {
    "shortDescription": "Allows you to add custom buttons to the input text field."
  },
  "dxDropDownEditorOptions.deferRendering": {
    "shortDescription": "Specifies whether to render the drop-down field's content when it is displayed. If **false**, the content is rendered immediately."
  },
  "dxDropDownEditorOptions.dropDownButtonTemplate": {
    "shortDescription": "Specifies a custom template for the drop-down button."
  },
  "dxDropDownEditorOptions.dropDownOptions": {
    "shortDescription": "Configures the drop-down field which holds the [content](/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#contentTemplate)."
  },
  "dxDropDownEditorOptions.mask": {
    "shortDescription": "The editor mask that specifies the custom format of the entered string."
  },
  "dxDropDownEditorOptions.maskChar": {
    "shortDescription": "Specifies a mask placeholder. A single character is recommended."
  },
  "dxDropDownEditorOptions.maskInvalidMessage": {
    "shortDescription": "A message displayed when the entered text does not match the specified pattern."
  },
  "dxDropDownEditorOptions.maskRules": {
    "shortDescription": "Specifies custom mask rules."
  },
  "dxDropDownEditorOptions.mode": {
    "shortDescription": "The \"mode\" attribute value of the actual HTML input element representing the text box."
  },
  "dxDropDownEditorOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxDropDownEditorOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxDropDownEditorOptions.opened": {
    "shortDescription": "Specifies whether or not the drop-down editor is displayed."
  },
  "dxDropDownEditorOptions.openOnFieldClick": {
    "shortDescription": "Specifies whether a user can open the drop-down list by clicking a text field."
  },
  "dxDropDownEditorOptions.showDropDownButton": {
    "shortDescription": "Specifies whether the drop-down button is visible."
  },
  "dxDropDownEditorOptions.showMaskMode": {
    "shortDescription": "Specifies when the UI component shows the [mask](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/mask.md '{basewidgetpath}/Configuration/#mask'). Applies only if [useMaskedValue](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/useMaskedValue.md '{basewidgetpath}/Configuration/#useMaskedValue') is **true**."
  },
  "dxDropDownEditorOptions.useMaskedValue": {
    "shortDescription": "Specifies whether the [value](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should contain mask characters or not."
  },
  "dxDropDownEditorOptions.validationMessagePosition": {
    "shortDescription": "Specifies the position of a validation message relative to the component. The validation message describes the [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that this component's value does not satisfy."
  },
  "dxDropDownEditorOptions.value": {
    "shortDescription": "Specifies the currently selected value."
  },
  "dxDropDownList": {
    "shortDescription": "A base class for drop-down list UI components."
  },
  "dxDropDownList.itemClick": {
    "shortDescription": "Raised when a list item is clicked or tapped."
  },
  "dxDropDownList.selectionChanged": {
    "shortDescription": "Raised when a list item is selected or selection is canceled."
  },
  "dxDropDownList.valueChanged": {
    "shortDescription": "Raised after the UI component's [value](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxDropDownListOptions.applyValueMode": {
    "shortDescription": "Specifies the way an end user applies the selected value."
  },
  "dxDropDownListOptions.displayValue": {
    "shortDescription": "Returns the value currently displayed by the UI component."
  },
  "dxDropDownListOptions.grouped": {
    "shortDescription": "Specifies whether data items should be grouped."
  },
  "dxDropDownListOptions.groupTemplate": {
    "shortDescription": "Specifies a custom template for group captions."
  },
  "dxDropDownListOptions.minSearchLength": {
    "shortDescription": "The minimum number of characters that must be entered into the text box to begin a search. Applies only if [searchEnabled](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/searchEnabled.md '{basewidgetpath}/Configuration/#searchEnabled') is **true**."
  },
  "dxDropDownListOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "dxDropDownListOptions.onItemClick": {
    "shortDescription": "A function that is executed when a list item is clicked or tapped."
  },
  "dxDropDownListOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a list item is selected or selection is canceled."
  },
  "dxDropDownListOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxDropDownListOptions.searchEnabled": {
    "shortDescription": "Specifies whether to allow search operations."
  },
  "dxDropDownListOptions.searchExpr": {
    "shortDescription": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
  },
  "dxDropDownListOptions.searchMode": {
    "shortDescription": "Specifies a comparison operation used to search UI component items."
  },
  "dxDropDownListOptions.searchTimeout": {
    "shortDescription": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
  },
  "dxDropDownListOptions.selectedItem": {
    "shortDescription": "Gets the currently selected item."
  },
  "dxDropDownListOptions.showDataBeforeSearch": {
    "shortDescription": "Specifies whether or not the UI component displays unfiltered values until a user types a number of characters exceeding the [minSearchLength](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/minSearchLength.md '{basewidgetpath}/Configuration/#minSearchLength') property value."
  },
  "dxDropDownListOptions.useItemTextAsTitle": {
    "shortDescription": "Specifies whether the {WidgetName} uses item's text a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\" target=\"_blank\">title</a> attribute."
  },
  "dxDropDownListOptions.value": {
    "shortDescription": "Specifies the currently selected value. May be an object if [dataSource](/api-reference/10%20UI%20Components/DataExpressionMixin/1%20Configuration/dataSource.md '{basewidgetpath}/Configuration/#dataSource') contains objects, the store [key](/api-reference/30%20Data%20Layer/Store/1%20Configuration/key.md '/Documentation/ApiReference/Data_Layer/ArrayStore/Configuration/#key') is specified, and [valueExpr](/api-reference/10%20UI%20Components/DataExpressionMixin/1%20Configuration/valueExpr.md '{basewidgetpath}/Configuration/#valueExpr') is not set."
  },
  "dxDropDownListOptions.valueChangeEvent": {
    "shortDescription": "Specifies the <a href=\"https://en.wikipedia.org/wiki/DOM_events\" target=\"_blank\">DOM events</a> after which the UI component's [value](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should be updated."
  },
  "dxDropDownListOptions.wrapItemText": {
    "shortDescription": "Specifies whether text that exceeds the drop-down list [width](/api-reference/10%20UI%20Components/DOMComponent/1%20Configuration/width.md '{basewidgetpath}/Configuration/#width') should be wrapped."
  },
  "DxElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "DxEvent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxFileManager": {
    "shortDescription": "The FileManager is a UI component that allows users to upload, select, and manage files and directories in different file storages."
  },
  "dxFileManager.contextMenuItemClick": {
    "shortDescription": "Raised when a context menu item is clicked."
  },
  "dxFileManager.contextMenuShowing": {
    "shortDescription": "Raised before the context menu is displayed."
  },
  "dxFileManager.currentDirectoryChanged": {
    "shortDescription": "Raised when the current directory is changed."
  },
  "dxFileManager.directoryCreated": {
    "shortDescription": "Raised when a directory is created."
  },
  "dxFileManager.directoryCreating": {
    "shortDescription": "Raised before a directory is created."
  },
  "dxFileManager.errorOccurred": {
    "shortDescription": "Raised when an error occurs during file processing."
  },
  "dxFileManager.fileUploaded": {
    "shortDescription": "Raised when a file is uploaded."
  },
  "dxFileManager.fileUploading": {
    "shortDescription": "Raised before a file is uploaded."
  },
  "dxFileManager.focusedItemChanged": {
    "shortDescription": "Raised when the focused item is changed."
  },
  "dxFileManager.getCurrentDirectory()": {
    "shortDescription": "Gets the current directory object."
  },
  "dxFileManager.getSelectedItems()": {
    "shortDescription": "Gets the selected items."
  },
  "dxFileManager.itemCopied": {
    "shortDescription": "Raised when a file or directory is copied."
  },
  "dxFileManager.itemCopying": {
    "shortDescription": "Raised before a file or directory is copied."
  },
  "dxFileManager.itemDeleted": {
    "shortDescription": "Raised when a file or directory is deleted."
  },
  "dxFileManager.itemDeleting": {
    "shortDescription": "Raised before a file or directory is deleted."
  },
  "dxFileManager.itemDownloading": {
    "shortDescription": "Raised before a file is downloaded."
  },
  "dxFileManager.itemMoved": {
    "shortDescription": "Raised when a file or directory is moved."
  },
  "dxFileManager.itemMoving": {
    "shortDescription": "Raised before a file or directory is moved."
  },
  "dxFileManager.itemRenamed": {
    "shortDescription": "Raised when a file or directory is renamed."
  },
  "dxFileManager.itemRenaming": {
    "shortDescription": "Raised before a file or directory is renamed."
  },
  "dxFileManager.refresh()": {
    "shortDescription": "Reloads data and repaints the UI component."
  },
  "dxFileManager.selectedFileOpened": {
    "shortDescription": "Raised when the selected file is opened."
  },
  "dxFileManager.selectionChanged": {
    "shortDescription": "Raised when a file system item is selected or selection is canceled."
  },
  "dxFileManager.toolbarItemClick": {
    "shortDescription": "Raised when a toolbar item is clicked."
  },
  "dxFileManagerContextMenu": {
    "shortDescription": "Configures the context menu."
  },
  "dxFileManagerContextMenu.items": {
    "shortDescription": "Configures context menu items' settings."
  },
  "dxFileManagerContextMenuItem": {
    "shortDescription": "Configures the context menu item."
  },
  "dxFileManagerContextMenuItem.items": {
    "shortDescription": "Configures settings of a context menu item's subitems."
  },
  "dxFileManagerContextMenuItem.name": {
    "shortDescription": "Specifies the context menu item's name."
  },
  "dxFileManagerContextMenuItem.template": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxFileManagerContextMenuItem.visible": {
    "shortDescription": "Specifies the context menu item's visibility."
  },
  "dxFileManagerDetailsColumn": {
    "shortDescription": "Configures the column."
  },
  "dxFileManagerDetailsColumn.alignment": {
    "shortDescription": "Specifies the column alignment."
  },
  "dxFileManagerDetailsColumn.caption": {
    "shortDescription": "Specifies the column caption."
  },
  "dxFileManagerDetailsColumn.cssClass": {
    "shortDescription": "Specifies a <a href=\"http://www.w3schools.com/cssref/sel_class.asp\" target=\"_blank\">CSS class</a> to be applied to the column."
  },
  "dxFileManagerDetailsColumn.dataField": {
    "shortDescription": "Specifies which data field provides data for the column."
  },
  "dxFileManagerDetailsColumn.dataType": {
    "shortDescription": "Casts column values to a specific data type."
  },
  "dxFileManagerDetailsColumn.hidingPriority": {
    "shortDescription": "Specifies the order in which columns are hidden when the UI component adapts to the screen or container size."
  },
  "dxFileManagerDetailsColumn.sortIndex": {
    "shortDescription": "Specifies the order in which the column is sorted."
  },
  "dxFileManagerDetailsColumn.sortOrder": {
    "shortDescription": "Specifies the sort order of column values."
  },
  "dxFileManagerDetailsColumn.visible": {
    "shortDescription": "Specifies the column visibility."
  },
  "dxFileManagerDetailsColumn.visibleIndex": {
    "shortDescription": "Specifies the position of the column in the resulting UI component."
  },
  "dxFileManagerDetailsColumn.width": {
    "shortDescription": "Specifies the column width."
  },
  "dxFileManagerOptions.allowedFileExtensions": {
    "shortDescription": "Specifies the allowed upload file extensions."
  },
  "dxFileManagerOptions.contextMenu": {
    "shortDescription": "Configures the context menu settings."
  },
  "dxFileManagerOptions.currentPath": {
    "shortDescription": "Specifies the path that is used when the FileManager is initialized."
  },
  "dxFileManagerOptions.currentPathKeys": {
    "shortDescription": "Specifies an array of path keys to the current location."
  },
  "dxFileManagerOptions.customizeDetailColumns": {
    "shortDescription": "Customizes columns in [details view](https://js.devexpress.com/Demos/WidgetsGallery/Demo/FileManager/BindingToHierarchicalStructure). Applies only if **itemView**.[mode](/api-reference/10%20UI%20Components/dxFileManager/1%20Configuration/itemView/mode.md '/Documentation/ApiReference/UI_Components/dxFileManager/Configuration/itemView/#mode') is *\"details\"*."
  },
  "dxFileManagerOptions.customizeThumbnail": {
    "shortDescription": "Allows you to provide custom icons to be used as thumbnails."
  },
  "dxFileManagerOptions.fileSystemProvider": {
    "shortDescription": "Specifies the file system provider."
  },
  "dxFileManagerOptions.focusedItemKey": {
    "shortDescription": "Specifies a key of the initially or currently focused item."
  },
  "dxFileManagerOptions.itemView": {
    "shortDescription": "Configures the file and directory view."
  },
  "dxFileManagerOptions.itemView.details": {
    "shortDescription": "Configures the \"Details\" file system representation mode."
  },
  "dxFileManagerOptions.itemView.details.columns": {
    "shortDescription": "Configures the columns."
  },
  "dxFileManagerOptions.itemView.mode": {
    "shortDescription": "Specifies the file system representation mode."
  },
  "dxFileManagerOptions.itemView.showFolders": {
    "shortDescription": "Specifies whether to display folders in the view. When this property is **false**, folders are displayed in the navigation pane only."
  },
  "dxFileManagerOptions.itemView.showParentFolder": {
    "shortDescription": "Specifies whether to display the parent directory in the view."
  },
  "dxFileManagerOptions.notifications": {
    "shortDescription": "Configures notification settings."
  },
  "dxFileManagerOptions.notifications.showPanel": {
    "shortDescription": "Specifies whether to show the progress panel."
  },
  "dxFileManagerOptions.notifications.showPopup": {
    "shortDescription": "Specifies whether to show the pop-up notification window."
  },
  "dxFileManagerOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxFileManagerOptions.onContextMenuItemClick": {
    "shortDescription": "A function that is executed when a context menu item is clicked."
  },
  "dxFileManagerOptions.onContextMenuShowing": {
    "shortDescription": "A function that is executed before a context menu is displayed."
  },
  "dxFileManagerOptions.onCurrentDirectoryChanged": {
    "shortDescription": "A function that is executed when the current directory is changed."
  },
  "dxFileManagerOptions.onDirectoryCreated": {
    "shortDescription": "A function that is executed when a directory is created."
  },
  "dxFileManagerOptions.onDirectoryCreating": {
    "shortDescription": "A function that is executed before a directory is created."
  },
  "dxFileManagerOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxFileManagerOptions.onErrorOccurred": {
    "shortDescription": "A function that is executed when an error occurs."
  },
  "dxFileManagerOptions.onFileUploaded": {
    "shortDescription": "A function that is executed when a file is successfully uploaded."
  },
  "dxFileManagerOptions.onFileUploading": {
    "shortDescription": "A function that is executed before the file is uploaded."
  },
  "dxFileManagerOptions.onFocusedItemChanged": {
    "shortDescription": "A function that is executed when the focused item is changed."
  },
  "dxFileManagerOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxFileManagerOptions.onItemCopied": {
    "shortDescription": "A function that is executed when a file or directory is copied."
  },
  "dxFileManagerOptions.onItemCopying": {
    "shortDescription": "A function that is executed before a file or directory is copied."
  },
  "dxFileManagerOptions.onItemDeleted": {
    "shortDescription": "A function that is executed when a file or directory is deleted."
  },
  "dxFileManagerOptions.onItemDeleting": {
    "shortDescription": "A function that is executed before a file or directory is deleted."
  },
  "dxFileManagerOptions.onItemDownloading": {
    "shortDescription": "A function that is executed before a file is downloaded."
  },
  "dxFileManagerOptions.onItemMoved": {
    "shortDescription": "A function that is executed when a file or directory is moved."
  },
  "dxFileManagerOptions.onItemMoving": {
    "shortDescription": "A function that is executed before a file or directory is moved."
  },
  "dxFileManagerOptions.onItemRenamed": {
    "shortDescription": "A function that is executed when a file or directory is renamed."
  },
  "dxFileManagerOptions.onItemRenaming": {
    "shortDescription": "A function that is executed before a file or directory is renamed."
  },
  "dxFileManagerOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxFileManagerOptions.onSelectedFileOpened": {
    "shortDescription": "A function that is executed when the selected file is opened."
  },
  "dxFileManagerOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a file system item is selected or selection is canceled."
  },
  "dxFileManagerOptions.onToolbarItemClick": {
    "shortDescription": "A function that is executed when a toolbar item is clicked."
  },
  "dxFileManagerOptions.permissions": {
    "shortDescription": "Specifies actions that a user is allowed to perform on files and directories."
  },
  "dxFileManagerOptions.permissions.copy": {
    "shortDescription": "Specifies whether a user is allowed to copy files and directories."
  },
  "dxFileManagerOptions.permissions.create": {
    "shortDescription": "Specifies whether a user is allowed to create files and directories."
  },
  "dxFileManagerOptions.permissions.delete": {
    "shortDescription": "Specifies whether a user is allowed to delete files and directories."
  },
  "dxFileManagerOptions.permissions.download": {
    "shortDescription": "Specifies whether a user is allowed to download files."
  },
  "dxFileManagerOptions.permissions.move": {
    "shortDescription": "Specifies whether a user is allowed to move files and directories."
  },
  "dxFileManagerOptions.permissions.rename": {
    "shortDescription": "Specifies whether a user is allowed to rename files and directories."
  },
  "dxFileManagerOptions.permissions.upload": {
    "shortDescription": "Specifies whether a user is allowed to upload files."
  },
  "dxFileManagerOptions.rootFolderName": {
    "shortDescription": "Specifies the root directory display name."
  },
  "dxFileManagerOptions.selectedItemKeys": {
    "shortDescription": "Contains an array of initially or currently selected files and directories' keys."
  },
  "dxFileManagerOptions.selectionMode": {
    "shortDescription": "Specifies whether a user can select a single or multiple files and directories in the [item view](/api-reference/10%20UI%20Components/dxFileManager/1%20Configuration/itemView '/Documentation/ApiReference/UI_Components/dxFileManager/Configuration/itemView/') simultaneously."
  },
  "dxFileManagerOptions.toolbar": {
    "shortDescription": "Configures toolbar settings."
  },
  "dxFileManagerOptions.upload": {
    "shortDescription": "Configures upload settings."
  },
  "dxFileManagerOptions.upload.chunkSize": {
    "shortDescription": "Specifies a chunk size, in bytes."
  },
  "dxFileManagerOptions.upload.maxFileSize": {
    "shortDescription": "Specifies the maximum upload file size, in bytes."
  },
  "dxFileManagerToolbar": {
    "shortDescription": "Configures the toolbar."
  },
  "dxFileManagerToolbar.fileSelectionItems": {
    "shortDescription": "Configures settings of the toolbar items that are visible when users select files."
  },
  "dxFileManagerToolbar.items": {
    "shortDescription": "Configures toolbar items' settings."
  },
  "dxFileManagerToolbarItem": {
    "shortDescription": "Configures the toolbar item."
  },
  "dxFileManagerToolbarItem.html": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxFileManagerToolbarItem.icon": {
    "shortDescription": "Specifies the icon to be displayed on the toolbar item."
  },
  "dxFileManagerToolbarItem.location": {
    "shortDescription": "Specifies the toolbar item's location."
  },
  "dxFileManagerToolbarItem.menuItemTemplate": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxFileManagerToolbarItem.name": {
    "shortDescription": "Specifies the toolbar item's name."
  },
  "dxFileManagerToolbarItem.template": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxFileManagerToolbarItem.visible": {
    "shortDescription": "Specifies the toolbar item's visibility."
  },
  "dxFileUploader": {
    "shortDescription": "The FileUploader UI component enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page."
  },
  "dxFileUploader.abortUpload()": {
    "shortDescription": "Cancels the file upload."
  },
  "dxFileUploader.abortUpload(file)": {
    "shortDescription": "Cancels the file upload."
  },
  "dxFileUploader.abortUpload(fileIndex)": {
    "shortDescription": "Cancels the file upload."
  },
  "dxFileUploader.beforeSend": {
    "shortDescription": "Raised before the request is sent to the server and allows you to customize this request."
  },
  "dxFileUploader.dropZoneEnter": {
    "shortDescription": "Raised when the mouse enters a drop zone as it drags a file."
  },
  "dxFileUploader.dropZoneLeave": {
    "shortDescription": "Raised when the mouse leaves a drop zone as it drags a file."
  },
  "dxFileUploader.filesUploaded": {
    "shortDescription": "Raised when the file upload process is complete."
  },
  "dxFileUploader.progress": {
    "shortDescription": "Raised when a file segment is uploaded."
  },
  "dxFileUploader.removeFile(file)": {
    "shortDescription": "Removes a file."
  },
  "dxFileUploader.removeFile(fileIndex)": {
    "shortDescription": "Removes a file with the specified index."
  },
  "dxFileUploader.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxFileUploader/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxFileUploader.upload()": {
    "shortDescription": "Uploads all the selected files."
  },
  "dxFileUploader.upload(file)": {
    "shortDescription": "Uploads the specified file."
  },
  "dxFileUploader.upload(fileIndex)": {
    "shortDescription": "Uploads a file with the specified index."
  },
  "dxFileUploader.uploadAborted": {
    "shortDescription": "Raised when the file upload is aborted."
  },
  "dxFileUploader.uploaded": {
    "shortDescription": "Raised when a file is successfully uploaded."
  },
  "dxFileUploader.uploadError": {
    "shortDescription": "Raised when an error occurs during the file upload."
  },
  "dxFileUploader.uploadStarted": {
    "shortDescription": "Raised when the file upload is started."
  },
  "dxFileUploader.valueChanged": {
    "shortDescription": "Raised when one or several files are added to or removed from the selection."
  },
  "dxFileUploaderOptions.abortUpload": {
    "shortDescription": "A function that cancels the file upload."
  },
  "dxFileUploaderOptions.accept": {
    "shortDescription": "Specifies a file type or several types accepted by the UI component."
  },
  "dxFileUploaderOptions.allowCanceling": {
    "shortDescription": "Specifies if an end user can remove a file from the selection and interrupt uploading."
  },
  "dxFileUploaderOptions.allowedFileExtensions": {
    "shortDescription": "Restricts file extensions that can be uploaded to the server."
  },
  "dxFileUploaderOptions.chunkSize": {
    "shortDescription": "Specifies the chunk size in bytes. Applies only if [uploadMode](/api-reference/10%20UI%20Components/dxFileUploader/1%20Configuration/uploadMode.md '/Documentation/ApiReference/UI_Components/dxFileUploader/Configuration/#uploadMode') is *\"instantly*\" or *\"useButtons\"*. Requires a server that can process file chunks."
  },
  "dxFileUploaderOptions.dialogTrigger": {
    "shortDescription": "Specifies the HTML element which invokes the file upload dialog."
  },
  "dxFileUploaderOptions.dropZone": {
    "shortDescription": "Specifies the HTML element in which users can drag and drop files for upload."
  },
  "dxFileUploaderOptions.extendSelection": {
    "shortDescription": "Specifies whether or not an end user is allowed to add files to the current file's uploading list."
  },
  "dxFileUploaderOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxFileUploaderOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the **FileUploader** component changes the state of all its buttons when users hover over them."
  },
  "dxFileUploaderOptions.inputAttr": {
    "shortDescription": "Specifies the attributes to be passed on to the underlying `<input>` element of the `file` type."
  },
  "dxFileUploaderOptions.invalidFileExtensionMessage": {
    "shortDescription": "The text displayed when the extension of the file being uploaded is not an [allowed file extension](/api-reference/10%20UI%20Components/dxFileUploader/1%20Configuration/allowedFileExtensions.md '/Documentation/ApiReference/UI_Components/dxFileUploader/Configuration/#allowedFileExtensions')."
  },
  "dxFileUploaderOptions.invalidMaxFileSizeMessage": {
    "shortDescription": "The text displayed when the size of the file being uploaded is greater than the [maxFileSize](/api-reference/10%20UI%20Components/dxFileUploader/1%20Configuration/maxFileSize.md '/Documentation/ApiReference/UI_Components/dxFileUploader/Configuration/#maxFileSize')."
  },
  "dxFileUploaderOptions.invalidMinFileSizeMessage": {
    "shortDescription": "The text displayed when the size of the file being uploaded is less than the [minFileSize](/api-reference/10%20UI%20Components/dxFileUploader/1%20Configuration/minFileSize.md '/Documentation/ApiReference/UI_Components/dxFileUploader/Configuration/#minFileSize')."
  },
  "dxFileUploaderOptions.labelText": {
    "shortDescription": "Specifies the text displayed on the area to which an end user can drop a file."
  },
  "dxFileUploaderOptions.maxFileSize": {
    "shortDescription": "Specifies the maximum file size (in bytes) allowed for uploading. Applies only if [uploadMode](/api-reference/10%20UI%20Components/dxFileUploader/1%20Configuration/uploadMode.md '/Documentation/ApiReference/UI_Components/dxFileUploader/Configuration/#uploadMode') is *\"instantly*\" or *\"useButtons\"*."
  },
  "dxFileUploaderOptions.minFileSize": {
    "shortDescription": "Specifies the minimum file size (in bytes) allowed for uploading. Applies only if [uploadMode](/api-reference/10%20UI%20Components/dxFileUploader/1%20Configuration/uploadMode.md '/Documentation/ApiReference/UI_Components/dxFileUploader/Configuration/#uploadMode') is *\"instantly*\" or *\"useButtons\"*."
  },
  "dxFileUploaderOptions.multiple": {
    "shortDescription": "Specifies whether the UI component enables an end user to select a single file or multiple files."
  },
  "dxFileUploaderOptions.name": {
    "shortDescription": "Specifies the value passed to the **name** attribute of the underlying **input** element. Required to access uploaded files on the server."
  },
  "dxFileUploaderOptions.onBeforeSend": {
    "shortDescription": "A function that allows you to customize the request before it is sent to the server."
  },
  "dxFileUploaderOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxFileUploaderOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxFileUploaderOptions.onDropZoneEnter": {
    "shortDescription": "A function that is executed when the mouse enters a drop zone while dragging a file."
  },
  "dxFileUploaderOptions.onDropZoneLeave": {
    "shortDescription": "A function that is executed when the mouse leaves a drop zone as it drags a file."
  },
  "dxFileUploaderOptions.onFilesUploaded": {
    "shortDescription": "A function that is executed when the file upload process is complete."
  },
  "dxFileUploaderOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxFileUploaderOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxFileUploaderOptions.onProgress": {
    "shortDescription": "A function that is executed when a file segment is uploaded."
  },
  "dxFileUploaderOptions.onUploadAborted": {
    "shortDescription": "A function that is executed when the file upload is aborted."
  },
  "dxFileUploaderOptions.onUploaded": {
    "shortDescription": "A function that is executed when a file is successfully uploaded."
  },
  "dxFileUploaderOptions.onUploadError": {
    "shortDescription": "A function that is executed when an error occurs during the file upload."
  },
  "dxFileUploaderOptions.onUploadStarted": {
    "shortDescription": "A function that is executed when the file upload is started."
  },
  "dxFileUploaderOptions.onValueChanged": {
    "shortDescription": "A function that is executed when one or several files are added to or removed from the selection."
  },
  "dxFileUploaderOptions.progress": {
    "shortDescription": "Gets the current progress in percentages."
  },
  "dxFileUploaderOptions.readyToUploadMessage": {
    "shortDescription": "The message displayed by the UI component when it is ready to upload the specified files."
  },
  "dxFileUploaderOptions.selectButtonText": {
    "shortDescription": "The text displayed on the button that opens the file browser."
  },
  "dxFileUploaderOptions.showFileList": {
    "shortDescription": "Specifies whether or not the UI component displays the list of selected files."
  },
  "dxFileUploaderOptions.uploadAbortedMessage": {
    "shortDescription": "The message displayed by the UI component when the file upload is cancelled."
  },
  "dxFileUploaderOptions.uploadButtonText": {
    "shortDescription": "The text displayed on the button that starts uploading."
  },
  "dxFileUploaderOptions.uploadChunk": {
    "shortDescription": "A function that uploads a file in chunks."
  },
  "dxFileUploaderOptions.uploadCustomData": {
    "shortDescription": "Specifies custom data for the upload request."
  },
  "dxFileUploaderOptions.uploadedMessage": {
    "shortDescription": "The message displayed by the UI component when uploading is finished."
  },
  "dxFileUploaderOptions.uploadFailedMessage": {
    "shortDescription": "The message displayed by the UI component on uploading failure."
  },
  "dxFileUploaderOptions.uploadFile": {
    "shortDescription": "A function that uploads a file."
  },
  "dxFileUploaderOptions.uploadHeaders": {
    "shortDescription": "Specifies headers for the upload request."
  },
  "dxFileUploaderOptions.uploadMethod": {
    "shortDescription": "Specifies the method for the upload request."
  },
  "dxFileUploaderOptions.uploadMode": {
    "shortDescription": "Specifies how the UI component uploads files."
  },
  "dxFileUploaderOptions.uploadUrl": {
    "shortDescription": "Specifies a target Url for the upload request."
  },
  "dxFileUploaderOptions.validationMessageMode": {
    "shortDescription": "Specifies how the message about the [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that are not satisfied by this editor's value is displayed."
  },
  "dxFileUploaderOptions.validationMessagePosition": {
    "shortDescription": "Specifies the position of a validation message relative to the component. The validation message describes the [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that this component's value does not satisfy."
  },
  "dxFileUploaderOptions.value": {
    "shortDescription": "Specifies a <a href=\"http://www.w3.org/TR/FileAPI/#dfn-file\" target=\"_blank\">File</a> instance representing the selected file. Read-only when [uploadMode](/api-reference/10%20UI%20Components/dxFileUploader/1%20Configuration/uploadMode.md '/Documentation/ApiReference/UI_Components/dxFileUploader/Configuration/#uploadMode') is *\"useForm\"*."
  },
  "dxFilterBuilder": {
    "shortDescription": "The FilterBuilder UI component allows a user to build complex filter expressions with an unlimited number of filter conditions, combined by logical operations using the UI."
  },
  "dxFilterBuilder.editorPrepared": {
    "shortDescription": "Raised after an editor is created."
  },
  "dxFilterBuilder.editorPreparing": {
    "shortDescription": "Raised before an editor is created."
  },
  "dxFilterBuilder.getFilterExpression()": {
    "shortDescription": "Gets a filter expression that contains only operations supported by the **DataSource**."
  },
  "dxFilterBuilder.valueChanged": {
    "shortDescription": "Raised after the UI component's [value](/api-reference/10%20UI%20Components/dxFilterBuilder/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxFilterBuilder/Configuration/#value') is changed."
  },
  "dxFilterBuilderCustomOperation.calculateFilterExpression": {
    "shortDescription": "Specifies a function that returns a filter expression for this custom operation."
  },
  "dxFilterBuilderCustomOperation.caption": {
    "shortDescription": "Specifies the operation's caption."
  },
  "dxFilterBuilderCustomOperation.customizeText": {
    "shortDescription": "Customizes the field value's text representation."
  },
  "dxFilterBuilderCustomOperation.dataTypes": {
    "shortDescription": "Specifies for which data types the operation is available by default."
  },
  "dxFilterBuilderCustomOperation.editorTemplate": {
    "shortDescription": "Specifies a custom template for the UI component used to edit the field value."
  },
  "dxFilterBuilderCustomOperation.hasValue": {
    "shortDescription": "Specifies whether the operation can have a value. If it can, the editor is displayed."
  },
  "dxFilterBuilderCustomOperation.icon": {
    "shortDescription": "Specifies the icon that should represent the filter operation."
  },
  "dxFilterBuilderCustomOperation.name": {
    "shortDescription": "Specifies the operation's identifier."
  },
  "dxFilterBuilderField": {
    "shortDescription": "The FilterBuilder's field structure."
  },
  "dxFilterBuilderField.calculateFilterExpression": {
    "shortDescription": "Specifies the field's custom rules to filter data."
  },
  "dxFilterBuilderField.caption": {
    "shortDescription": "Specifies the data field's caption."
  },
  "dxFilterBuilderField.customizeText": {
    "shortDescription": "Customizes the input value's display text."
  },
  "dxFilterBuilderField.dataField": {
    "shortDescription": "Specifies the name of a field to be filtered."
  },
  "dxFilterBuilderField.dataType": {
    "shortDescription": "Casts field values to a specific data type."
  },
  "dxFilterBuilderField.defaultFilterOperation": {
    "shortDescription": "A default filter operation."
  },
  "dxFilterBuilderField.editorOptions": {
    "shortDescription": "Configures the UI component used to edit the field value."
  },
  "dxFilterBuilderField.editorTemplate": {
    "shortDescription": "Specifies the editor's custom template."
  },
  "dxFilterBuilderField.falseText": {
    "shortDescription": "Specifies the **false** value text. Applies only if [dataType](/api-reference/_hidden/dxFilterBuilderField/dataType.md '/Documentation/ApiReference/UI_Components/dxFilterBuilder/Configuration/fields/#dataType') is *\"boolean\"*."
  },
  "dxFilterBuilderField.filterOperations": {
    "shortDescription": "Specifies a set of available filter operations."
  },
  "dxFilterBuilderField.format": {
    "shortDescription": "Formats a value before it is displayed."
  },
  "dxFilterBuilderField.lookup": {
    "shortDescription": "Configures the lookup field."
  },
  "dxFilterBuilderField.lookup.allowClearing": {
    "shortDescription": "Specifies whether to display the Clear button in the lookup field while it is being edited."
  },
  "dxFilterBuilderField.lookup.dataSource": {
    "shortDescription": "Specifies the lookup data source."
  },
  "dxFilterBuilderField.lookup.displayExpr": {
    "shortDescription": "Specifies the data field whose values should be displayed."
  },
  "dxFilterBuilderField.lookup.valueExpr": {
    "shortDescription": "Specifies the data field whose values should be replaced with values from the [displayExpr](/api-reference/_hidden/dxFilterBuilderField/lookup/displayExpr.md '{basewidgetpath}/Configuration/fields/lookup/#displayExpr') field."
  },
  "dxFilterBuilderField.name": {
    "shortDescription": "Specifies the field's name. Use it to distinguish the field from other fields when they have identical [dataField](/api-reference/_hidden/dxFilterBuilderField/dataField.md '/Documentation/ApiReference/UI_Components/dxFilterBuilder/Configuration/fields/#dataField') values."
  },
  "dxFilterBuilderField.trueText": {
    "shortDescription": "Specifies the **true** value text. Applies only if [dataType](/api-reference/_hidden/dxFilterBuilderField/dataType.md '/Documentation/ApiReference/UI_Components/dxFilterBuilder/Configuration/fields/#dataType') is *\"boolean\"*."
  },
  "dxFilterBuilderOptions.allowHierarchicalFields": {
    "shortDescription": "Specifies whether the UI component can display hierarchical data fields."
  },
  "dxFilterBuilderOptions.customOperations": {
    "shortDescription": "Configures custom filter operations."
  },
  "dxFilterBuilderOptions.fields": {
    "shortDescription": "Configures fields."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions": {
    "shortDescription": "Specifies filter operation descriptions."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.between": {
    "shortDescription": "The *\"between\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.contains": {
    "shortDescription": "The *\"contains\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.endsWith": {
    "shortDescription": "The *\"endswith\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.equal": {
    "shortDescription": "The *\"=\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.greaterThan": {
    "shortDescription": "The *\">\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.greaterThanOrEqual": {
    "shortDescription": "The *\">=\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.isBlank": {
    "shortDescription": "The *\"isblank\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.isNotBlank": {
    "shortDescription": "The *\"isnotblank\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.lessThan": {
    "shortDescription": "The *\"<\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.lessThanOrEqual": {
    "shortDescription": "The *\"<=\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.notContains": {
    "shortDescription": "The *\"notcontains\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.notEqual": {
    "shortDescription": "The *\"<>\"* operation's description."
  },
  "dxFilterBuilderOptions.filterOperationDescriptions.startsWith": {
    "shortDescription": "The *\"startswith\"* operation's description."
  },
  "dxFilterBuilderOptions.groupOperationDescriptions": {
    "shortDescription": "Specifies group operation descriptions."
  },
  "dxFilterBuilderOptions.groupOperationDescriptions.and": {
    "shortDescription": "The *\"and\"* operation's description."
  },
  "dxFilterBuilderOptions.groupOperationDescriptions.notAnd": {
    "shortDescription": "The *\"notand\"* operation's description."
  },
  "dxFilterBuilderOptions.groupOperationDescriptions.notOr": {
    "shortDescription": "The *\"notor\"* operation's description."
  },
  "dxFilterBuilderOptions.groupOperationDescriptions.or": {
    "shortDescription": "The *\"or\"* operation's description."
  },
  "dxFilterBuilderOptions.groupOperations": {
    "shortDescription": "Specifies a set of available group operations."
  },
  "dxFilterBuilderOptions.maxGroupLevel": {
    "shortDescription": "Specifies groups' maximum nesting level."
  },
  "dxFilterBuilderOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxFilterBuilderOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxFilterBuilderOptions.onEditorPrepared": {
    "shortDescription": "A function that is executed after an editor is created."
  },
  "dxFilterBuilderOptions.onEditorPreparing": {
    "shortDescription": "A function that is executed before an editor is created."
  },
  "dxFilterBuilderOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxFilterBuilderOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxFilterBuilderOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxFilterBuilder/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxFilterBuilder/Configuration/#value') is changed."
  },
  "dxFilterBuilderOptions.value": {
    "shortDescription": "Allows you to specify a filter."
  },
  "dxForm": {
    "shortDescription": "The Form UI component represents fields of a data object as a collection of label-editor pairs. These pairs can be arranged in several groups, tabs and columns."
  },
  "dxForm.clear()": {
    "shortDescription": "Resets editor values to their default values."
  },
  "dxForm.editorEnterKey": {
    "shortDescription": "Raised when the Enter key has been pressed while an editor is focused."
  },
  "dxForm.fieldDataChanged": {
    "shortDescription": "Raised when the value of a [formData](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/formData.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#formData') object field is changed."
  },
  "dxForm.getButton(name)": {
    "shortDescription": "Gets a button's instance."
  },
  "dxForm.getEditor(dataField)": {
    "shortDescription": "Gets an editor instance. Takes effect only if the form item is visible."
  },
  "dxForm.itemOption(id)": {
    "shortDescription": "Gets a form item's configuration."
  },
  "dxForm.itemOption(id, option, value)": {
    "shortDescription": "Updates the value of a single item option."
  },
  "dxForm.itemOption(id, options)": {
    "shortDescription": "Updates the values of several item properties."
  },
  "dxForm.reset(editorsData)": {
    "shortDescription": "Resets editor values. Every editor attempts to obtain its new value from the argument list. If an editor is not included in the list, that editor resets to its initial value."
  },
  "dxForm.resetValues()": {
    "shortDescription": "Resets the editor's value to **undefined**.",
    "depNote": "Use the clear() method instead."
  },
  "dxForm.updateData(data)": {
    "shortDescription": "Merges the passed `data` object with [formData](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/formData.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#formData'). Matching properties in **formData** are overwritten and new properties added."
  },
  "dxForm.updateData(dataField, value)": {
    "shortDescription": "Updates a [formData](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/formData.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#formData') field and the corresponding editor."
  },
  "dxForm.updateDimensions()": {
    "shortDescription": "Updates the dimensions of the UI component contents."
  },
  "dxForm.validate()": {
    "shortDescription": "Validates the values of all editors on the form against the list of the [validation rules](/api-reference/10%20UI%20Components/dxForm/5%20Item%20Types/SimpleItem/validationRules.md '/Documentation/ApiReference/UI_Components/dxForm/Item_Types/SimpleItem/#validationRules') specified for each form item."
  },
  "dxFormButtonItem": {
    "shortDescription": "Configures a button form item."
  },
  "dxFormButtonItem.buttonOptions": {
    "shortDescription": "Configures the button."
  },
  "dxFormButtonItem.colSpan": {
    "shortDescription": "Specifies how many columns the item spans."
  },
  "dxFormButtonItem.cssClass": {
    "shortDescription": "Specifies a CSS class to be applied to the item."
  },
  "dxFormButtonItem.horizontalAlignment": {
    "shortDescription": "Specifies the button's horizontal alignment."
  },
  "dxFormButtonItem.itemType": {
    "shortDescription": "Specifies the item's type. Set it to *\"button\"* to create a button item."
  },
  "dxFormButtonItem.name": {
    "shortDescription": "Specifies the item's identifier."
  },
  "dxFormButtonItem.verticalAlignment": {
    "shortDescription": "Specifies the button's vertical alignment."
  },
  "dxFormButtonItem.visible": {
    "shortDescription": "Specifies whether the item is visible."
  },
  "dxFormButtonItem.visibleIndex": {
    "shortDescription": "Specifies the item's position regarding other items in a group, tab, or the whole UI component."
  },
  "dxFormEmptyItem": {
    "shortDescription": "This article describes configuration properties of an empty form item."
  },
  "dxFormEmptyItem.colSpan": {
    "shortDescription": "Specifies the number of columns spanned by the item."
  },
  "dxFormEmptyItem.cssClass": {
    "shortDescription": "Specifies a CSS class to be applied to the form item."
  },
  "dxFormEmptyItem.itemType": {
    "shortDescription": "Specifies the item's type. Set it to *\"empty\"* to create an empty item."
  },
  "dxFormEmptyItem.name": {
    "shortDescription": "Specifies a name that identifies the form item."
  },
  "dxFormEmptyItem.visible": {
    "shortDescription": "Specifies whether or not the current form item is visible."
  },
  "dxFormEmptyItem.visibleIndex": {
    "shortDescription": "Specifies the sequence number of the item in a form, group or tab."
  },
  "dxFormGroupItem": {
    "shortDescription": "This article describes configuration properties of a group form item."
  },
  "dxFormGroupItem.alignItemLabels": {
    "shortDescription": "Specifies whether or not all group item labels are aligned."
  },
  "dxFormGroupItem.caption": {
    "shortDescription": "Specifies the group caption."
  },
  "dxFormGroupItem.captionTemplate": {
    "shortDescription": "Specifies a template that can be used to replace group captions with custom content."
  },
  "dxFormGroupItem.colCount": {
    "shortDescription": "The count of columns in the group layout."
  },
  "dxFormGroupItem.colCountByScreen": {
    "shortDescription": "Specifies the relation between the [screen size qualifier](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/screenByWidth.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#screenByWidth') and the number of columns in the grouped layout."
  },
  "dxFormGroupItem.colSpan": {
    "shortDescription": "Specifies the number of columns spanned by the item."
  },
  "dxFormGroupItem.cssClass": {
    "shortDescription": "Specifies a CSS class to be applied to the form item."
  },
  "dxFormGroupItem.items": {
    "shortDescription": "Holds an array of form items displayed within the group."
  },
  "dxFormGroupItem.itemType": {
    "shortDescription": "Specifies the item's type. Set it to *\"group\"* to create a group item."
  },
  "dxFormGroupItem.name": {
    "shortDescription": "Specifies a name that identifies the form item."
  },
  "dxFormGroupItem.template": {
    "shortDescription": "A template to be used for rendering a group item."
  },
  "dxFormGroupItem.visible": {
    "shortDescription": "Specifies whether or not the current form item is visible."
  },
  "dxFormGroupItem.visibleIndex": {
    "shortDescription": "Specifies the sequence number of the item in a form, group or tab."
  },
  "dxFormOptions.alignItemLabels": {
    "shortDescription": "Specifies whether all item labels are aligned. Applies only to labels outside their editors (see [labelMode](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/labelMode.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#labelMode'))."
  },
  "dxFormOptions.alignItemLabelsInAllGroups": {
    "shortDescription": "Specifies whether item labels in all groups are aligned. Applies only to labels outside their editors (see [labelMode](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/labelMode.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#labelMode'))."
  },
  "dxFormOptions.colCount": {
    "shortDescription": "The count of columns in the form layout."
  },
  "dxFormOptions.colCountByScreen": {
    "shortDescription": "Specifies dependency between the screen factor and the count of columns in the form layout."
  },
  "dxFormOptions.customizeItem": {
    "shortDescription": "Specifies a function that customizes a form item after it has been created."
  },
  "dxFormOptions.formData": {
    "shortDescription": "Provides the Form's data. Gets updated every time form fields change."
  },
  "dxFormOptions.isDirty": {
    "shortDescription": "Specifies whether current editor values differ from initial values."
  },
  "dxFormOptions.items": {
    "shortDescription": "Holds an array of form items."
  },
  "dxFormOptions.labelLocation": {
    "shortDescription": "Specifies the location of a label against the editor. Applies only to labels outside their editors (see [labelMode](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/labelMode.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#labelMode'))."
  },
  "dxFormOptions.labelMode": {
    "shortDescription": "Specifies a display mode for [item labels](/api-reference/10%20UI%20Components/dxForm/5%20Item%20Types/SimpleItem/label '/Documentation/ApiReference/UI_Components/dxForm/Item_Types/SimpleItem/label/')."
  },
  "dxFormOptions.minColWidth": {
    "shortDescription": "The minimum column width used for calculating column count in the form layout. Applies only if [colCount](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/colCount.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#colCount') property is *\"auto\"*."
  },
  "dxFormOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxFormOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxFormOptions.onEditorEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while an editor is focused."
  },
  "dxFormOptions.onFieldDataChanged": {
    "shortDescription": "A function that is executed when the value of a [formData](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/formData.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#formData') object field is changed."
  },
  "dxFormOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxFormOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxFormOptions.optionalMark": {
    "shortDescription": "The text displayed for optional fields. Applies only if [showOptionalMark](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/showOptionalMark.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#showOptionalMark') is **true**."
  },
  "dxFormOptions.readOnly": {
    "shortDescription": "Specifies whether all editors on the form are read-only. Applies only to non-[templated](/api-reference/10%20UI%20Components/dxForm/5%20Item%20Types/SimpleItem/template.md '/Documentation/ApiReference/UI_Components/dxForm/Item_Types/SimpleItem/#template') items."
  },
  "dxFormOptions.requiredMark": {
    "shortDescription": "The text displayed for required fields."
  },
  "dxFormOptions.requiredMessage": {
    "shortDescription": "Specifies the message that is shown for end-users if a required field value is not specified."
  },
  "dxFormOptions.screenByWidth": {
    "shortDescription": "Specifies a function that categorizes screens by their width."
  },
  "dxFormOptions.scrollingEnabled": {
    "shortDescription": "A Boolean value specifying whether to enable or disable form scrolling."
  },
  "dxFormOptions.showColonAfterLabel": {
    "shortDescription": "Specifies whether a colon is displayed at the end of form labels. Applies only to labels outside their editors (see [labelMode](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/labelMode.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#labelMode'))."
  },
  "dxFormOptions.showOptionalMark": {
    "shortDescription": "Specifies whether or not the [optional mark](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/optionalMark.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#optionalMark') is displayed for optional fields."
  },
  "dxFormOptions.showRequiredMark": {
    "shortDescription": "Specifies whether or not the [required mark](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/requiredMark.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#requiredMark') is displayed for required fields."
  },
  "dxFormOptions.showValidationSummary": {
    "shortDescription": "Specifies whether or not the total validation summary is displayed on the form."
  },
  "dxFormOptions.validationGroup": {
    "shortDescription": "Gives a name to the internal validation group."
  },
  "dxFormSimpleItem": {
    "shortDescription": "This article describes configuration properties of a simple form item."
  },
  "dxFormSimpleItem.colSpan": {
    "shortDescription": "Specifies the number of columns spanned by the item."
  },
  "dxFormSimpleItem.cssClass": {
    "shortDescription": "Specifies a CSS class to be applied to the form item."
  },
  "dxFormSimpleItem.dataField": {
    "shortDescription": "Specifies the path to the [formData](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/formData.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#formData') object field bound to the current form item."
  },
  "dxFormSimpleItem.editorOptions": {
    "shortDescription": "Configures the form item's editor."
  },
  "dxFormSimpleItem.editorType": {
    "shortDescription": "Specifies which editor UI component is used to display and edit the form item value."
  },
  "dxFormSimpleItem.helpText": {
    "shortDescription": "Specifies the help text displayed for the current form item."
  },
  "dxFormSimpleItem.isRequired": {
    "shortDescription": "Specifies whether the current form item is required."
  },
  "dxFormSimpleItem.itemType": {
    "shortDescription": "Specifies the item's type. Set it to *\"simple\"* to create a simple item."
  },
  "dxFormSimpleItem.label": {
    "shortDescription": "Specifies properties for the form item label."
  },
  "dxFormSimpleItem.label.alignment": {
    "shortDescription": "Specifies the label's horizontal alignment. Applies only to labels outside their editors (see [labelMode](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/labelMode.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#labelMode'))."
  },
  "dxFormSimpleItem.label.location": {
    "shortDescription": "Specifies the location of a label against the editor. Applies only to labels outside their editors (see [labelMode](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/labelMode.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#labelMode'))."
  },
  "dxFormSimpleItem.label.showColon": {
    "shortDescription": "Specifies whether a colon is displayed at the end of the current label. Applies only to labels outside their editors (see [labelMode](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/labelMode.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#labelMode'))."
  },
  "dxFormSimpleItem.label.template": {
    "shortDescription": "A template that can be used to replace the label with custom content. Applies only to labels outside their editors (see [labelMode](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/labelMode.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#labelMode'))."
  },
  "dxFormSimpleItem.label.text": {
    "shortDescription": "Specifies the label text."
  },
  "dxFormSimpleItem.label.visible": {
    "shortDescription": "Controls the visibility of the label outside the editor."
  },
  "dxFormSimpleItem.name": {
    "shortDescription": "Specifies a name that identifies the form item."
  },
  "dxFormSimpleItem.template": {
    "shortDescription": "A template that can be used to replace the default editor with custom content."
  },
  "dxFormSimpleItem.validationRules": {
    "shortDescription": "An array of validation rules to be checked for the form item editor."
  },
  "dxFormSimpleItem.visible": {
    "shortDescription": "Specifies whether or not the current form item is visible."
  },
  "dxFormSimpleItem.visibleIndex": {
    "shortDescription": "Specifies the sequence number of the item in a form, group or tab."
  },
  "dxFormTabbedItem": {
    "shortDescription": "This article describes configuration properties of a tabbed form item. You can specify its options in the [tabPanelOptions](/api-reference/10%20UI%20Components/dxForm/5%20Item%20Types/TabbedItem/tabPanelOptions.md '/Documentation/ApiReference/UI_Components/dxForm/Item_Types/TabbedItem/#tabPanelOptions') object."
  },
  "dxFormTabbedItem.colSpan": {
    "shortDescription": "Specifies the number of columns spanned by the item."
  },
  "dxFormTabbedItem.cssClass": {
    "shortDescription": "Specifies a CSS class to be applied to the form item."
  },
  "dxFormTabbedItem.itemType": {
    "shortDescription": "Specifies the item's type. Set it to *\"tabbed\"* to create a tabbed item."
  },
  "dxFormTabbedItem.name": {
    "shortDescription": "Specifies a name that identifies the form item."
  },
  "dxFormTabbedItem.tabPanelOptions": {
    "shortDescription": "Holds a [configuration object](/api-reference/10%20UI%20Components/dxTabPanel/1%20Configuration '/Documentation/ApiReference/UI_Components/dxTabPanel/Configuration/') for the [TabPanel](/api-reference/10%20UI%20Components/dxTabPanel '/Documentation/ApiReference/UI_Components/dxTabPanel/') UI component used to display the current form item."
  },
  "dxFormTabbedItem.tabs": {
    "shortDescription": "An array of tab configuration objects."
  },
  "dxFormTabbedItem.tabs.alignItemLabels": {
    "shortDescription": "Specifies whether or not labels of items displayed within the current tab are aligned."
  },
  "dxFormTabbedItem.tabs.badge": {
    "shortDescription": "Specifies a badge text for the tab."
  },
  "dxFormTabbedItem.tabs.colCount": {
    "shortDescription": "The count of columns in the tab layout."
  },
  "dxFormTabbedItem.tabs.colCountByScreen": {
    "shortDescription": "Specifies the relation between the [screen size qualifier](/api-reference/10%20UI%20Components/dxForm/1%20Configuration/screenByWidth.md '/Documentation/ApiReference/UI_Components/dxForm/Configuration/#screenByWidth') and the number of columns in the tabbed layout."
  },
  "dxFormTabbedItem.tabs.disabled": {
    "shortDescription": "Specifies whether the tab responds to user interaction."
  },
  "dxFormTabbedItem.tabs.icon": {
    "shortDescription": "Specifies the icon to be displayed on the tab."
  },
  "dxFormTabbedItem.tabs.items": {
    "shortDescription": "Holds an array of form items displayed within the tab."
  },
  "dxFormTabbedItem.tabs.tabTemplate": {
    "shortDescription": "The template to be used for rendering the tab."
  },
  "dxFormTabbedItem.tabs.template": {
    "shortDescription": "The template to be used for rendering the tab content."
  },
  "dxFormTabbedItem.tabs.title": {
    "shortDescription": "Specifies the tab title."
  },
  "dxFormTabbedItem.visible": {
    "shortDescription": "Specifies whether or not the current form item is visible."
  },
  "dxFormTabbedItem.visibleIndex": {
    "shortDescription": "Specifies the sequence number of the item in a form, group or tab."
  },
  "dxFunnel": {
    "shortDescription": "The Funnel is a UI component that visualizes a value at different stages. It helps assess value changes throughout these stages and identify potential issues. The Funnel UI component conveys information using different interactive elements ([tooltips](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/tooltip '/Documentation/ApiReference/UI_Components/dxFunnel/Configuration/tooltip/'), [labels](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/label '/Documentation/ApiReference/UI_Components/dxFunnel/Configuration/label/'), [legend](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/legend '/Documentation/ApiReference/UI_Components/dxFunnel/Configuration/legend/')) and enables you to create not only a [funnel](https://js.devexpress.com/Demos/WidgetsGallery/Demo/Charts/FunnelChart), but also a [pyramid chart](https://js.devexpress.com/Demos/WidgetsGallery/Demo/Charts/PyramidChart)."
  },
  "dxFunnel.clearSelection()": {
    "shortDescription": "Cancels the selection of all funnel items."
  },
  "dxFunnel.getAllItems()": {
    "shortDescription": "Provides access to all funnel items."
  },
  "dxFunnel.hideTooltip()": {
    "shortDescription": "Hides all UI component tooltips."
  },
  "dxFunnel.hoverChanged": {
    "shortDescription": "Raised after the pointer enters or leaves a [funnel item](/concepts/05%20UI%20Components/Funnel/14%20Funnel%20Items/00%20Overview.md '/Documentation/Guide/UI_Components/Funnel/Funnel_Items/Overview/')."
  },
  "dxFunnel.itemClick": {
    "shortDescription": "Raised when a [funnel item](/concepts/05%20UI%20Components/Funnel/14%20Funnel%20Items/00%20Overview.md '/Documentation/Guide/UI_Components/Funnel/Funnel_Items/Overview/') is clicked or tapped."
  },
  "dxFunnel.legendClick": {
    "shortDescription": "Raised when a [legend item](/concepts/05%20UI%20Components/Funnel/35%20Legend/00%20Overview.md '/Documentation/Guide/UI_Components/Funnel/Legend/Overview/') is clicked or tapped."
  },
  "dxFunnel.selectionChanged": {
    "shortDescription": "Raised when a funnel item is selected or selection is canceled."
  },
  "dxFunnelItem": {
    "shortDescription": "This section describes the **Item** object, which represents a funnel item."
  },
  "dxFunnelItem.argument": {
    "shortDescription": "The item's argument."
  },
  "dxFunnelItem.data": {
    "shortDescription": "The item's original data object."
  },
  "dxFunnelItem.getColor()": {
    "shortDescription": "Gets the funnel item's color specified in the data source or palette."
  },
  "dxFunnelItem.hover(state)": {
    "shortDescription": "Changes the funnel item's hover state."
  },
  "dxFunnelItem.isHovered()": {
    "shortDescription": "Indicates whether the funnel item is in the hover state."
  },
  "dxFunnelItem.isSelected()": {
    "shortDescription": "Indicates whether the funnel item is selected."
  },
  "dxFunnelItem.percent": {
    "shortDescription": "The item's calculated percentage value."
  },
  "dxFunnelItem.select(state)": {
    "shortDescription": "Selects or cancels the funnel item's selection."
  },
  "dxFunnelItem.showTooltip()": {
    "shortDescription": "Shows the funnel item's tooltip."
  },
  "dxFunnelItem.value": {
    "shortDescription": "The item's value."
  },
  "dxFunnelLegend": {
    "shortDescription": "Configures the legend."
  },
  "dxFunnelOptions.adaptiveLayout": {
    "shortDescription": "Specifies adaptive layout properties."
  },
  "dxFunnelOptions.adaptiveLayout.height": {
    "shortDescription": "Specifies the minimum container height at which the layout begins to adapt."
  },
  "dxFunnelOptions.adaptiveLayout.keepLabels": {
    "shortDescription": "Specifies whether [item labels](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/label '{basewidgetpath}/Configuration/label/') should be kept when the UI component adapts the layout."
  },
  "dxFunnelOptions.adaptiveLayout.width": {
    "shortDescription": "Specifies the minimum container width at which the layout begins to adapt."
  },
  "dxFunnelOptions.algorithm": {
    "shortDescription": "Specifies the algorithm for building the funnel."
  },
  "dxFunnelOptions.argumentField": {
    "shortDescription": "Specifies which data source field provides arguments for funnel items. The argument identifies a funnel item and represents it on the [legend](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/legend '/Documentation/ApiReference/UI_Components/dxFunnel/Configuration/legend/')."
  },
  "dxFunnelOptions.colorField": {
    "shortDescription": "Specifies which data source field provides colors for funnel items. If this field is absent, the [palette](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/palette.md '/Documentation/ApiReference/UI_Components/dxFunnel/Configuration/#palette') provides the colors."
  },
  "dxFunnelOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxFunnelOptions.hoverEnabled": {
    "shortDescription": "Specifies whether funnel items change their style when a user pauses on them."
  },
  "dxFunnelOptions.inverted": {
    "shortDescription": "Turns the funnel upside down."
  },
  "dxFunnelOptions.item": {
    "shortDescription": "Configures funnel items' appearance."
  },
  "dxFunnelOptions.item.border": {
    "shortDescription": "Configures a funnel item's border."
  },
  "dxFunnelOptions.item.border.color": {
    "shortDescription": "Colors a funnel item's border."
  },
  "dxFunnelOptions.item.border.visible": {
    "shortDescription": "Makes a funnel item's border visible."
  },
  "dxFunnelOptions.item.border.width": {
    "shortDescription": "Sets the width of a funnel item's border in pixels."
  },
  "dxFunnelOptions.item.hoverStyle": {
    "shortDescription": "Configures a funnel item's appearance when a user presses the item or hovers the mouse pointer over it."
  },
  "dxFunnelOptions.item.hoverStyle.border": {
    "shortDescription": "Configures a funnel item's border appearance when a user presses the item or hovers the mouse pointer over it."
  },
  "dxFunnelOptions.item.hoverStyle.border.color": {
    "shortDescription": "Colors a funnel item's border when a user presses the item or hovers the mouse pointer over it."
  },
  "dxFunnelOptions.item.hoverStyle.border.visible": {
    "shortDescription": "Shows a funnel item's border when a user presses the item or hovers the mouse pointer over it."
  },
  "dxFunnelOptions.item.hoverStyle.border.width": {
    "shortDescription": "Thickens a funnel item's border when a user presses the item or hovers the mouse pointer over it."
  },
  "dxFunnelOptions.item.hoverStyle.hatching": {
    "shortDescription": "Applies hatching to a funnel item when a user presses the item or hovers the mouse pointer over it."
  },
  "dxFunnelOptions.item.hoverStyle.hatching.direction": {
    "shortDescription": "Specifies hatching line direction."
  },
  "dxFunnelOptions.item.hoverStyle.hatching.opacity": {
    "shortDescription": "Specifies the transparency of hatching lines."
  },
  "dxFunnelOptions.item.hoverStyle.hatching.step": {
    "shortDescription": "Specifies the distance between two side-by-side hatching lines in pixels."
  },
  "dxFunnelOptions.item.hoverStyle.hatching.width": {
    "shortDescription": "Specifies hatching lines' width in pixels."
  },
  "dxFunnelOptions.item.selectionStyle": {
    "shortDescription": "Configures a funnel item's appearance when a user selects it."
  },
  "dxFunnelOptions.item.selectionStyle.border": {
    "shortDescription": "Configures a funnel item's border appearance when a user selects this item."
  },
  "dxFunnelOptions.item.selectionStyle.border.color": {
    "shortDescription": "Colors the selected funnel item's border."
  },
  "dxFunnelOptions.item.selectionStyle.border.visible": {
    "shortDescription": "Shows the selected funnel item's border."
  },
  "dxFunnelOptions.item.selectionStyle.border.width": {
    "shortDescription": "Thickens the selected funnel item's border."
  },
  "dxFunnelOptions.item.selectionStyle.hatching": {
    "shortDescription": "Applies hatching to a selected funnel item."
  },
  "dxFunnelOptions.item.selectionStyle.hatching.direction": {
    "shortDescription": "Specifies hatching line direction."
  },
  "dxFunnelOptions.item.selectionStyle.hatching.opacity": {
    "shortDescription": "Specifies hatching line transparency."
  },
  "dxFunnelOptions.item.selectionStyle.hatching.step": {
    "shortDescription": "Specifies the distance between two side-by-side hatching lines in pixels."
  },
  "dxFunnelOptions.item.selectionStyle.hatching.width": {
    "shortDescription": "Specifies hatching line width in pixels."
  },
  "dxFunnelOptions.label": {
    "shortDescription": "Configures funnel item labels."
  },
  "dxFunnelOptions.label.backgroundColor": {
    "shortDescription": "Colors the labels' background. The default color is inherited from the funnel items."
  },
  "dxFunnelOptions.label.border": {
    "shortDescription": "Configures the label borders."
  },
  "dxFunnelOptions.label.border.color": {
    "shortDescription": "Colors the label borders."
  },
  "dxFunnelOptions.label.border.dashStyle": {
    "shortDescription": "Sets the label border dash style."
  },
  "dxFunnelOptions.label.border.visible": {
    "shortDescription": "Shows the label borders."
  },
  "dxFunnelOptions.label.border.width": {
    "shortDescription": "Specifies the label border width."
  },
  "dxFunnelOptions.label.connector": {
    "shortDescription": "Configures label connectors."
  },
  "dxFunnelOptions.label.connector.color": {
    "shortDescription": "Colors label connectors."
  },
  "dxFunnelOptions.label.connector.opacity": {
    "shortDescription": "Specifies the transparency of label connectors."
  },
  "dxFunnelOptions.label.connector.visible": {
    "shortDescription": "Shows label connectors."
  },
  "dxFunnelOptions.label.connector.width": {
    "shortDescription": "Specifies the label connector width in pixels."
  },
  "dxFunnelOptions.label.customizeText": {
    "shortDescription": "Customizes labels' text."
  },
  "dxFunnelOptions.label.font": {
    "shortDescription": "Specifies labels' font properties."
  },
  "dxFunnelOptions.label.format": {
    "shortDescription": "Formats the item value before displaying it in the label."
  },
  "dxFunnelOptions.label.horizontalAlignment": {
    "shortDescription": "Specifies labels' position in relation to the funnel items."
  },
  "dxFunnelOptions.label.horizontalOffset": {
    "shortDescription": "Moves labels from their initial positions."
  },
  "dxFunnelOptions.label.position": {
    "shortDescription": "Specifies whether to display labels inside or outside funnel items or arrange them in columns."
  },
  "dxFunnelOptions.label.showForZeroValues": {
    "shortDescription": "Specifies whether to show labels for items with zero value."
  },
  "dxFunnelOptions.label.textOverflow": {
    "shortDescription": "Specifies what to do with label texts that overflow the allocated space after applying [wordWrap](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/label/wordWrap.md '/Documentation/ApiReference/UI_Components/dxFunnel/Configuration/label/#wordWrap'): hide, truncate them and display an ellipsis, or do nothing."
  },
  "dxFunnelOptions.label.visible": {
    "shortDescription": "Controls the labels' visibility."
  },
  "dxFunnelOptions.label.wordWrap": {
    "shortDescription": "Specifies how to wrap label texts if they do not fit into a single line."
  },
  "dxFunnelOptions.legend": {
    "shortDescription": "Configures the legend."
  },
  "dxFunnelOptions.legend.customizeHint": {
    "shortDescription": "Specifies the hint that appears when a user hovers the mouse pointer over a legend item."
  },
  "dxFunnelOptions.legend.customizeItems": {
    "shortDescription": "Allows you to change the order, text, and visibility of legend items."
  },
  "dxFunnelOptions.legend.customizeText": {
    "shortDescription": "Customizes the text displayed by legend items."
  },
  "dxFunnelOptions.legend.markerTemplate": {
    "shortDescription": "Specifies an SVG element that serves as a custom legend item marker."
  },
  "dxFunnelOptions.legend.visible": {
    "shortDescription": "Specifies whether the legend is visible."
  },
  "dxFunnelOptions.neckHeight": {
    "shortDescription": "Specifies the ratio between the height of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the [algorithm](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/algorithm.md '/Documentation/ApiReference/UI_Components/dxFunnel/Configuration/#algorithm') is *\"dynamicHeight\"*."
  },
  "dxFunnelOptions.neckWidth": {
    "shortDescription": "Specifies the ratio between the width of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the [algorithm](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/algorithm.md '/Documentation/ApiReference/UI_Components/dxFunnel/Configuration/#algorithm') is *\"dynamicHeight\"*."
  },
  "dxFunnelOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxFunnelOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxFunnelOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxFunnelOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxFunnelOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxFunnelOptions.onHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a [funnel item](/concepts/05%20UI%20Components/Funnel/14%20Funnel%20Items/00%20Overview.md '/Documentation/Guide/UI_Components/Funnel/Funnel_Items/Overview/')."
  },
  "dxFunnelOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxFunnelOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxFunnelOptions.onItemClick": {
    "shortDescription": "A function that is executed when a [funnel item](/concepts/05%20UI%20Components/Funnel/14%20Funnel%20Items/00%20Overview.md '/Documentation/Guide/UI_Components/Funnel/Funnel_Items/Overview/') is clicked or tapped."
  },
  "dxFunnelOptions.onLegendClick": {
    "shortDescription": "A function that is executed when a [legend item](/concepts/05%20UI%20Components/Funnel/35%20Legend/00%20Overview.md '/Documentation/Guide/UI_Components/Funnel/Legend/Overview/') is clicked or tapped."
  },
  "dxFunnelOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxFunnelOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a funnel item is selected or selection is canceled."
  },
  "dxFunnelOptions.palette": {
    "shortDescription": "Sets the palette to be used to colorize funnel items."
  },
  "dxFunnelOptions.paletteExtensionMode": {
    "shortDescription": "Specifies what to do with colors in the [palette](/api-reference/10%20UI%20Components/dxFunnel/1%20Configuration/palette.md '{basewidgetpath}/Configuration/#palette') when their number is less than the number of funnel items."
  },
  "dxFunnelOptions.resolveLabelOverlapping": {
    "shortDescription": "Specifies how [item labels](/concepts/05%20UI%20Components/Funnel/17%20Item%20Labels/00%20Overview.md '/Documentation/Guide/UI_Components/Funnel/Item_Labels/Overview/') should behave when they overlap."
  },
  "dxFunnelOptions.selectionMode": {
    "shortDescription": "Specifies whether a single or multiple funnel items can be in the selected state at a time. Assigning *\"none\"* disables the selection feature."
  },
  "dxFunnelOptions.sortData": {
    "shortDescription": "Specifies whether to sort funnel items."
  },
  "dxFunnelOptions.tooltip": {
    "shortDescription": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer."
  },
  "dxFunnelOptions.tooltip.contentTemplate": {
    "shortDescription": "Specifies a custom template for a tooltip."
  },
  "dxFunnelOptions.tooltip.customizeTooltip": {
    "shortDescription": "Customizes a specific tooltip's appearance."
  },
  "dxFunnelOptions.valueField": {
    "shortDescription": "Specifies which data source field provides values for funnel items. The value defines a funnel item's area."
  },
  "dxFunnelTooltip": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGallery": {
    "shortDescription": "The Gallery is a UI component that displays a collection of images in a carousel. The UI component is supplied with various navigation controls that allow a user to switch between images."
  },
  "dxGallery.goToItem(itemIndex, animation)": {
    "shortDescription": "Shows a specific image."
  },
  "dxGallery.nextItem(animation)": {
    "shortDescription": "Shows the next image."
  },
  "dxGallery.prevItem(animation)": {
    "shortDescription": "Shows the previous image."
  },
  "dxGallery.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGalleryItem.imageAlt": {
    "shortDescription": "Specifies the text passed to the **alt** attribute of the image markup element."
  },
  "dxGalleryItem.imageSrc": {
    "shortDescription": "Specifies the URL of the image displayed by the item."
  },
  "dxGalleryItem.visible": {
    "shortDescription": "Specifies whether or not a UI component item must be displayed."
  },
  "dxGalleryOptions.activeStateEnabled": {
    "shortDescription": "A Boolean value specifying whether or not the UI component changes its state when interacting with a user."
  },
  "dxGalleryOptions.animationDuration": {
    "shortDescription": "The time, in milliseconds, spent on slide animation."
  },
  "dxGalleryOptions.animationEnabled": {
    "shortDescription": "Specifies whether or not to animate the displayed item change."
  },
  "dxGalleryOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxGalleryOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxGalleryOptions.indicatorEnabled": {
    "shortDescription": "A Boolean value specifying whether or not to allow users to switch between items by clicking an indicator."
  },
  "dxGalleryOptions.initialItemWidth": {
    "shortDescription": "Specifies the width of an area used to display a single image."
  },
  "dxGalleryOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxGalleryOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "dxGalleryOptions.loop": {
    "shortDescription": "A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped."
  },
  "dxGalleryOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "dxGalleryOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxGalleryOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxGalleryOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxGalleryOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxGalleryOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxGalleryOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxGalleryOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxGalleryOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxGalleryOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a collection item is selected or selection is canceled."
  },
  "dxGalleryOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGalleryOptions.selectedIndex": {
    "shortDescription": "The index of the currently active gallery item."
  },
  "dxGalleryOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxGalleryOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxGalleryOptions.showIndicator": {
    "shortDescription": "A Boolean value specifying whether or not to display an indicator that points to the selected gallery item."
  },
  "dxGalleryOptions.showNavButtons": {
    "shortDescription": "A Boolean value that specifies the availability of the \"Forward\" and \"Back\" navigation buttons."
  },
  "dxGalleryOptions.slideshowDelay": {
    "shortDescription": "The time interval in milliseconds, after which the gallery switches to the next item."
  },
  "dxGalleryOptions.stretchImages": {
    "shortDescription": "Specifies if the UI component stretches images to fit the total gallery width."
  },
  "dxGalleryOptions.swipeEnabled": {
    "shortDescription": "A Boolean value specifying whether or not to allow users to switch between items by swiping."
  },
  "dxGalleryOptions.wrapAround": {
    "shortDescription": "Specifies whether or not to display parts of previous and next images along the sides of the current image."
  },
  "dxGantt": {
    "shortDescription": "The Gantt is a UI component that displays the task flow and dependencies between tasks."
  },
  "dxGantt.assignResourceToTask(resourceKey, taskKey)": {
    "shortDescription": "Assigns a resource to a task."
  },
  "dxGantt.collapseAll()": {
    "shortDescription": "Collapses all tasks."
  },
  "dxGantt.collapseTask(key)": {
    "shortDescription": "Collapses a task."
  },
  "dxGantt.contextMenuPreparing": {
    "shortDescription": "Raised before the context menu is rendered."
  },
  "dxGantt.customCommand": {
    "shortDescription": "Raised after a custom command item was clicked."
  },
  "dxGantt.deleteDependency(key)": {
    "shortDescription": "Deletes a dependency."
  },
  "dxGantt.deleteResource(key)": {
    "shortDescription": "Deletes a resource."
  },
  "dxGantt.deleteTask(key)": {
    "shortDescription": "Deletes a task."
  },
  "dxGantt.dependencyDeleted": {
    "shortDescription": "Raised when a dependency is deleted."
  },
  "dxGantt.dependencyDeleting": {
    "shortDescription": "Raised before a dependency is deleted."
  },
  "dxGantt.dependencyInserted": {
    "shortDescription": "Raised when a dependency is inserted."
  },
  "dxGantt.dependencyInserting": {
    "shortDescription": "Raised before a dependency is inserted."
  },
  "dxGantt.expandAll()": {
    "shortDescription": "Expands all tasks."
  },
  "dxGantt.expandAllToLevel(level)": {
    "shortDescription": "Expands all tasks down to the specified hierarchical level."
  },
  "dxGantt.expandTask(key)": {
    "shortDescription": "Expands a task."
  },
  "dxGantt.expandToTask(key)": {
    "shortDescription": "Expands a task's parent tasks."
  },
  "dxGantt.getDependencyData(key)": {
    "shortDescription": "Gets the dependency data."
  },
  "dxGantt.getResourceAssignmentData(key)": {
    "shortDescription": "Gets the resource assignment data."
  },
  "dxGantt.getResourceData(key)": {
    "shortDescription": "Gets the resource data."
  },
  "dxGantt.getTaskData(key)": {
    "shortDescription": "Gets the task data."
  },
  "dxGantt.getTaskResources(key)": {
    "shortDescription": "Gets resources assigned to a task."
  },
  "dxGantt.getVisibleDependencyKeys()": {
    "shortDescription": "Gets the keys of the visible dependencies."
  },
  "dxGantt.getVisibleResourceAssignmentKeys()": {
    "shortDescription": "Gets the keys of the visible resource assignments."
  },
  "dxGantt.getVisibleResourceKeys()": {
    "shortDescription": "Gets the keys of the visible resources."
  },
  "dxGantt.getVisibleTaskKeys()": {
    "shortDescription": "Gets the keys of the visible tasks."
  },
  "dxGantt.insertDependency(data)": {
    "shortDescription": "Inserts a new dependency."
  },
  "dxGantt.insertResource(data, taskKeys)": {
    "shortDescription": "Inserts a new resource."
  },
  "dxGantt.insertTask(data)": {
    "shortDescription": "Inserts a new task."
  },
  "dxGantt.refresh()": {
    "shortDescription": "Reloads data and repaints the Gantt component."
  },
  "dxGantt.resourceAssigned": {
    "shortDescription": "Raised when a resource is assigned to a task."
  },
  "dxGantt.resourceAssigning": {
    "shortDescription": "Raised before a resource is assigned to a task."
  },
  "dxGantt.resourceDeleted": {
    "shortDescription": "Raised when a resource is deleted."
  },
  "dxGantt.resourceDeleting": {
    "shortDescription": "Raised before a resource is deleted."
  },
  "dxGantt.resourceInserted": {
    "shortDescription": "Raised when a resource is inserted."
  },
  "dxGantt.resourceInserting": {
    "shortDescription": "Raised before a resource is inserted."
  },
  "dxGantt.resourceManagerDialogShowing": {
    "shortDescription": "Raised before the Resource Manager dialog is shown."
  },
  "dxGantt.resourceUnassigned": {
    "shortDescription": "Raised when a resource is unassigned from a task."
  },
  "dxGantt.resourceUnassigning": {
    "shortDescription": "Raised before a resource is unassigned from a task."
  },
  "dxGantt.scaleCellPrepared": {
    "shortDescription": "Raised before a scale cell is prepared."
  },
  "dxGantt.scrollToDate(date)": {
    "shortDescription": "Scrolls the Gantt chart to the specified date."
  },
  "dxGantt.selectionChanged": {
    "shortDescription": "Raised after users select a task or clear its selection."
  },
  "dxGantt.showDependencies(value)": {
    "shortDescription": "Shows or hides [dependencies](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/dependencies '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/dependencies/') between tasks."
  },
  "dxGantt.showResourceManagerDialog()": {
    "shortDescription": "Invokes the \"Resource Manager\" dialog."
  },
  "dxGantt.showResources(value)": {
    "shortDescription": "Shows or hides task [resources](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/resources '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/resources/')."
  },
  "dxGantt.showTaskDetailsDialog(taskKey)": {
    "shortDescription": "Invokes the \"Task Details\" dialog."
  },
  "dxGantt.taskClick": {
    "shortDescription": "Raised when a user clicks a task."
  },
  "dxGantt.taskDblClick": {
    "shortDescription": "Raised when a user double-clicks a task."
  },
  "dxGantt.taskDeleted": {
    "shortDescription": "Raised when a task is deleted."
  },
  "dxGantt.taskDeleting": {
    "shortDescription": "Raised before a task is deleted."
  },
  "dxGantt.taskEditDialogShowing": {
    "shortDescription": "Raised before the edit dialog is shown."
  },
  "dxGantt.taskInserted": {
    "shortDescription": "Raised when a task is inserted."
  },
  "dxGantt.taskInserting": {
    "shortDescription": "Raised before a task is inserted."
  },
  "dxGantt.taskMoving": {
    "shortDescription": "Raised before a task is moved."
  },
  "dxGantt.taskUpdated": {
    "shortDescription": "Raised when a task is updated."
  },
  "dxGantt.taskUpdating": {
    "shortDescription": "Raised before a task is updated."
  },
  "dxGantt.unassignAllResourcesFromTask(taskKey)": {
    "shortDescription": "Removes all resources from the task."
  },
  "dxGantt.unassignResourceFromTask(resourceKey, taskKey)": {
    "shortDescription": "Removes a resource from the task."
  },
  "dxGantt.updateDimensions()": {
    "shortDescription": "Updates the dimensions of the UI component contents."
  },
  "dxGantt.updateTask(key, data)": {
    "shortDescription": "Updates the task data."
  },
  "dxGantt.zoomIn()": {
    "shortDescription": "Zooms in the Gantt chart."
  },
  "dxGantt.zoomOut()": {
    "shortDescription": "Zooms out the Gantt chart."
  },
  "dxGanttColumn": {
    "shortDescription": "Configures the column."
  },
  "dxGanttColumn.allowEditing": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.allowFixing": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.allowHiding": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.allowReordering": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.allowResizing": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.allowSearch": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.buttons": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.editCellTemplate": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.editorOptions": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.fixed": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.fixedPosition": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.formItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.hidingPriority": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.isBand": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.lookup": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.name": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.ownerBand": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.renderAsync": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.setCellValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.showEditorAlways": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.showInColumnChooser": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.type": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttColumn.validationRules": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxGanttContextMenu": {
    "shortDescription": "Configures the context menu."
  },
  "dxGanttContextMenu.enabled": {
    "shortDescription": "Specifies whether the context menu is enabled in the UI component."
  },
  "dxGanttContextMenu.items": {
    "shortDescription": "Configures context menu item settings."
  },
  "dxGanttContextMenuItem": {
    "shortDescription": "Configures the context menu item."
  },
  "dxGanttContextMenuItem.name": {
    "shortDescription": "Specifies the context menu item name."
  },
  "dxGanttFilterRow": {
    "shortDescription": "Configures the filter row."
  },
  "dxGanttFilterRow.betweenEndText": {
    "shortDescription": "Specifies the null text for the editor that sets the end of a range for the \"between\" filter operation."
  },
  "dxGanttFilterRow.betweenStartText": {
    "shortDescription": "Specifies the null text for the editor that sets the start of a range for the \"between\" filter operation."
  },
  "dxGanttFilterRow.operationDescriptions": {
    "shortDescription": "Specifies descriptions for filter operations in the filter list."
  },
  "dxGanttFilterRow.resetOperationText": {
    "shortDescription": "Specifies text for the \"reset\" operation."
  },
  "dxGanttFilterRow.showAllText": {
    "shortDescription": "Specifies text for the \"All\" filter operation."
  },
  "dxGanttFilterRow.showOperationChooser": {
    "shortDescription": "Specifies whether to display filter icons."
  },
  "dxGanttFilterRow.visible": {
    "shortDescription": "Specifies whether the filter row is visible."
  },
  "dxGanttFilterRowOperationDescriptions": {
    "shortDescription": "Contains descriptions for filter operations in the filter list."
  },
  "dxGanttFilterRowOperationDescriptions.between": {
    "shortDescription": "Text for the \"Between\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.contains": {
    "shortDescription": "Text for the \"Contains\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.endsWith": {
    "shortDescription": "Text for the \"Ends with\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.equal": {
    "shortDescription": "Text for the \"Equals\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.greaterThan": {
    "shortDescription": "Text for the \"Greater than\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.greaterThanOrEqual": {
    "shortDescription": "Text for the \"Greater than or equal to\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.lessThan": {
    "shortDescription": "Text for the \"Less than\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.lessThanOrEqual": {
    "shortDescription": "Text for the \"Less than or equal to\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.notContains": {
    "shortDescription": "Text for the \"Does not contain\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.notEqual": {
    "shortDescription": "Text for the \"Does not equal\" operation."
  },
  "dxGanttFilterRowOperationDescriptions.startsWith": {
    "shortDescription": "Text for the \"Starts with\" operation."
  },
  "dxGanttHeaderFilter": {
    "shortDescription": "Configures the header filter."
  },
  "dxGanttHeaderFilter.allowSearch": {
    "shortDescription": "Specifies whether to enable searching in the header filter.",
    "depNote": "Use [search.enabled](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/enabled.md '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/headerFilter/search/#enabled') instead."
  },
  "dxGanttHeaderFilter.allowSelectAll": {
    "shortDescription": "Specifies whether a \"Select All\" option is available to users."
  },
  "dxGanttHeaderFilter.height": {
    "shortDescription": "Specifies the height of the popup window that contains values for filtering."
  },
  "dxGanttHeaderFilter.search": {
    "shortDescription": "Configures the header filter's search functionality."
  },
  "dxGanttHeaderFilter.searchTimeout": {
    "shortDescription": "Specifies a delay in milliseconds between typing a search string and the search execution.",
    "depNote": "Use [search.timeout](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/timeout.md '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/headerFilter/search/#timeout') instead."
  },
  "dxGanttHeaderFilter.texts": {
    "shortDescription": "Contains properties that specify text for various elements of the popup window."
  },
  "dxGanttHeaderFilter.visible": {
    "shortDescription": "Specifies whether to show header filter icons."
  },
  "dxGanttHeaderFilter.width": {
    "shortDescription": "Specifies the width of the popup window that contains values for filtering."
  },
  "dxGanttHeaderFilterTexts.cancel": {
    "shortDescription": "Specifies text for the \"Cancel\" button in the popup window."
  },
  "dxGanttHeaderFilterTexts.emptyValue": {
    "shortDescription": "Specifies text for the \"(Blank)\" item in the popup window."
  },
  "dxGanttHeaderFilterTexts.ok": {
    "shortDescription": "Specifies text for the \"OK\" button in the popup window."
  },
  "dxGanttOptions.allowSelection": {
    "shortDescription": "Specifies whether users can select tasks in the Gantt."
  },
  "dxGanttOptions.columns": {
    "shortDescription": "An array of columns in the Gantt."
  },
  "dxGanttOptions.contextMenu": {
    "shortDescription": "Configures the context menu settings."
  },
  "dxGanttOptions.dependencies": {
    "shortDescription": "Configures dependencies."
  },
  "dxGanttOptions.dependencies.dataSource": {
    "shortDescription": "Binds the UI component to the data source which contains dependencies."
  },
  "dxGanttOptions.dependencies.keyExpr": {
    "shortDescription": "Specifies the data field that provides keys for dependencies."
  },
  "dxGanttOptions.dependencies.predecessorIdExpr": {
    "shortDescription": "Specifies the data field that provides predecessor IDs."
  },
  "dxGanttOptions.dependencies.successorIdExpr": {
    "shortDescription": "Specifies the data field that provides successor IDs."
  },
  "dxGanttOptions.dependencies.typeExpr": {
    "shortDescription": "Specifies the data field that provides dependency types."
  },
  "dxGanttOptions.editing": {
    "shortDescription": "Configures edit properties."
  },
  "dxGanttOptions.editing.allowDependencyAdding": {
    "shortDescription": "Specifies whether a user can add [dependencies](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/dependencies '{basewidgetpath}/Configuration/#dependencies')."
  },
  "dxGanttOptions.editing.allowDependencyDeleting": {
    "shortDescription": "Specifies whether a user can delete [dependencies](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/dependencies '{basewidgetpath}/Configuration/#dependencies')."
  },
  "dxGanttOptions.editing.allowResourceAdding": {
    "shortDescription": "Specifies whether a user can add [resources](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/resources '{basewidgetpath}/Configuration/#resources').\n[tasks](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/tasks '{basewidgetpath}/Configuration/#tasks')."
  },
  "dxGanttOptions.editing.allowResourceDeleting": {
    "shortDescription": "Specifies whether a user can delete [resources](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/resources '{basewidgetpath}/Configuration/#resources')."
  },
  "dxGanttOptions.editing.allowResourceUpdating": {
    "shortDescription": "For internal use only."
  },
  "dxGanttOptions.editing.allowTaskAdding": {
    "shortDescription": "Specifies whether a user can add [tasks](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/tasks '{basewidgetpath}/Configuration/#tasks')."
  },
  "dxGanttOptions.editing.allowTaskDeleting": {
    "shortDescription": "Specifies whether a user can delete [tasks](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/tasks '{basewidgetpath}/Configuration/#tasks')."
  },
  "dxGanttOptions.editing.allowTaskResourceUpdating": {
    "shortDescription": "Specifies whether users can update a [task's resources](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/resources '{basewidgetpath}/Configuration/#resources')."
  },
  "dxGanttOptions.editing.allowTaskUpdating": {
    "shortDescription": "Specifies whether a user can update [tasks](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/tasks '{basewidgetpath}/Configuration/#tasks')."
  },
  "dxGanttOptions.editing.enabled": {
    "shortDescription": "Specifies whether a user can edit tasks, resources and dependencies."
  },
  "dxGanttOptions.endDateRange": {
    "shortDescription": "Specifies the end date of the date interval in the Gantt chart."
  },
  "dxGanttOptions.filterRow": {
    "shortDescription": "Configures filter row settings."
  },
  "dxGanttOptions.firstDayOfWeek": {
    "shortDescription": "Specifies the first day of a week."
  },
  "dxGanttOptions.headerFilter": {
    "shortDescription": "Configures the header filter settings."
  },
  "dxGanttOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxGanttOptions.onContextMenuPreparing": {
    "shortDescription": "A function that is executed before the context menu is rendered."
  },
  "dxGanttOptions.onCustomCommand": {
    "shortDescription": "A function that is executed after a custom command item was clicked. Allows you to implement a custom command's functionality."
  },
  "dxGanttOptions.onDependencyDeleted": {
    "shortDescription": "A function that is executed when a dependency is deleted."
  },
  "dxGanttOptions.onDependencyDeleting": {
    "shortDescription": "A function that is executed before a dependency is deleted."
  },
  "dxGanttOptions.onDependencyInserted": {
    "shortDescription": "A function that is executed when a dependency is inserted."
  },
  "dxGanttOptions.onDependencyInserting": {
    "shortDescription": "A function that is executed before a dependency is inserted."
  },
  "dxGanttOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxGanttOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxGanttOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxGanttOptions.onResourceAssigned": {
    "shortDescription": "A function that is executed when a resource is assigned to a task."
  },
  "dxGanttOptions.onResourceAssigning": {
    "shortDescription": "A function that is executed before a resource is assigned to a task."
  },
  "dxGanttOptions.onResourceDeleted": {
    "shortDescription": "A function that is executed when a resource is deleted."
  },
  "dxGanttOptions.onResourceDeleting": {
    "shortDescription": "A function that is executed before a resource is deleted."
  },
  "dxGanttOptions.onResourceInserted": {
    "shortDescription": "A function that is executed when a resource is inserted."
  },
  "dxGanttOptions.onResourceInserting": {
    "shortDescription": "A function that is executed before a resource is inserted."
  },
  "dxGanttOptions.onResourceManagerDialogShowing": {
    "shortDescription": "A function that is executed before the Resource Manager dialog is shown."
  },
  "dxGanttOptions.onResourceUnassigned": {
    "shortDescription": "A function that is executed when a resource is unassigned from a task."
  },
  "dxGanttOptions.onResourceUnassigning": {
    "shortDescription": "A function that is executed before a resource is unassigned from a task."
  },
  "dxGanttOptions.onScaleCellPrepared": {
    "shortDescription": "A function that is executed before a scale cell is prepared."
  },
  "dxGanttOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed after users select a task or clear its selection."
  },
  "dxGanttOptions.onTaskClick": {
    "shortDescription": "A function that is executed when a user clicks a task."
  },
  "dxGanttOptions.onTaskDblClick": {
    "shortDescription": "A function that is executed when a user double-clicks a task."
  },
  "dxGanttOptions.onTaskDeleted": {
    "shortDescription": "A function that is executed when a task is deleted."
  },
  "dxGanttOptions.onTaskDeleting": {
    "shortDescription": "A function that is executed before a task is deleted."
  },
  "dxGanttOptions.onTaskEditDialogShowing": {
    "shortDescription": "A function that is executed before the edit dialog is shown."
  },
  "dxGanttOptions.onTaskInserted": {
    "shortDescription": "A function that is executed when a task is inserted."
  },
  "dxGanttOptions.onTaskInserting": {
    "shortDescription": "A function that is executed before a task is inserted."
  },
  "dxGanttOptions.onTaskMoving": {
    "shortDescription": "A function that is executed before a task is moved."
  },
  "dxGanttOptions.onTaskUpdated": {
    "shortDescription": "A function that is executed when a task is updated."
  },
  "dxGanttOptions.onTaskUpdating": {
    "shortDescription": "A function that is executed before a task is updated."
  },
  "dxGanttOptions.resourceAssignments": {
    "shortDescription": "Configures resource assignments."
  },
  "dxGanttOptions.resourceAssignments.dataSource": {
    "shortDescription": "Binds the UI component to the data source, which contains resource assignments."
  },
  "dxGanttOptions.resourceAssignments.keyExpr": {
    "shortDescription": "Specifies the data field that provides keys for resource assignments."
  },
  "dxGanttOptions.resourceAssignments.resourceIdExpr": {
    "shortDescription": "Specifies the data field that provides resource IDs."
  },
  "dxGanttOptions.resourceAssignments.taskIdExpr": {
    "shortDescription": "Specifies the data field that provides task IDs."
  },
  "dxGanttOptions.resources": {
    "shortDescription": "Configures task resources."
  },
  "dxGanttOptions.resources.colorExpr": {
    "shortDescription": "Specifies the data field that provides resources' color."
  },
  "dxGanttOptions.resources.dataSource": {
    "shortDescription": "Binds the UI component to the data source, which contains resources."
  },
  "dxGanttOptions.resources.keyExpr": {
    "shortDescription": "Specifies the data field that provides keys for resources."
  },
  "dxGanttOptions.resources.textExpr": {
    "shortDescription": "Specifies the data field that provides resource texts."
  },
  "dxGanttOptions.rootValue": {
    "shortDescription": "Specifies the root task's identifier."
  },
  "dxGanttOptions.rtlEnabled": {
    "shortDescription": "Switches the UI component to a right-to-left representation."
  },
  "dxGanttOptions.scaleType": {
    "shortDescription": "Specifies the zoom level of tasks in the Gantt chart."
  },
  "dxGanttOptions.scaleTypeRange": {
    "shortDescription": "Configures zoom range settings."
  },
  "dxGanttOptions.scaleTypeRange.max": {
    "shortDescription": "Specifies the maximum zoom level of tasks in the Gantt chart."
  },
  "dxGanttOptions.scaleTypeRange.min": {
    "shortDescription": "Specifies the minimum zoom level of tasks in the Gantt chart."
  },
  "dxGanttOptions.selectedRowKey": {
    "shortDescription": "Allows you to select a row or determine which row is selected."
  },
  "dxGanttOptions.showDependencies": {
    "shortDescription": "Specifies whether to display [dependencies](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/dependencies '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/dependencies/') between tasks."
  },
  "dxGanttOptions.showResources": {
    "shortDescription": "Specifies whether to display [task resources](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/resources '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/resources')."
  },
  "dxGanttOptions.showRowLines": {
    "shortDescription": "Specifies whether to show/hide horizontal faint lines that separate tasks."
  },
  "dxGanttOptions.sorting": {
    "shortDescription": "Configures sort settings."
  },
  "dxGanttOptions.startDateRange": {
    "shortDescription": "Specifies the start date of the date interval in the Gantt chart."
  },
  "dxGanttOptions.stripLines": {
    "shortDescription": "Configures strip lines."
  },
  "dxGanttOptions.taskContentTemplate": {
    "shortDescription": "Specifies custom content for the task."
  },
  "dxGanttOptions.taskListWidth": {
    "shortDescription": "Specifies the width of the task list in pixels."
  },
  "dxGanttOptions.taskProgressTooltipContentTemplate": {
    "shortDescription": "Specifies custom content for the tooltip that displays the task's progress while the progress handler is resized in the UI."
  },
  "dxGanttOptions.tasks": {
    "shortDescription": "Configures tasks."
  },
  "dxGanttOptions.tasks.colorExpr": {
    "shortDescription": "Specifies the data field that provides tasks' color."
  },
  "dxGanttOptions.tasks.dataSource": {
    "shortDescription": "Binds the UI component to the data source which contains tasks."
  },
  "dxGanttOptions.tasks.endExpr": {
    "shortDescription": "Specifies the data field that provides tasks' end dates."
  },
  "dxGanttOptions.tasks.keyExpr": {
    "shortDescription": "Specifies the data field that provides keys for tasks."
  },
  "dxGanttOptions.tasks.parentIdExpr": {
    "shortDescription": "Specifies the data field that provides tasks' parent IDs."
  },
  "dxGanttOptions.tasks.progressExpr": {
    "shortDescription": "Specifies the data field that provides tasks' progress."
  },
  "dxGanttOptions.tasks.startExpr": {
    "shortDescription": "Specifies the data field that provides tasks' start dates."
  },
  "dxGanttOptions.tasks.titleExpr": {
    "shortDescription": "Specifies the data field that provides task titles."
  },
  "dxGanttOptions.taskTimeTooltipContentTemplate": {
    "shortDescription": "Specifies custom content for the tooltip that displays the task's start and end time while the task is resized in the UI."
  },
  "dxGanttOptions.taskTitlePosition": {
    "shortDescription": "Specifies a task's title position."
  },
  "dxGanttOptions.taskTooltipContentTemplate": {
    "shortDescription": "Specifies custom content for the task tooltip."
  },
  "dxGanttOptions.toolbar": {
    "shortDescription": "Configures toolbar settings."
  },
  "dxGanttOptions.validation": {
    "shortDescription": "Configures validation properties."
  },
  "dxGanttOptions.validation.autoUpdateParentTasks": {
    "shortDescription": "Specifies whether to recalculate the parent task's duration and progress when its child tasks are modified."
  },
  "dxGanttOptions.validation.enablePredecessorGap": {
    "shortDescription": "Specifies whether users can move or resize a predecessor to change a gap before a successor according to the [dependency rules](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/validation/validateDependencies.md '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/validation/#validateDependencies')."
  },
  "dxGanttOptions.validation.validateDependencies": {
    "shortDescription": "Enables [task dependencies](/api-reference/10%20UI%20Components/dxGantt/1%20Configuration/dependencies '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/dependencies/') validation."
  },
  "dxGanttSorting": {
    "shortDescription": "Configures sorting."
  },
  "dxGanttSorting.ascendingText": {
    "shortDescription": "Specifies text for the context menu item that sets an ascending sort order in a column."
  },
  "dxGanttSorting.clearText": {
    "shortDescription": "Specifies text for the context menu item that clears sorting settings for a column."
  },
  "dxGanttSorting.descendingText": {
    "shortDescription": "Specifies text for the context menu item that sets a descending sort order in a column."
  },
  "dxGanttSorting.mode": {
    "shortDescription": "Specifies sort mode."
  },
  "dxGanttSorting.showSortIndexes": {
    "shortDescription": "Specifies whether to display sort indexes in column headers. Applies only when **sorting**.[mode](/api-reference/_hidden/dxGanttSorting/mode.md '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/sorting/#mode') is \"multiple\" and data is sorted by two or more columns."
  },
  "dxGanttStripLine": {
    "shortDescription": "Configures a strip line."
  },
  "dxGanttStripLine.cssClass": {
    "shortDescription": "Specifies the name of the cascading style sheet (CSS) class associated with the strip line."
  },
  "dxGanttStripLine.end": {
    "shortDescription": "Specifies the end point of the strip line."
  },
  "dxGanttStripLine.start": {
    "shortDescription": "Specifies the start point of the strip line."
  },
  "dxGanttStripLine.title": {
    "shortDescription": "Specifies the strip line's title."
  },
  "dxGanttToolbar": {
    "shortDescription": "Configures the toolbar."
  },
  "dxGanttToolbar.items": {
    "shortDescription": "Configures toolbar items' settings."
  },
  "dxGanttToolbarItem": {
    "shortDescription": "Configures the toolbar item."
  },
  "dxGanttToolbarItem.location": {
    "shortDescription": "Specifies the toolbar item's location."
  },
  "dxGanttToolbarItem.name": {
    "shortDescription": "Specifies the toolbar item's name."
  },
  "dxHtmlEditor": {
    "shortDescription": "HtmlEditor is a WYSIWYG editor that allows you to format textual and visual content and to output it in HTML. HtmlEditor is built on top of and requires the <a href=\"https://github.com/DevExpress/devextreme-quill/\" target=\"_blank\">DevExtreme Quill</a>."
  },
  "dxHtmlEditor.blur()": {
    "shortDescription": "Removes focus from the content field of the editor."
  },
  "dxHtmlEditor.clearHistory()": {
    "shortDescription": "Clears the history of changes."
  },
  "dxHtmlEditor.delete(index, length)": {
    "shortDescription": "Deletes content from the given range."
  },
  "dxHtmlEditor.focusIn": {
    "shortDescription": "Raised when the UI component gets focus."
  },
  "dxHtmlEditor.focusOut": {
    "shortDescription": "Raised when the UI component loses focus."
  },
  "dxHtmlEditor.format(formatName, formatValue)": {
    "shortDescription": "Applies a format to the selected content. Cannot be used with [embedded formats](/concepts/05%20UI%20Components/HtmlEditor/10%20Formats '/Documentation/Guide/UI_Components/HtmlEditor/Formats/')."
  },
  "dxHtmlEditor.formatLine(index, length, formatName, formatValue)": {
    "shortDescription": "Applies a single [block format](/concepts/05%20UI%20Components/HtmlEditor/10%20Formats '/Documentation/Guide/UI_Components/HtmlEditor/Formats/') to all lines in the given range."
  },
  "dxHtmlEditor.formatLine(index, length, formats)": {
    "shortDescription": "Applies several [block formats](/concepts/05%20UI%20Components/HtmlEditor/10%20Formats '/Documentation/Guide/UI_Components/HtmlEditor/Formats/') to all lines in the given range."
  },
  "dxHtmlEditor.formatText(index, length, formatName, formatValue)": {
    "shortDescription": "Applies a single [text format](/concepts/05%20UI%20Components/HtmlEditor/10%20Formats '/Documentation/Guide/UI_Components/HtmlEditor/Formats/') to all characters in the given range."
  },
  "dxHtmlEditor.formatText(index, length, formats)": {
    "shortDescription": "Applies several [text formats](/concepts/05%20UI%20Components/HtmlEditor/10%20Formats '/Documentation/Guide/UI_Components/HtmlEditor/Formats/') to all characters in the given range."
  },
  "dxHtmlEditor.get(componentPath)": {
    "shortDescription": "Gets a format, module, or <a href=\"https://github.com/quilljs/parchment/\" target=\"_blank\">Parchment</a>."
  },
  "dxHtmlEditor.getBounds(index, length)": {
    "shortDescription": "Retrieves the pixel position and size of a selection at a specified location."
  },
  "dxHtmlEditor.getFormat()": {
    "shortDescription": "Retrieves formatting of the text within the current selection range."
  },
  "dxHtmlEditor.getFormat(index, length)": {
    "shortDescription": "Gets formats applied to the content in the specified range."
  },
  "dxHtmlEditor.getLength()": {
    "shortDescription": "Gets the entire content's length."
  },
  "dxHtmlEditor.getModule(moduleName)": {
    "shortDescription": "Gets the instance of a module."
  },
  "dxHtmlEditor.getQuillInstance()": {
    "shortDescription": "Gets the <a href=\"https://github.com/DevExpress/devextreme-quill/\" target=\"_blank\">DevExtreme Quill</a>'s instance."
  },
  "dxHtmlEditor.getSelection()": {
    "shortDescription": "Gets the selected content's position and length."
  },
  "dxHtmlEditor.getText(index, length)": {
    "shortDescription": "Retrieves text content from the HtmlEditor."
  },
  "dxHtmlEditor.insertEmbed(index, type, config)": {
    "shortDescription": "Inserts an embedded content at the specified position."
  },
  "dxHtmlEditor.insertText(index, text, formatName, formatValue)": {
    "shortDescription": "Inserts text into the HtmlEditor."
  },
  "dxHtmlEditor.insertText(index, text, formats)": {
    "shortDescription": "Inserts formatted text at the specified position. Used with all formats except [embedded](/concepts/05%20UI%20Components/HtmlEditor/10%20Formats '/Documentation/Guide/UI_Components/HtmlEditor/Formats/')."
  },
  "dxHtmlEditor.redo()": {
    "shortDescription": "Reapplies the most recent [undone](/api-reference/10%20UI%20Components/dxHtmlEditor/3%20Methods/undo().md '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Methods/#undo') change. Repeated calls reapply preceding undone changes."
  },
  "dxHtmlEditor.register(components)": {
    "shortDescription": "Registers custom formats and modules."
  },
  "dxHtmlEditor.removeFormat(index, length)": {
    "shortDescription": "Removes all formatting and embedded content from the specified range."
  },
  "dxHtmlEditor.setSelection(index, length)": {
    "shortDescription": "Selects and highlights content in the specified range."
  },
  "dxHtmlEditor.undo()": {
    "shortDescription": "Reverses the most recent change. Repeated calls reverse preceding changes."
  },
  "dxHtmlEditorImageUpload.fileUploaderOptions": {
    "shortDescription": "Configures the file uploader options."
  },
  "dxHtmlEditorImageUpload.fileUploadMode": {
    "shortDescription": "Specifies how the HtmlEditor UI component uploads files."
  },
  "dxHtmlEditorImageUpload.tabs": {
    "shortDescription": "Contains an array of tabs in the \"Add an Image\" dialog."
  },
  "dxHtmlEditorImageUpload.uploadDirectory": {
    "shortDescription": "Specifies a target directory for uploaded images."
  },
  "dxHtmlEditorImageUpload.uploadUrl": {
    "shortDescription": "Specifies a target Url for the upload request."
  },
  "dxHtmlEditorImageUploadTabItem": {
    "shortDescription": "Configures the tab item in the upload image dialog."
  },
  "dxHtmlEditorImageUploadTabItem.name": {
    "shortDescription": "Specifies the tab's name."
  },
  "dxHtmlEditorMediaResizing.allowedTargets": {
    "shortDescription": "Specifies media types that can be resized. Currently, only images are supported."
  },
  "dxHtmlEditorMediaResizing.enabled": {
    "shortDescription": "Enables media resizing."
  },
  "dxHtmlEditorMention.dataSource": {
    "shortDescription": "Provides data for the suggestion list."
  },
  "dxHtmlEditorMention.displayExpr": {
    "shortDescription": "Specifies the data field whose values should be displayed in the suggestion list."
  },
  "dxHtmlEditorMention.itemTemplate": {
    "shortDescription": "Specifies a custom template for suggestion list items."
  },
  "dxHtmlEditorMention.marker": {
    "shortDescription": "Specifies the prefix that a user enters to activate mentions. You can use different prefixes with different [dataSources](/api-reference/_hidden/dxHtmlEditorMention/dataSource.md '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Configuration/mentions/#dataSource')."
  },
  "dxHtmlEditorMention.minSearchLength": {
    "shortDescription": "Specifies the minimum number of characters that a user should type to trigger the search."
  },
  "dxHtmlEditorMention.searchExpr": {
    "shortDescription": "Specifies one or several [data fields](/api-reference/_hidden/dxHtmlEditorMention/dataSource.md '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Configuration/mentions/#dataSource') to search."
  },
  "dxHtmlEditorMention.searchTimeout": {
    "shortDescription": "Specifies the delay between when a user stops typing and when the search is executed."
  },
  "dxHtmlEditorMention.template": {
    "shortDescription": "Specifies a custom template for mentions."
  },
  "dxHtmlEditorMention.valueExpr": {
    "shortDescription": "Specifies which [data field](/api-reference/_hidden/dxHtmlEditorMention/dataSource.md '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Configuration/mentions/#dataSource') provides unique values to the [template](/api-reference/_hidden/dxHtmlEditorMention/template.md '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Configuration/mentions/#template')'s `id` parameter."
  },
  "dxHtmlEditorOptions.allowSoftLineBreak": {
    "shortDescription": "Allows users to break content into multiple lines within a single block element. The Shift + Enter key combination generates the new line."
  },
  "dxHtmlEditorOptions.converter": {
    "shortDescription": "Allows you to convert an HtmlEditor value between different markups."
  },
  "dxHtmlEditorOptions.customizeModules": {
    "shortDescription": "Allows you to customize the DevExtreme Quill and 3rd-party modules."
  },
  "dxHtmlEditorOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxHtmlEditorOptions.imageUpload": {
    "shortDescription": "Configures the image upload."
  },
  "dxHtmlEditorOptions.mediaResizing": {
    "shortDescription": "Configures media resizing."
  },
  "dxHtmlEditorOptions.mentions": {
    "shortDescription": "Configures mentions."
  },
  "dxHtmlEditorOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxHtmlEditorOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxHtmlEditorOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxHtmlEditorOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxHtmlEditorOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxHtmlEditorOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxHtmlEditorOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxHtmlEditorOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxHtmlEditor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxHtmlEditorOptions.placeholder": {
    "shortDescription": "Specifies the text displayed when the input field is empty."
  },
  "dxHtmlEditorOptions.stylingMode": {
    "shortDescription": "Specifies how the HtmlEditor's [toolbar](/api-reference/10%20UI%20Components/dxHtmlEditor/1%20Configuration/toolbar '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Configuration/toolbar/') and content field are styled."
  },
  "dxHtmlEditorOptions.tableContextMenu": {
    "shortDescription": "Configures table context menu settings."
  },
  "dxHtmlEditorOptions.tableResizing": {
    "shortDescription": "Configures table resize."
  },
  "dxHtmlEditorOptions.toolbar": {
    "shortDescription": "Configures the UI component's toolbar."
  },
  "dxHtmlEditorOptions.variables": {
    "shortDescription": "Configures variables, which are placeholders to be replaced with actual values when processing text."
  },
  "dxHtmlEditorTableContextMenu": {
    "shortDescription": "Configures table context menu settings."
  },
  "dxHtmlEditorTableContextMenu.enabled": {
    "shortDescription": "Specifies whether to enable the table context menu."
  },
  "dxHtmlEditorTableContextMenu.items": {
    "shortDescription": "Configures context menu items."
  },
  "dxHtmlEditorTableContextMenuItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxHtmlEditorTableContextMenuItem.items": {
    "shortDescription": "Configures nested context menu items."
  },
  "dxHtmlEditorTableContextMenuItem.name": {
    "shortDescription": "A name used to identify the context menu item."
  },
  "dxHtmlEditorTableResizing.enabled": {
    "shortDescription": "Enables users to resize tables."
  },
  "dxHtmlEditorTableResizing.minColumnWidth": {
    "shortDescription": "The minimum column width."
  },
  "dxHtmlEditorTableResizing.minRowHeight": {
    "shortDescription": "The minimum row height."
  },
  "dxHtmlEditorToolbar.container": {
    "shortDescription": "Specifies the container in which to place the toolbar."
  },
  "dxHtmlEditorToolbar.items": {
    "shortDescription": "Configures toolbar items. These items allow users to format text and execute commands."
  },
  "dxHtmlEditorToolbar.multiline": {
    "shortDescription": "Specifies whether or not items are arranged into multiple lines when their combined width exceeds the toolbar width."
  },
  "dxHtmlEditorToolbarItem.acceptedValues": {
    "shortDescription": "Specifies values for a format with multiple choices. Should be used with the [name](/api-reference/_hidden/dxHtmlEditorToolbarItem/name.md '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Configuration/toolbar/items/#name')."
  },
  "dxHtmlEditorToolbarItem.formatName": {
    "shortDescription": "Specifies the predefined item that this object customizes or a format with multiple choices.",
    "depNote": "Use name instead."
  },
  "dxHtmlEditorToolbarItem.formatValues": {
    "shortDescription": "Specifies values for a format with multiple choices.",
    "depNote": "Use acceptedValues instead."
  },
  "dxHtmlEditorToolbarItem.location": {
    "shortDescription": "Specifies a location for the item on the toolbar."
  },
  "dxHtmlEditorToolbarItem.name": {
    "shortDescription": "Specifies the predefined item that this object customizes or a format with multiple choices."
  },
  "dxHtmlEditorVariables.dataSource": {
    "shortDescription": "Specifies a collection of variables available for a user."
  },
  "dxHtmlEditorVariables.escapeChar": {
    "shortDescription": "Specifies the special character(s) that should surround the variables."
  },
  "dxItem": {
    "shortDescription": "Specifies markup for a UI component item."
  },
  "dxLinearGauge": {
    "shortDescription": "The LinearGauge is a UI component that indicates values on a linear numeric scale."
  },
  "dxLinearGaugeOptions.geometry": {
    "shortDescription": "Specifies the properties required to set the geometry of the LinearGauge UI component."
  },
  "dxLinearGaugeOptions.geometry.orientation": {
    "shortDescription": "Indicates whether to display the LinearGauge UI component vertically or horizontally."
  },
  "dxLinearGaugeOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxLinearGaugeOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxLinearGaugeOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxLinearGaugeOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxLinearGaugeOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxLinearGaugeOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxLinearGaugeOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxLinearGaugeOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxLinearGaugeOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxLinearGaugeOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxLinearGaugeOptions.rangeContainer": {
    "shortDescription": "Specifies gauge range container properties."
  },
  "dxLinearGaugeOptions.rangeContainer.horizontalOrientation": {
    "shortDescription": "Specifies the orientation of the range container. Applies only if the **geometry**.[orientation](/api-reference/10%20UI%20Components/dxLinearGauge/1%20Configuration/geometry/orientation.md '/Documentation/ApiReference/UI_Components/dxLinearGauge/Configuration/geometry/#orientation') property is *\"vertical\"*."
  },
  "dxLinearGaugeOptions.rangeContainer.verticalOrientation": {
    "shortDescription": "Specifies the orientation of the range container. Applies only if the **geometry**.[orientation](/api-reference/10%20UI%20Components/dxLinearGauge/1%20Configuration/geometry/orientation.md '/Documentation/ApiReference/UI_Components/dxLinearGauge/Configuration/geometry/#orientation') property is *\"horizontal\"*."
  },
  "dxLinearGaugeOptions.rangeContainer.width": {
    "shortDescription": "Specifies the width of the range container's start and end boundaries in the LinearGauge UI component."
  },
  "dxLinearGaugeOptions.rangeContainer.width.end": {
    "shortDescription": "Specifies an end width of a range container."
  },
  "dxLinearGaugeOptions.rangeContainer.width.start": {
    "shortDescription": "Specifies a start width of a range container."
  },
  "dxLinearGaugeOptions.scale": {
    "shortDescription": "Specifies the gauge's scale properties."
  },
  "dxLinearGaugeOptions.scale.horizontalOrientation": {
    "shortDescription": "Specifies the orientation of scale ticks. Applies only if the **geometry**.[orientation](/api-reference/10%20UI%20Components/dxLinearGauge/1%20Configuration/geometry/orientation.md '/Documentation/ApiReference/UI_Components/dxLinearGauge/Configuration/geometry/#orientation') property is *\"vertical\"*."
  },
  "dxLinearGaugeOptions.scale.label": {
    "shortDescription": "Specifies common properties for scale labels."
  },
  "dxLinearGaugeOptions.scale.label.indentFromTick": {
    "shortDescription": "Specifies the spacing between scale labels and ticks."
  },
  "dxLinearGaugeOptions.scale.scaleDivisionFactor": {
    "shortDescription": "Specifies the minimum distance between two neighboring major ticks in pixels."
  },
  "dxLinearGaugeOptions.scale.verticalOrientation": {
    "shortDescription": "Specifies the orientation of scale ticks. Applies only if the **geometry**.[orientation](/api-reference/10%20UI%20Components/dxLinearGauge/1%20Configuration/geometry/orientation.md '/Documentation/ApiReference/UI_Components/dxLinearGauge/Configuration/geometry/#orientation') property is *\"horizontal\"*."
  },
  "dxLinearGaugeOptions.subvalueIndicator": {
    "shortDescription": "Specifies the appearance properties of subvalue indicators."
  },
  "dxLinearGaugeOptions.subvalueIndicator.type": {
    "shortDescription": "Specifies the type of subvalue indicators."
  },
  "dxLinearGaugeOptions.valueIndicator": {
    "shortDescription": "Specifies the appearance properties of the value indicator."
  },
  "dxLinearGaugeOptions.valueIndicator.type": {
    "shortDescription": "Specifies the type of the value indicator."
  },
  "dxLinearGaugeRangeContainer": {
    "shortDescription": "Specifies gauge range container properties."
  },
  "dxLinearGaugeScale": {
    "shortDescription": "Specifies the gauge's scale properties."
  },
  "dxLinearGaugeScaleLabel": {
    "shortDescription": "Specifies common properties for scale labels."
  },
  "dxList": {
    "shortDescription": "The List is a UI component that represents a collection of items in a scrollable list."
  },
  "dxList.clientHeight()": {
    "shortDescription": "Gets the UI component's height in pixels."
  },
  "dxList.collapseGroup(groupIndex)": {
    "shortDescription": "Collapses a group with a specific index."
  },
  "dxList.deleteItem(itemElement)": {
    "shortDescription": "Removes an item found using its DOM node."
  },
  "dxList.deleteItem(itemIndex)": {
    "shortDescription": "Removes an item with a specific index."
  },
  "dxList.expandGroup(groupIndex)": {
    "shortDescription": "Expands a group with a specific index."
  },
  "dxList.getFlatIndexByItemElement(itemElement)": {
    "shortDescription": ""
  },
  "dxList.getItemByIndex(index)": {
    "shortDescription": ""
  },
  "dxList.getItemElementByFlatIndex(flatIndex)": {
    "shortDescription": ""
  },
  "dxList.groupRendered": {
    "shortDescription": "Raised when a group element is rendered."
  },
  "dxList.isItemSelected(itemElement)": {
    "shortDescription": "Checks whether an item found using its DOM node is selected."
  },
  "dxList.isItemSelected(itemIndex)": {
    "shortDescription": "Checks whether an item with a specific index is selected."
  },
  "dxList.itemClick": {
    "shortDescription": "Raised when a collection item is clicked or tapped."
  },
  "dxList.itemContextMenu": {
    "shortDescription": "Raised when a collection item is right-clicked or pressed."
  },
  "dxList.itemDeleted": {
    "shortDescription": "Raised after a list item is deleted from the data source."
  },
  "dxList.itemDeleting": {
    "shortDescription": "Raised before a collection item is deleted from the data source."
  },
  "dxList.itemHold": {
    "shortDescription": "Raised when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxList.itemReordered": {
    "shortDescription": "Raised after a list item is moved to another position."
  },
  "dxList.itemSwipe": {
    "shortDescription": "Raised when a list item is swiped."
  },
  "dxList.pageLoading": {
    "shortDescription": "Raised before the next page is loaded."
  },
  "dxList.pullRefresh": {
    "shortDescription": "Raised when the \"pull to refresh\" gesture is performed."
  },
  "dxList.reload()": {
    "shortDescription": "Reloads list data."
  },
  "dxList.reorderItem(itemElement, toItemElement)": {
    "shortDescription": "Reorders items found using their DOM nodes."
  },
  "dxList.reorderItem(itemIndex, toItemIndex)": {
    "shortDescription": "Reorders items with specific indexes."
  },
  "dxList.scroll": {
    "shortDescription": "Raised on each scroll gesture."
  },
  "dxList.scrollBy(distance)": {
    "shortDescription": "Scrolls the content by a specified distance."
  },
  "dxList.scrollHeight()": {
    "shortDescription": "Gets the content's height in pixels."
  },
  "dxList.scrollTo(location)": {
    "shortDescription": "Scrolls the content to a specific position."
  },
  "dxList.scrollToItem(itemElement)": {
    "shortDescription": "Scrolls the content to an item found using its DOM node."
  },
  "dxList.scrollToItem(itemIndex)": {
    "shortDescription": "Scrolls the content to an item with a specific index."
  },
  "dxList.scrollTop()": {
    "shortDescription": "Gets the top scroll offset."
  },
  "dxList.selectAll()": {
    "shortDescription": "Selects all items."
  },
  "dxList.selectAllValueChanged": {
    "shortDescription": "Raised when the \"Select All\" check box value is changed."
  },
  "dxList.selectItem(itemElement)": {
    "shortDescription": "Selects an item found using its DOM node."
  },
  "dxList.selectItem(itemIndex)": {
    "shortDescription": "Selects an item with a specific index."
  },
  "dxList.unselectAll()": {
    "shortDescription": "Cancels the selection of all items."
  },
  "dxList.unselectItem(itemElement)": {
    "shortDescription": "Cancels the selection of an item found using its DOM node."
  },
  "dxList.unselectItem(itemIndex)": {
    "shortDescription": "Cancels the selection of an item with a specific index."
  },
  "dxList.updateDimensions()": {
    "shortDescription": "Updates the UI component scrollbar according to UI component content size."
  },
  "dxListItem.badge": {
    "shortDescription": "Specifies the text of a badge displayed for the list item."
  },
  "dxListItem.icon": {
    "shortDescription": "Specifies the list item's icon."
  },
  "dxListItem.key": {
    "shortDescription": "Specifies the name of the list items group in a grouped list."
  },
  "dxListItem.showChevron": {
    "shortDescription": "Specifies whether or not to display a chevron for the list item."
  },
  "dxListOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxListOptions.allowItemDeleting": {
    "shortDescription": "Specifies whether or not an end user can delete list items."
  },
  "dxListOptions.bounceEnabled": {
    "shortDescription": "A Boolean value specifying whether to enable or disable the bounce-back effect."
  },
  "dxListOptions.collapsibleGroups": {
    "shortDescription": "Specifies whether or not an end user can collapse groups."
  },
  "dxListOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxListOptions.displayExpr": {
    "shortDescription": "Specifies the data field whose values should be displayed. Defaults to *\"text\"* when the data source contains objects."
  },
  "dxListOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxListOptions.grouped": {
    "shortDescription": "Specifies whether data items should be grouped."
  },
  "dxListOptions.groupTemplate": {
    "shortDescription": "Specifies a custom template for group captions."
  },
  "dxListOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxListOptions.indicateLoading": {
    "shortDescription": "Specifies whether or not to show the loading panel when the [DataSource](/api-reference/30%20Data%20Layer/DataSource '/Documentation/ApiReference/Data_Layer/DataSource/') bound to the UI component is loading data."
  },
  "dxListOptions.itemDeleteMode": {
    "shortDescription": "Specifies the way a user can delete items from the list."
  },
  "dxListOptions.itemDragging": {
    "shortDescription": "Configures item reordering using drag and drop gestures."
  },
  "dxListOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxListOptions.menuItems": {
    "shortDescription": "Specifies the array of items for a context menu called for a list item."
  },
  "dxListOptions.menuItems.action": {
    "shortDescription": "Holds on a function called when the item is clicked."
  },
  "dxListOptions.menuItems.text": {
    "shortDescription": "Specifies the menu item text."
  },
  "dxListOptions.menuMode": {
    "shortDescription": "Specifies whether an item context menu is shown when a user holds or swipes an item."
  },
  "dxListOptions.nextButtonText": {
    "shortDescription": "The text displayed on the button used to load the next page from the data source."
  },
  "dxListOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxListOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxListOptions.onGroupRendered": {
    "shortDescription": "A function that is executed when a group element is rendered."
  },
  "dxListOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxListOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxListOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxListOptions.onItemDeleted": {
    "shortDescription": "A function that is executed after a list item is deleted from the data source."
  },
  "dxListOptions.onItemDeleting": {
    "shortDescription": "A function that is executed before a collection item is deleted from the data source."
  },
  "dxListOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxListOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxListOptions.onItemReordered": {
    "shortDescription": "A function that is executed after a list item is moved to another position."
  },
  "dxListOptions.onItemSwipe": {
    "shortDescription": "A function that is executed when a list item is swiped."
  },
  "dxListOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxListOptions.onPageLoading": {
    "shortDescription": "A function that is executed before the next page is loaded."
  },
  "dxListOptions.onPullRefresh": {
    "shortDescription": "A function that is executed when the \"pull to refresh\" gesture is performed. Supported on mobile devices only."
  },
  "dxListOptions.onScroll": {
    "shortDescription": "A function that is executed on each scroll gesture."
  },
  "dxListOptions.onSelectAllValueChanged": {
    "shortDescription": "A function that is executed when the \"Select All\" check box value is changed. Applies only if the [selectionMode](/api-reference/10%20UI%20Components/dxList/1%20Configuration/selectionMode.md '/Documentation/ApiReference/UI_Components/dxList/Configuration/#selectionMode') is *\"all\"*."
  },
  "dxListOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxListOptions.onSelectionChanging": {
    "shortDescription": "A function that is called before selection changes."
  },
  "dxListOptions.pageLoadingText": {
    "shortDescription": "Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom."
  },
  "dxListOptions.pageLoadMode": {
    "shortDescription": "Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the \"next\" button is clicked."
  },
  "dxListOptions.pulledDownText": {
    "shortDescription": "Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold."
  },
  "dxListOptions.pullingDownText": {
    "shortDescription": "Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold."
  },
  "dxListOptions.pullRefreshEnabled": {
    "shortDescription": "A Boolean value specifying whether or not the UI component supports the \"pull down to refresh\" gesture."
  },
  "dxListOptions.refreshingText": {
    "shortDescription": "Specifies the text displayed in the pullDown panel while the list is being refreshed."
  },
  "dxListOptions.repaintChangesOnly": {
    "shortDescription": "Specifies whether to repaint only those elements whose data changed."
  },
  "dxListOptions.scrollByContent": {
    "shortDescription": "A Boolean value specifying if the list is scrolled by content."
  },
  "dxListOptions.scrollByThumb": {
    "shortDescription": "Specifies whether a user can scroll the content with the scrollbar. Applies only if [useNativeScrolling](/api-reference/10%20UI%20Components/dxList/1%20Configuration/useNativeScrolling.md '/Documentation/ApiReference/UI_Components/dxList/Configuration/#useNativeScrolling') is **false**."
  },
  "dxListOptions.scrollingEnabled": {
    "shortDescription": "A Boolean value specifying whether to enable or disable list scrolling."
  },
  "dxListOptions.selectAllMode": {
    "shortDescription": "Specifies the mode in which all items are selected."
  },
  "dxListOptions.selectAllText": {
    "shortDescription": "Specifies the text displayed at the \"Select All\" check box."
  },
  "dxListOptions.selectByClick": {
    "shortDescription": "Specifies whether an item is selected if a user clicks it."
  },
  "dxListOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected list item."
  },
  "dxListOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "dxListOptions.selectionMode": {
    "shortDescription": "Specifies item selection mode."
  },
  "dxListOptions.showScrollbar": {
    "shortDescription": "Specifies when the UI component shows the scrollbar."
  },
  "dxListOptions.showSelectionControls": {
    "shortDescription": "Specifies whether or not to display controls used to select list items."
  },
  "dxListOptions.useNativeScrolling": {
    "shortDescription": "Specifies whether or not the UI component uses native scrolling."
  },
  "dxLoadIndicator": {
    "shortDescription": "The LoadIndicator is a UI element notifying the viewer that a process is in progress."
  },
  "dxLoadIndicator.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxLoadIndicator.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxLoadIndicatorOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxLoadIndicatorOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxLoadIndicatorOptions.disabled": {
    "shortDescription": "Specifies whether the UI component responds to user interaction."
  },
  "dxLoadIndicatorOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxLoadIndicatorOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxLoadIndicatorOptions.indicatorSrc": {
    "shortDescription": "Specifies the path to an image used as the indicator."
  },
  "dxLoadIndicatorOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxLoadIndicatorOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxLoadIndicatorOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxLoadIndicatorOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxLoadIndicatorOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxLoadPanel": {
    "shortDescription": "The LoadPanel is an overlay UI component notifying the viewer that loading is in progress."
  },
  "dxLoadPanel.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxLoadPanel.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxLoadPanelAnimation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Components/dxLoadPanel/1%20Configuration/animation/show.md '/Documentation/ApiReference/UI_Components/dxLoadPanel/Configuration/animation/#show') and [hide](/api-reference/10%20UI%20Components/dxLoadPanel/1%20Configuration/animation/hide.md '/Documentation/ApiReference/UI_Components/dxLoadPanel/Configuration/animation/#hide')."
  },
  "dxLoadPanelOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxLoadPanelOptions.animation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Components/dxLoadPanel/1%20Configuration/animation/show.md '/Documentation/ApiReference/UI_Components/dxLoadPanel/Configuration/animation/#show') and [hide](/api-reference/10%20UI%20Components/dxLoadPanel/1%20Configuration/animation/hide.md '/Documentation/ApiReference/UI_Components/dxLoadPanel/Configuration/animation/#hide')."
  },
  "dxLoadPanelOptions.animation.hide": {
    "shortDescription": "An object that defines the animation properties used when the UI component is being hidden."
  },
  "dxLoadPanelOptions.animation.show": {
    "shortDescription": "An object that defines the animation properties used when the UI component is being shown."
  },
  "dxLoadPanelOptions.container": {
    "shortDescription": "Specifies the UI component's container."
  },
  "dxLoadPanelOptions.contentTemplate": {
    "shortDescription": "Specifies a custom template for the UI component content."
  },
  "dxLoadPanelOptions.delay": {
    "shortDescription": "The delay in milliseconds after which the load panel is displayed."
  },
  "dxLoadPanelOptions.disabled": {
    "shortDescription": "Specifies whether the UI component responds to user interaction."
  },
  "dxLoadPanelOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether or not the UI component can be focused."
  },
  "dxLoadPanelOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxLoadPanelOptions.indicatorSrc": {
    "shortDescription": "A URL pointing to an image to be used as a load indicator."
  },
  "dxLoadPanelOptions.maxHeight": {
    "shortDescription": "Specifies the maximum height the UI component can reach while resizing."
  },
  "dxLoadPanelOptions.maxWidth": {
    "shortDescription": "Specifies the maximum width the UI component can reach while resizing."
  },
  "dxLoadPanelOptions.message": {
    "shortDescription": "Specifies the text displayed in the load panel. Ignored in the [Material Design](/concepts/60%20Themes%20and%20Styles/05%20Predefined%20Themes/00%20Predefined%20Themes.md '/Documentation/Guide/Themes_and_Styles/Predefined_Themes/') theme."
  },
  "dxLoadPanelOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxLoadPanelOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxLoadPanelOptions.onHidden": {
    "shortDescription": "A function that is executed after the UI component is hidden."
  },
  "dxLoadPanelOptions.onHiding": {
    "shortDescription": "A function that is executed before the UI component is hidden."
  },
  "dxLoadPanelOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxLoadPanelOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxLoadPanelOptions.onShowing": {
    "shortDescription": "A function that is executed before the UI component is displayed."
  },
  "dxLoadPanelOptions.onShown": {
    "shortDescription": "A function that is executed after the UI component is displayed."
  },
  "dxLoadPanelOptions.position": {
    "shortDescription": "Positions the UI component."
  },
  "dxLoadPanelOptions.shadingColor": {
    "shortDescription": "Specifies the shading color. Applies only if [shading](/api-reference/10%20UI%20Components/dxOverlay/1%20Configuration/shading.md '{basewidgetpath}/Configuration/#shading') is enabled."
  },
  "dxLoadPanelOptions.showIndicator": {
    "shortDescription": "A Boolean value specifying whether or not to show a load indicator."
  },
  "dxLoadPanelOptions.showPane": {
    "shortDescription": "A Boolean value specifying whether or not to show the pane behind the load indicator."
  },
  "dxLoadPanelOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxLoadPanelOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxLookup": {
    "shortDescription": "The Lookup is a UI component that allows an end user to search for an item in a collection shown in a drop-down menu."
  },
  "dxLookup.getButton(name)": {
    "shortDescription": "Gets an instance of a [custom action button](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/buttons '{basewidgetpath}/Configuration/buttons/')."
  },
  "dxLookup.pageLoading": {
    "shortDescription": "Raised before the next page is loaded."
  },
  "dxLookup.pullRefresh": {
    "shortDescription": "Raised when the \"pull to refresh\" gesture is performed on the drop-down item list."
  },
  "dxLookup.scroll": {
    "shortDescription": "Raised on each scroll gesture performed on the drop-down item list."
  },
  "dxLookup.valueChanged": {
    "shortDescription": "Raised after the UI component's [value](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxLookup/Configuration/#value') is changed."
  },
  "dxLookupOptions.acceptCustomValue": {
    "shortDescription": "Specifies whether or not the UI component allows an end user to enter a custom value."
  },
  "dxLookupOptions.applyButtonText": {
    "shortDescription": "The text displayed on the Apply button."
  },
  "dxLookupOptions.applyValueMode": {
    "shortDescription": "Specifies the way an end user applies the selected value."
  },
  "dxLookupOptions.buttons": {
    "shortDescription": "Allows you to add custom buttons to the input text field."
  },
  "dxLookupOptions.cancelButtonText": {
    "shortDescription": "The text displayed on the Cancel button."
  },
  "dxLookupOptions.cleanSearchOnOpening": {
    "shortDescription": "Specifies whether or not the UI component cleans the search box when the popup window is displayed."
  },
  "dxLookupOptions.clearButtonText": {
    "shortDescription": "The text displayed on the Clear button."
  },
  "dxLookupOptions.dropDownButtonTemplate": {
    "shortDescription": "Specifies a custom template for the drop-down button."
  },
  "dxLookupOptions.dropDownCentered": {
    "shortDescription": "Specifies whether to vertically align the drop-down menu so that the selected item is in its center. Applies only in [Material Design themes](/concepts/60%20Themes%20and%20Styles/05%20Predefined%20Themes/00%20Predefined%20Themes.md '/Documentation/Guide/Themes_and_Styles/Predefined_Themes/')."
  },
  "dxLookupOptions.dropDownOptions": {
    "shortDescription": "Configures the drop-down field."
  },
  "dxLookupOptions.fieldTemplate": {
    "shortDescription": "Specifies a custom template for the input field."
  },
  "dxLookupOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxLookupOptions.fullScreen": {
    "shortDescription": "A Boolean value specifying whether or not to display the lookup in full-screen mode.",
    "depNote": "Use the dropDownOptions option instead."
  },
  "dxLookupOptions.grouped": {
    "shortDescription": "Specifies whether data items should be grouped."
  },
  "dxLookupOptions.groupTemplate": {
    "shortDescription": "Specifies a custom template for group captions."
  },
  "dxLookupOptions.maxLength": {
    "shortDescription": "Specifies the maximum number of characters you can enter into the textbox."
  },
  "dxLookupOptions.nextButtonText": {
    "shortDescription": "The text displayed on the button used to load the next page from the data source."
  },
  "dxLookupOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxLookupOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxLookupOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxLookupOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxLookupOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxLookupOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxLookupOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxLookupOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxLookupOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxLookupOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxLookupOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxLookupOptions.onItemClick": {
    "shortDescription": "A function that is executed when a list item is clicked or tapped."
  },
  "dxLookupOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxLookupOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxLookupOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxLookupOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxLookupOptions.onPageLoading": {
    "shortDescription": "A function that is executed before the next page is loaded."
  },
  "dxLookupOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxLookupOptions.onPullRefresh": {
    "shortDescription": "A function that is executed when the \"pull to refresh\" gesture is performed on the drop-down item list. Supported on mobile devices only."
  },
  "dxLookupOptions.onScroll": {
    "shortDescription": "A function that is executed on each scroll gesture performed on the drop-down item list."
  },
  "dxLookupOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a list item is selected or selection is canceled."
  },
  "dxLookupOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxLookup/Configuration/#value') is changed."
  },
  "dxLookupOptions.openOnFieldClick": {
    "shortDescription": "Specifies whether a user can open the drop-down list by clicking a text field."
  },
  "dxLookupOptions.pageLoadingText": {
    "shortDescription": "Specifies the text shown in the pullDown panel, which is displayed when the UI component is scrolled to the bottom."
  },
  "dxLookupOptions.pageLoadMode": {
    "shortDescription": "Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the \"next\" button is clicked."
  },
  "dxLookupOptions.placeholder": {
    "shortDescription": "The text displayed by the UI component when nothing is selected."
  },
  "dxLookupOptions.pulledDownText": {
    "shortDescription": "Specifies the text displayed in the pullDown panel when the UI component is pulled below the refresh threshold."
  },
  "dxLookupOptions.pullingDownText": {
    "shortDescription": "Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold."
  },
  "dxLookupOptions.pullRefreshEnabled": {
    "shortDescription": "A Boolean value specifying whether or not the UI component supports the \"pull down to refresh\" gesture."
  },
  "dxLookupOptions.readOnly": {
    "shortDescription": "Specifies whether the editor is read-only."
  },
  "dxLookupOptions.refreshingText": {
    "shortDescription": "Specifies the text displayed in the pullDown panel while the UI component is being refreshed."
  },
  "dxLookupOptions.searchEnabled": {
    "shortDescription": "Specifies whether the search box is visible."
  },
  "dxLookupOptions.searchPlaceholder": {
    "shortDescription": "The text that is provided as a hint in the lookup's search bar."
  },
  "dxLookupOptions.searchStartEvent": {
    "shortDescription": "Specifies the <a href=\"https://en.wikipedia.org/wiki/DOM_events\" target=\"_blank\">DOM events</a> after which the UI component's search results should be updated."
  },
  "dxLookupOptions.showCancelButton": {
    "shortDescription": "Specifies whether to display the **Cancel** button in the lookup window."
  },
  "dxLookupOptions.showClearButton": {
    "shortDescription": "Specifies whether to display the Clear button in the lookup window."
  },
  "dxLookupOptions.showDropDownButton": {
    "shortDescription": "Specifies whether the drop-down button is visible."
  },
  "dxLookupOptions.spellcheck": {
    "shortDescription": "Specifies whether or not the UI component checks the inner text for spelling mistakes."
  },
  "dxLookupOptions.useNativeScrolling": {
    "shortDescription": "Specifies whether or not the UI component uses native scrolling."
  },
  "dxLookupOptions.usePopover": {
    "shortDescription": "Specifies whether to show lookup contents in the [Popover](/api-reference/10%20UI%20Components/dxPopover '/Documentation/ApiReference/UI_Components/dxPopover/') UI component."
  },
  "dxLookupOptions.valueChangeEvent": {
    "depNote": null,
    "shortDescription": "Specifies the <a href=\"https://en.wikipedia.org/wiki/DOM_events\" target=\"_blank\">DOM events</a> after which the UI component's [value](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should be updated."
  },
  "dxMap": {
    "shortDescription": "The Map is an interactive UI component that displays a geographic map with markers and routes."
  },
  "dxMap.addMarker(markerOptions)": {
    "shortDescription": "Adds a marker to the map."
  },
  "dxMap.addRoute(routeOptions)": {
    "shortDescription": "Adds a route to the map."
  },
  "dxMap.click": {
    "shortDescription": "Raised when any location on the map is clicked."
  },
  "dxMap.contentReady": {
    "shortDescription": "Raised when the UI component is rendered and each time the component is repainted."
  },
  "dxMap.markerAdded": {
    "shortDescription": "Raised when a marker is created on the map."
  },
  "dxMap.markerRemoved": {
    "shortDescription": "Raised when a marker is removed from the map."
  },
  "dxMap.ready": {
    "shortDescription": "Raised when the map is ready."
  },
  "dxMap.removeMarker(marker)": {
    "shortDescription": "Removes a marker from the map."
  },
  "dxMap.removeRoute(route)": {
    "shortDescription": "Removes a route from the map."
  },
  "dxMap.routeAdded": {
    "shortDescription": "Raised when a route is created on the map."
  },
  "dxMap.routeRemoved": {
    "shortDescription": "Raised when a route is removed from the map."
  },
  "dxMapOptions.apiKey": {
    "shortDescription": "Keys to authenticate the component within map providers."
  },
  "dxMapOptions.apiKey.azure": {
    "shortDescription": "A key used to authenticate the component within Azure Maps."
  },
  "dxMapOptions.apiKey.bing": {
    "shortDescription": "A key used to authenticate the component within Bing Maps.",
    "depNote": null
  },
  "dxMapOptions.apiKey.google": {
    "shortDescription": "A key used to authenticate the component within Google Maps."
  },
  "dxMapOptions.apiKey.googleStatic": {
    "shortDescription": "A key used to authenticate the component within Google Maps Static."
  },
  "dxMapOptions.autoAdjust": {
    "shortDescription": "Specifies whether the UI component automatically adjusts [center](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/center '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#center') and [zoom](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/zoom.md '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#zoom') property values when adding a new marker or route, or if a new UI component contains markers or routes by default."
  },
  "dxMapOptions.bounds": {
    "shortDescription": ""
  },
  "dxMapOptions.bounds.northEast": {
    "shortDescription": ""
  },
  "dxMapOptions.bounds.northEast.lat": {
    "shortDescription": ""
  },
  "dxMapOptions.bounds.northEast.lng": {
    "shortDescription": ""
  },
  "dxMapOptions.bounds.southWest": {
    "shortDescription": ""
  },
  "dxMapOptions.bounds.southWest.lat": {
    "shortDescription": ""
  },
  "dxMapOptions.bounds.southWest.lng": {
    "shortDescription": ""
  },
  "dxMapOptions.center": {
    "shortDescription": "An object, a string, or an array specifying which part of the map is displayed at the UI component's center using coordinates. The UI component can change this value if [autoAdjust](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/autoAdjust.md '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#autoAdjust') is enabled."
  },
  "dxMapOptions.controls": {
    "shortDescription": "Specifies whether or not map UI component controls are available."
  },
  "dxMapOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxMapOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxMapOptions.markerIconSrc": {
    "shortDescription": "A URL pointing to the custom icon to be used for map markers."
  },
  "dxMapOptions.markers": {
    "shortDescription": "An array of markers displayed on a map."
  },
  "dxMapOptions.markers.iconSrc": {
    "shortDescription": "A URL pointing to the custom icon to be used for the marker."
  },
  "dxMapOptions.markers.location": {
    "shortDescription": "Specifies the marker location."
  },
  "dxMapOptions.markers.onClick": {
    "shortDescription": "A callback function performed when the marker is clicked."
  },
  "dxMapOptions.markers.tooltip": {
    "shortDescription": "A tooltip to be used for the marker."
  },
  "dxMapOptions.markers.tooltip.isShown": {
    "shortDescription": "Specifies whether a tooltip is visible by default or not."
  },
  "dxMapOptions.markers.tooltip.text": {
    "shortDescription": "Specifies the text or HTML markup displayed in the tooltip."
  },
  "dxMapOptions.onClick": {
    "shortDescription": "A function that is executed when any location on the map is clicked or tapped."
  },
  "dxMapOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxMapOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxMapOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxMapOptions.onMarkerAdded": {
    "shortDescription": "A function that is executed when a marker is created on the map."
  },
  "dxMapOptions.onMarkerRemoved": {
    "shortDescription": "A function that is executed when a marker is removed from the map."
  },
  "dxMapOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxMapOptions.onReady": {
    "shortDescription": "A function that is executed when the map is ready."
  },
  "dxMapOptions.onRouteAdded": {
    "shortDescription": "A function that is executed when a route is created on the map."
  },
  "dxMapOptions.onRouteRemoved": {
    "shortDescription": "A function that is executed when a route is removed from the map."
  },
  "dxMapOptions.provider": {
    "shortDescription": "The name of the current map data provider."
  },
  "dxMapOptions.providerConfig": {
    "shortDescription": "A [provider](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/provider.md '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#provider') configuration object."
  },
  "dxMapOptions.providerConfig.mapId": {
    "shortDescription": "Specifies a [map ID](https://developers.google.com/maps/documentation/get-map-id) for the `google` and `googleStatic` [providers](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/provider.md '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#provider')."
  },
  "dxMapOptions.providerConfig.useAdvancedMarkers": {
    "shortDescription": "Specifies whether to use [advanced markers](https://developers.google.com/maps/documentation/javascript/advanced-markers/migration) with the `google` and `googleStatic` [providers](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/provider.md '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#provider').",
    "depNote": null
  },
  "dxMapOptions.routes": {
    "shortDescription": "An array of routes shown on the map."
  },
  "dxMapOptions.routes.color": {
    "shortDescription": "Specifies the color of the line displaying the route."
  },
  "dxMapOptions.routes.locations": {
    "shortDescription": "Contains an array of objects making up the route."
  },
  "dxMapOptions.routes.mode": {
    "shortDescription": "Specifies a transportation mode to be used in the displayed route."
  },
  "dxMapOptions.routes.opacity": {
    "shortDescription": "Specifies the opacity of the line displaying the route."
  },
  "dxMapOptions.routes.weight": {
    "shortDescription": "Specifies the thickness of the line displaying the route in pixels."
  },
  "dxMapOptions.type": {
    "shortDescription": "The type of a map to display."
  },
  "dxMapOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxMapOptions.zoom": {
    "shortDescription": "The map's zoom level. The UI component can change this value if [autoAdjust](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/autoAdjust.md '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#autoAdjust') is enabled."
  },
  "dxMenu": {
    "shortDescription": "The Menu UI component is a panel with clickable items. A click on an item opens a drop-down menu, which can contain several submenus."
  },
  "dxMenu.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxMenu.submenuHidden": {
    "shortDescription": "Raised after a submenu is hidden."
  },
  "dxMenu.submenuHiding": {
    "shortDescription": "Raised before a submenu is hidden."
  },
  "dxMenu.submenuShowing": {
    "shortDescription": "Raised before a submenu is displayed."
  },
  "dxMenu.submenuShown": {
    "shortDescription": "Raised after a submenu is displayed."
  },
  "dxMenuBase": {
    "shortDescription": "The base class for UI components containing an item collection."
  },
  "dxMenuBase.itemHold": {
    "shortDescription": "Raised when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxMenuBase.selectItem(itemElement)": {
    "shortDescription": "Selects an item found using its DOM node."
  },
  "dxMenuBase.unselectItem(itemElement)": {
    "shortDescription": "Cancels the selection of an item found using its DOM node."
  },
  "dxMenuBaseItem.beginGroup": {
    "shortDescription": "Specifies whether a group separator is displayed over the item."
  },
  "dxMenuBaseItem.closeMenuOnClick": {
    "shortDescription": "Specifies if a menu is closed when a user clicks the item. Does not apply to the root items."
  },
  "dxMenuBaseItem.disabled": {
    "shortDescription": "Specifies whether the menu item responds to user interaction."
  },
  "dxMenuBaseItem.html": {
    "shortDescription": "Specifies the HTML markup to be inserted into the item element."
  },
  "dxMenuBaseItem.icon": {
    "shortDescription": "Specifies the menu item's icon."
  },
  "dxMenuBaseItem.items": {
    "shortDescription": "Specifies nested menu items."
  },
  "dxMenuBaseItem.selectable": {
    "shortDescription": "Specifies whether or not a user can select a menu item."
  },
  "dxMenuBaseItem.selected": {
    "shortDescription": "Specifies whether or not the item is selected."
  },
  "dxMenuBaseItem.text": {
    "shortDescription": "Specifies the text inserted into the item element."
  },
  "dxMenuBaseItem.visible": {
    "shortDescription": "Specifies whether or not the menu item is visible."
  },
  "dxMenuBaseOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxMenuBaseOptions.animation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Components/dxMenuBase/1%20Configuration/animation/show.md '{basewidgetpath}/Configuration/animation/#show') and [hide](/api-reference/10%20UI%20Components/dxMenuBase/1%20Configuration/animation/hide.md '{basewidgetpath}/Configuration/animation/#hide')."
  },
  "dxMenuBaseOptions.animation.hide": {
    "shortDescription": "An object that defines the [animation properties](/api-reference/50%20Common/Object%20Structures/animationConfig '/Documentation/ApiReference/Common/Object_Structures/AnimationConfig/') used when the UI component is being hidden."
  },
  "dxMenuBaseOptions.animation.show": {
    "shortDescription": "An object that defines the [animation properties](/api-reference/50%20Common/Object%20Structures/animationConfig '/Documentation/ApiReference/Common/Object_Structures/AnimationConfig/') used when the UI component is being shown."
  },
  "dxMenuBaseOptions.cssClass": {
    "shortDescription": "Specifies the name of the CSS class to be applied to the root menu level and all submenus."
  },
  "dxMenuBaseOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxMenuBaseOptions.itemHoldTimeout": {
    "shortDescription": "The time period in milliseconds before the **onItemHold** event is raised."
  },
  "dxMenuBaseOptions.items": {
    "shortDescription": "Holds an array of menu items."
  },
  "dxMenuBaseOptions.keyExpr": {
    "shortDescription": "Specifies which data field provides keys for TreeView items."
  },
  "dxMenuBaseOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "dxMenuBaseOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxMenuBaseOptions.selectByClick": {
    "shortDescription": "Specifies whether an item is selected if a user clicks it."
  },
  "dxMenuBaseOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "dxMenuBaseOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxMenuBaseOptions.selectionMode": {
    "shortDescription": "Specifies the selection mode supported by the menu."
  },
  "dxMenuBaseOptions.showSubmenuMode": {
    "shortDescription": "Specifies properties of submenu showing and hiding."
  },
  "dxMenuBaseOptions.showSubmenuMode.delay": {
    "shortDescription": "Specifies the delay of submenu show and hiding."
  },
  "dxMenuBaseOptions.showSubmenuMode.delay.hide": {
    "shortDescription": "The time span after which the submenu is hidden."
  },
  "dxMenuBaseOptions.showSubmenuMode.delay.show": {
    "shortDescription": "The time span after which the submenu is shown."
  },
  "dxMenuBaseOptions.showSubmenuMode.name": {
    "shortDescription": "Specifies the mode name."
  },
  "dxMenuItem.items": {
    "shortDescription": "Specifies nested menu items."
  },
  "dxMenuItem.linkAttr": {
    "shortDescription": "Specifies link attributes for the [url](/api-reference/_hidden/dxMenuItem/url.md '/Documentation/ApiReference/UI_Components/dxMenu/Configuration/items/#url') option."
  },
  "dxMenuItem.url": {
    "shortDescription": "Specifies a web address to be opened when a user clicks on an item."
  },
  "dxMenuOptions.adaptivityEnabled": {
    "shortDescription": "Specifies whether adaptive rendering is enabled. This property is in effect only if the [orientation](/api-reference/10%20UI%20Components/dxMenu/1%20Configuration/orientation.md '/Documentation/ApiReference/UI_Components/dxMenu/Configuration/#orientation') is *\"horizontal\"*."
  },
  "dxMenuOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxMenuOptions.hideSubmenuOnMouseLeave": {
    "shortDescription": "Specifies whether or not the submenu is hidden when the mouse pointer leaves it."
  },
  "dxMenuOptions.items": {
    "shortDescription": "Holds an array of menu items."
  },
  "dxMenuOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxMenuOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxMenuOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxMenuOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxMenuOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxMenuOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxMenuOptions.onItemReordered": {
    "shortDescription": "A function that is executed after a collection item is moved to another position."
  },
  "dxMenuOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxMenuOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a collection item is selected or selection is canceled."
  },
  "dxMenuOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxMenuOptions.onSubmenuHidden": {
    "shortDescription": "A function that is executed after a submenu is hidden."
  },
  "dxMenuOptions.onSubmenuHiding": {
    "shortDescription": "A function that is executed before a submenu is hidden."
  },
  "dxMenuOptions.onSubmenuShowing": {
    "shortDescription": "A function that is executed before a submenu is displayed."
  },
  "dxMenuOptions.onSubmenuShown": {
    "shortDescription": "A function that is executed after a submenu is displayed."
  },
  "dxMenuOptions.orientation": {
    "shortDescription": "Specifies whether the menu has horizontal or vertical orientation."
  },
  "dxMenuOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxMenuOptions.showFirstSubmenuMode": {
    "shortDescription": "Specifies properties for showing and hiding the first level submenu."
  },
  "dxMenuOptions.showFirstSubmenuMode.delay": {
    "shortDescription": "Specifies the delay in submenu showing and hiding."
  },
  "dxMenuOptions.showFirstSubmenuMode.delay.hide": {
    "shortDescription": "The time span after which the submenu is hidden."
  },
  "dxMenuOptions.showFirstSubmenuMode.delay.show": {
    "shortDescription": "The time span after which the submenu is shown."
  },
  "dxMenuOptions.showFirstSubmenuMode.name": {
    "shortDescription": "Specifies the mode name."
  },
  "dxMenuOptions.submenuDirection": {
    "shortDescription": "Specifies the direction at which the submenus are displayed."
  },
  "dxMultiView": {
    "shortDescription": "The MultiView is a UI component that contains several views. An end user navigates through the views by swiping them in the horizontal direction."
  },
  "dxMultiView.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxMultiViewOptions.animationEnabled": {
    "shortDescription": "Specifies whether or not to animate the displayed item change."
  },
  "dxMultiViewOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxMultiViewOptions.deferRendering": {
    "shortDescription": "Specifies whether to render the view's content when it is displayed. If **false**, the content is rendered immediately."
  },
  "dxMultiViewOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxMultiViewOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxMultiViewOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "dxMultiViewOptions.loop": {
    "shortDescription": "A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped."
  },
  "dxMultiViewOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxMultiViewOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxMultiViewOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxMultiViewOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxMultiViewOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxMultiViewOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxMultiViewOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxMultiViewOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxMultiViewOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a collection item is selected or selection is canceled."
  },
  "dxMultiViewOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxMultiViewOptions.selectedIndex": {
    "shortDescription": "The index of the currently displayed item."
  },
  "dxMultiViewOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxMultiViewOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxMultiViewOptions.swipeEnabled": {
    "shortDescription": "A Boolean value specifying whether or not to allow users to change the selected index by swiping."
  },
  "dxNumberBox": {
    "shortDescription": "The NumberBox is a UI component that displays a numeric value and allows a user to modify it by typing in a value, and incrementing or decrementing it using the keyboard or mouse."
  },
  "dxNumberBox.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxNumberBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxNumberBoxOptions.buttons": {
    "shortDescription": "Allows you to add custom buttons to the input text field."
  },
  "dxNumberBoxOptions.format": {
    "shortDescription": "Specifies the value's display format and controls user input accordingly."
  },
  "dxNumberBoxOptions.invalidValueMessage": {
    "shortDescription": "Specifies the text of the message displayed if the specified value is not a number."
  },
  "dxNumberBoxOptions.mask": {
    "shortDescription": "The editor mask that specifies the custom format of the entered string."
  },
  "dxNumberBoxOptions.maskChar": {
    "shortDescription": "Specifies a mask placeholder. A single character is recommended."
  },
  "dxNumberBoxOptions.maskInvalidMessage": {
    "shortDescription": "A message displayed when the entered text does not match the specified pattern."
  },
  "dxNumberBoxOptions.maskRules": {
    "shortDescription": "Specifies custom mask rules."
  },
  "dxNumberBoxOptions.max": {
    "shortDescription": "The maximum value accepted by the number box."
  },
  "dxNumberBoxOptions.min": {
    "shortDescription": "The minimum value accepted by the number box."
  },
  "dxNumberBoxOptions.mode": {
    "shortDescription": "Specifies the value to be passed to the <a href=\"http://www.w3schools.com/tags/att_input_type.asp\" target=\"_blank\">type</a> attribute of the underlying `<input>` element."
  },
  "dxNumberBoxOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxNumberBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxNumberBoxOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxNumberBoxOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxNumberBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxNumberBoxOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxNumberBoxOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxNumberBoxOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxNumberBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxNumberBoxOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxNumberBoxOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxNumberBoxOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxNumberBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxNumberBoxOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxNumberBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxNumberBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxNumberBoxOptions.showMaskMode": {
    "shortDescription": "Specifies when the UI component shows the [mask](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/mask.md '{basewidgetpath}/Configuration/#mask'). Applies only if [useMaskedValue](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/useMaskedValue.md '{basewidgetpath}/Configuration/#useMaskedValue') is **true**."
  },
  "dxNumberBoxOptions.showSpinButtons": {
    "shortDescription": "Specifies whether to show the buttons that change the [value](/api-reference/10%20UI%20Components/dxNumberBox/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxNumberBox/Configuration/#value') by a [step](/api-reference/10%20UI%20Components/dxNumberBox/1%20Configuration/step.md '/Documentation/ApiReference/UI_Components/dxNumberBox/Configuration/#step')."
  },
  "dxNumberBoxOptions.spellcheck": {
    "shortDescription": "Specifies whether or not the UI component checks the inner text for spelling mistakes."
  },
  "dxNumberBoxOptions.step": {
    "shortDescription": "Specifies how much the UI component's value changes when using the spin buttons, Up/Down arrow keys, or mouse wheel."
  },
  "dxNumberBoxOptions.useLargeSpinButtons": {
    "shortDescription": "Specifies whether to use touch friendly spin buttons. Applies only if [showSpinButtons](/api-reference/10%20UI%20Components/dxNumberBox/1%20Configuration/showSpinButtons.md '/Documentation/ApiReference/UI_Components/dxNumberBox/Configuration/#showSpinButtons') is **true**."
  },
  "dxNumberBoxOptions.useMaskedValue": {
    "shortDescription": "Specifies whether the [value](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should contain mask characters or not."
  },
  "dxNumberBoxOptions.value": {
    "shortDescription": "The current number box value."
  },
  "dxOverlay": {
    "shortDescription": "The **Overlay** UI component represents a window overlaying the current view. It displays data located within the HTML element representing the UI component."
  },
  "dxOverlay.content()": {
    "shortDescription": "Gets the UI component's content."
  },
  "dxOverlay.hidden": {
    "shortDescription": "Raised after the UI component is hidden."
  },
  "dxOverlay.hide()": {
    "shortDescription": "Hides the UI component."
  },
  "dxOverlay.hiding": {
    "shortDescription": "Raised before the UI component is hidden."
  },
  "dxOverlay.repaint()": {
    "shortDescription": "Recalculates the UI component's size and position without rerendering."
  },
  "dxOverlay.show()": {
    "shortDescription": "Shows the UI component."
  },
  "dxOverlay.showing": {
    "shortDescription": "Raised before the UI component is displayed."
  },
  "dxOverlay.shown": {
    "shortDescription": "Raised after the UI component is displayed."
  },
  "dxOverlay.toggle(showing)": {
    "shortDescription": "Shows or hides the UI component depending on the argument."
  },
  "dxOverlayAnimation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Widgets/dxOverlay/1%20Configuration/animation/show.md '{basewidgetpath}/Configuration/animation/#show') and [hide](/api-reference/10%20UI%20Widgets/dxOverlay/1%20Configuration/animation/hide.md '{basewidgetpath}/Configuration/animation/#hide')."
  },
  "dxOverlayOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxOverlayOptions.animation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Widgets/dxOverlay/1%20Configuration/animation/show.md '{basewidgetpath}/Configuration/animation/#show') and [hide](/api-reference/10%20UI%20Widgets/dxOverlay/1%20Configuration/animation/hide.md '{basewidgetpath}/Configuration/animation/#hide')."
  },
  "dxOverlayOptions.animation.hide": {
    "shortDescription": "An object that defines the [animation properties](/api-reference/50%20Common/Object%20Structures/AnimationConfig '/Documentation/ApiReference/Common/Object_Structures/AnimationConfig/') used when the UI component is being hidden."
  },
  "dxOverlayOptions.animation.show": {
    "shortDescription": "An object that defines the [animation properties](/api-reference/50%20Common/Object%20Structures/AnimationConfig '/Documentation/ApiReference/Common/Object_Structures/AnimationConfig/') used when the UI component is being shown."
  },
  "dxOverlayOptions.closeOnOutsideClick": {
    "shortDescription": "Specifies whether to close the UI component if a user clicks outside it.",
    "depNote": "Use the hideOnOutsideClick option instead."
  },
  "dxOverlayOptions.contentTemplate": {
    "shortDescription": "Specifies a custom template for the UI component content."
  },
  "dxOverlayOptions.deferRendering": {
    "shortDescription": "Specifies whether to render the UI component's content when it is displayed. If **false**, the content is rendered immediately."
  },
  "dxOverlayOptions.elementAttr": {
    "shortDescription": "Specifies the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\" target=\"_blank\">global attributes</a> to be attached to the UI component's container element.",
    "depNote": null
  },
  "dxOverlayOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxOverlayOptions.hideOnOutsideClick": {
    "shortDescription": "Specifies whether to hide the UI component if a user clicks outside it."
  },
  "dxOverlayOptions.hideOnParentScroll": {
    "shortDescription": "Specifies whether to hide the {WidgetName} when users scroll one of its parent elements."
  },
  "dxOverlayOptions.maxHeight": {
    "shortDescription": "Specifies the maximum height the UI component can reach while resizing."
  },
  "dxOverlayOptions.maxWidth": {
    "shortDescription": "Specifies the maximum width the UI component can reach while resizing."
  },
  "dxOverlayOptions.minHeight": {
    "shortDescription": "Specifies the minimum height the UI component can reach while resizing."
  },
  "dxOverlayOptions.minWidth": {
    "shortDescription": "Specifies the minimum width the UI component can reach while resizing."
  },
  "dxOverlayOptions.onHidden": {
    "shortDescription": "A function that is executed after the UI component is hidden."
  },
  "dxOverlayOptions.onHiding": {
    "shortDescription": "A function that is executed before the UI component is hidden."
  },
  "dxOverlayOptions.onShowing": {
    "shortDescription": "A function that is executed before the UI component is displayed."
  },
  "dxOverlayOptions.onShown": {
    "shortDescription": "A function that is executed after the UI component is displayed."
  },
  "dxOverlayOptions.position": {
    "shortDescription": "Positions the UI component."
  },
  "dxOverlayOptions.shading": {
    "shortDescription": "Specifies whether to shade the background when the UI component is active."
  },
  "dxOverlayOptions.shadingColor": {
    "shortDescription": "Specifies the shading color. Applies only if [shading](/api-reference/10%20UI%20Components/dxOverlay/1%20Configuration/shading.md '{basewidgetpath}/Configuration/#shading') is enabled."
  },
  "dxOverlayOptions.visible": {
    "shortDescription": "A Boolean value specifying whether or not the UI component is visible."
  },
  "dxOverlayOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxOverlayOptions.wrapperAttr": {
    "shortDescription": "Specifies the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\" target=\"_blank\">global attributes</a> for the UI component's wrapper element."
  },
  "dxPagination": {
    "shortDescription": "Pagination is a UI component that allows users to navigate through pages and change page size at runtime. Pagination UI includes a page navigator and several optional elements: a page size selector, navigation buttons, and page information."
  },
  "dxPagination.getPageCount()": {
    "shortDescription": "Gets the number of pages."
  },
  "dxPaginationOptions.allowedPageSizes": {
    "shortDescription": "Specifies page sizes available in the page size selector."
  },
  "dxPaginationOptions.itemCount": {
    "shortDescription": "Specifies the total number of items."
  },
  "dxPaginationOptions.pageIndex": {
    "shortDescription": "Specifies the page index."
  },
  "dxPaginationOptions.pageSize": {
    "shortDescription": "Specifies the page size."
  },
  "dxPieChart": {
    "shortDescription": "The PieChart is a UI component that visualizes data as a circle divided into sectors that each represents a portion of the whole."
  },
  "dxPieChart.getInnerRadius()": {
    "shortDescription": "Gets the radius of the doughnut hole in pixels. Applies only when the [type](/api-reference/10%20UI%20Components/dxPieChart/1%20Configuration/type.md '/Documentation/ApiReference/UI_Components/dxPieChart/Configuration/#type') is *\"doughnut\"* or *\"donut\"*."
  },
  "dxPieChart.legendClick": {
    "shortDescription": "Raised when a [legend item](/concepts/05%20UI%20Components/PieChart/35%20Legend/00%20Overview.md '/Documentation/Guide/UI_Components/PieChart/Legend/Overview/') is clicked or tapped."
  },
  "dxPieChartAdaptiveLayout": {
    "shortDescription": "Specifies adaptive layout properties."
  },
  "dxPieChartAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPieChartAnnotationConfig.name": {
    "shortDescription": "Specifies the annotation's name."
  },
  "dxPieChartCommonAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPieChartCommonAnnotationConfig.argument": {
    "shortDescription": "Positions the annotation relative to a specific argument."
  },
  "dxPieChartCommonAnnotationConfig.customizeTooltip": {
    "shortDescription": "Customizes the text and appearance of the annotation's tooltip."
  },
  "dxPieChartCommonAnnotationConfig.location": {
    "shortDescription": "Specifies an annotation's position on the surface of a specific [argument](/api-reference/_hidden/dxPieChartCommonAnnotationConfig/argument.md '/Documentation/ApiReference/UI_Components/dxPieChart/Configuration/commonAnnotationSettings/#argument')."
  },
  "dxPieChartCommonAnnotationConfig.series": {
    "shortDescription": "Anchors the annotation to a series point. Accepts the [name](/api-reference/10%20UI%20Components/dxPieChart/5%20Series%20Types/PieChartSeries/name.md '/Documentation/ApiReference/UI_Components/dxPieChart/Configuration/series/#name') of the point's series."
  },
  "dxPieChartCommonAnnotationConfig.template": {
    "shortDescription": "Specifies a custom template for the annotation. Applies only if the [type](/api-reference/_hidden/BaseWidgetAnnotationConfig/type.md '{basewidgetpath}/Configuration/annotations/#type') is *\"custom\"*."
  },
  "dxPieChartCommonAnnotationConfig.tooltipTemplate": {
    "shortDescription": "Specifies a custom template for an annotation's tooltip."
  },
  "dxPieChartLegend": {
    "shortDescription": "Specifies PieChart legend properties."
  },
  "dxPieChartOptions.adaptiveLayout": {
    "shortDescription": "Specifies adaptive layout properties."
  },
  "dxPieChartOptions.adaptiveLayout.keepLabels": {
    "shortDescription": "Specifies whether point labels should be kept when the UI component adapts the layout."
  },
  "dxPieChartOptions.annotations": {
    "shortDescription": "Specifies the annotation collection."
  },
  "dxPieChartOptions.centerTemplate": {
    "shortDescription": "Specifies a custom template for content in the pie's center."
  },
  "dxPieChartOptions.commonAnnotationSettings": {
    "shortDescription": "Specifies settings common for all annotations in the PieChart."
  },
  "dxPieChartOptions.commonSeriesSettings": {
    "shortDescription": "An object defining the configuration properties that are common for all series of the PieChart UI component."
  },
  "dxPieChartOptions.customizeAnnotation": {
    "shortDescription": "Customizes an individual [annotation](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAnnotationSettings '{basewidgetpath}/Configuration/annotations/')."
  },
  "dxPieChartOptions.diameter": {
    "shortDescription": "Specifies the diameter of the pie."
  },
  "dxPieChartOptions.innerRadius": {
    "shortDescription": "Specifies the fraction of the inner radius relative to the total radius in the series of the 'doughnut' type. The value should be between 0 and 1."
  },
  "dxPieChartOptions.legend": {
    "shortDescription": "Specifies PieChart legend properties."
  },
  "dxPieChartOptions.legend.customizeHint": {
    "shortDescription": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
  },
  "dxPieChartOptions.legend.customizeItems": {
    "shortDescription": "Allows you to change the order, text, and visibility of legend items."
  },
  "dxPieChartOptions.legend.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed by a legend item."
  },
  "dxPieChartOptions.legend.hoverMode": {
    "shortDescription": "Specifies what chart elements to highlight when a corresponding item in the legend is hovered over."
  },
  "dxPieChartOptions.legend.markerTemplate": {
    "shortDescription": "Specifies an SVG element that serves as a custom legend item marker."
  },
  "dxPieChartOptions.minDiameter": {
    "shortDescription": "Specifies the minimum diameter of the pie."
  },
  "dxPieChartOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxPieChartOptions.onDone": {
    "shortDescription": "A function that is executed when all series are ready."
  },
  "dxPieChartOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxPieChartOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxPieChartOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxPieChartOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxPieChartOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxPieChartOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxPieChartOptions.onLegendClick": {
    "shortDescription": "A function that is executed when a [legend item](/concepts/05%20UI%20Components/PieChart/35%20Legend/00%20Overview.md '/Documentation/Guide/UI_Components/PieChart/Legend/Overview/') is clicked or tapped."
  },
  "dxPieChartOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxPieChartOptions.onPointClick": {
    "shortDescription": "A function that is executed when a series point is clicked or tapped."
  },
  "dxPieChartOptions.onPointHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a series point."
  },
  "dxPieChartOptions.onPointSelectionChanged": {
    "shortDescription": "A function that is executed when a series point is selected or selection is canceled."
  },
  "dxPieChartOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxPieChartOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxPieChartOptions.palette": {
    "shortDescription": "Sets the palette to be used to colorize series and their elements."
  },
  "dxPieChartOptions.resolveLabelOverlapping": {
    "shortDescription": "Specifies how a chart must behave when [point labels](/concepts/05%20UI%20Components/PieChart/15%20Point%20Labels/00%20Overview.md '/Documentation/Guide/UI_Components/PieChart/Point_Labels/Overview/') overlap."
  },
  "dxPieChartOptions.segmentsDirection": {
    "shortDescription": "Specifies the direction that the pie chart segments will occupy."
  },
  "dxPieChartOptions.series": {
    "shortDescription": "Specifies properties for the series of the PieChart UI component."
  },
  "dxPieChartOptions.seriesTemplate": {
    "shortDescription": "Defines properties for the series template."
  },
  "dxPieChartOptions.seriesTemplate.customizeSeries": {
    "shortDescription": "Specifies a callback function that returns a [series](/api-reference/10%20UI%20Components/dxPieChart/1%20Configuration/series '/Documentation/ApiReference/UI_Components/dxPieChart/Configuration/series/') object with individual series settings."
  },
  "dxPieChartOptions.seriesTemplate.nameField": {
    "shortDescription": "Specifies a data source field that represents the series name."
  },
  "dxPieChartOptions.sizeGroup": {
    "shortDescription": "Allows you to display several adjoining pies in the same size."
  },
  "dxPieChartOptions.startAngle": {
    "shortDescription": "Specifies the angle in arc degrees from which the first segment of a pie chart should start."
  },
  "dxPieChartOptions.type": {
    "shortDescription": "Specifies the type of the pie chart series."
  },
  "dxPieChartSeriesTypes": {
    "shortDescription": "This section lists the objects that define properties to be used to configure series of particular types."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries": {
    "shortDescription": "An object that defines configuration properties for chart series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.argumentField": {
    "shortDescription": "Specifies the data source field that provides arguments for series points."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.argumentType": {
    "shortDescription": "Specifies the required type for series arguments."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.border": {
    "shortDescription": "An object defining the series border configuration properties."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.border.color": {
    "shortDescription": "Sets a border color for a series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.border.dashStyle": {
    "shortDescription": "Specifies a dash style for the border of a series point."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.border.visible": {
    "shortDescription": "Sets border visibility for a series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.border.width": {
    "shortDescription": "Sets a border width for a series in pixels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.color": {
    "shortDescription": "Specifies a series color."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverMode": {
    "shortDescription": "Specifies the chart elements to highlight when a series is hovered over."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle": {
    "shortDescription": "An object defining configuration properties for a hovered series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border": {
    "shortDescription": "An object defining the border properties for a hovered series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.color": {
    "shortDescription": "Sets a border color for the series when it is hovered over."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.dashStyle": {
    "shortDescription": "Specifies a dash style for the border of a series point when this point is hovered over."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.visible": {
    "shortDescription": "Sets border visibility for a hovered series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.width": {
    "shortDescription": "Sets a border width for a hovered series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.color": {
    "shortDescription": "Sets the color for the series when it is hovered over."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching": {
    "shortDescription": "Specifies the hatching properties to be applied when a point is hovered over."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.direction": {
    "shortDescription": "Specifies how to apply hatching to highlight the hovered point."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.opacity": {
    "shortDescription": "Specifies the opacity of hatching lines."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.step": {
    "shortDescription": "Specifies the distance between two hatching lines in pixels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.width": {
    "shortDescription": "Specifies the width of hatching lines in pixels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.highlight": {
    "shortDescription": "Specifies whether to lighten the series when a user points to it."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label": {
    "shortDescription": "An object defining the label configuration properties."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.argumentFormat": {
    "shortDescription": "Formats the point argument before it is displayed in the point label. To format the point value, use the [format](/api-reference/10%20UI%20Components/dxPieChart/5%20Series%20Types/CommonPieChartSeries/label/format.md '/Documentation/ApiReference/UI_Components/dxPieChart/Configuration/series/label/#format') property."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.backgroundColor": {
    "shortDescription": "Colors the point labels' background. The default color is inherited from the points."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.border": {
    "shortDescription": "Specifies border properties for point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.border.color": {
    "shortDescription": "Specifies a border color for point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.border.dashStyle": {
    "shortDescription": "Specifies a dash style for the borders of point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.border.visible": {
    "shortDescription": "Indicates whether or not borders are visible in point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.border.width": {
    "shortDescription": "Specifies the border width for point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.connector": {
    "shortDescription": "Specifies connector properties for series point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.color": {
    "shortDescription": "Specifies the color of label connectors."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.visible": {
    "shortDescription": "Indicates whether or not label connectors are visible."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.width": {
    "shortDescription": "Specifies the width of label connectors."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed by point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.displayFormat": {
    "shortDescription": "Specifies the label's text."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.font": {
    "shortDescription": "Specifies font properties for the text displayed in point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.format": {
    "shortDescription": "Formats a value before it is displayed in a point label."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.position": {
    "shortDescription": "Specifies a label position relative to the chart."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.radialOffset": {
    "shortDescription": "Specifies how to shift labels from their initial position in a radial direction in pixels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.rotationAngle": {
    "shortDescription": "Specifies the angle used to rotate point labels from their initial position."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.textOverflow": {
    "shortDescription": "Specifies what to do with label texts that overflow the allocated space after applying [wordWrap](/api-reference/10%20UI%20Components/dxPieChart/5%20Series%20Types/CommonPieChartSeries/label/wordWrap.md '/Documentation/ApiReference/UI_Components/dxPieChart/Configuration/series/label/#wordWrap'): hide, truncate them and display an ellipsis, or do nothing."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.visible": {
    "shortDescription": "Specifies the visibility of point labels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.label.wordWrap": {
    "shortDescription": "Specifies how to wrap label texts if they do not fit into a single line."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.maxLabelCount": {
    "shortDescription": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.minSegmentSize": {
    "shortDescription": "Specifies a minimal size of a displayed pie segment."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionMode": {
    "shortDescription": "<p>Specifies the chart elements to highlight when the series is selected.</p>"
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle": {
    "shortDescription": "An object defining configuration properties for the series when it is selected."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border": {
    "shortDescription": "An object defining the border properties for a selected series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.color": {
    "shortDescription": "Sets a border color for a selected series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.dashStyle": {
    "shortDescription": "Specifies a dash style for the border of a selected series point."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.visible": {
    "shortDescription": "Sets a border visibility for a selected series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.width": {
    "shortDescription": "Sets a border width for a selected series."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.color": {
    "shortDescription": "Sets the color for a series when it is selected."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching": {
    "shortDescription": "Specifies the hatching properties to be applied when a point is selected."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.direction": {
    "shortDescription": "Specifies how to apply hatching to highlight the selected point."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.opacity": {
    "shortDescription": "Specifies the opacity of hatching lines."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.step": {
    "shortDescription": "Specifies the distance between two hatching lines in pixels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.width": {
    "shortDescription": "Specifies the width of hatching lines in pixels."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.highlight": {
    "shortDescription": "Specifies whether to lighten the series when a user selects it."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping": {
    "shortDescription": "Specifies chart segment grouping properties."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.groupName": {
    "shortDescription": "Specifies the name of the grouped chart segment. This name represents the segment in the chart legend."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.mode": {
    "shortDescription": "Specifies the segment grouping mode."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.threshold": {
    "shortDescription": "Specifies a threshold for segment values."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.topCount": {
    "shortDescription": "Specifies how many segments must not be grouped."
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.tagField": {
    "shortDescription": "<p>Specifies the name of the data source field that provides data about a point.</p>"
  },
  "dxPieChartSeriesTypes.CommonPieChartSeries.valueField": {
    "shortDescription": "Specifies the data source field that provides values for series points."
  },
  "dxPieChartSeriesTypes.DoughnutSeries": {
    "shortDescription": "An object defining a series of the **doughnut** type."
  },
  "dxPieChartSeriesTypes.PieSeries": {
    "shortDescription": "An object defining a series of the **pie** type."
  },
  "dxPivotGrid": {
    "shortDescription": "The PivotGrid is a UI component that allows you to display and analyze multi-dimensional data from a local storage or an OLAP cube."
  },
  "dxPivotGrid.bindChart(chart, integrationOptions)": {
    "shortDescription": "Binds a [Chart](/api-reference/10%20UI%20Components/dxChart '/Documentation/ApiReference/UI_Components/dxChart/') to the PivotGrid."
  },
  "dxPivotGrid.cellClick": {
    "shortDescription": "Raised when a pivot grid cell is clicked or tapped."
  },
  "dxPivotGrid.cellPrepared": {
    "shortDescription": "Raised after a pivot grid cell is created."
  },
  "dxPivotGrid.contextMenuPreparing": {
    "shortDescription": "Raised before the context menu is rendered."
  },
  "dxPivotGrid.exporting": {
    "shortDescription": "Raised before data is exported."
  },
  "dxPivotGrid.getDataSource()": {
    "shortDescription": "Gets the **PivotGridDataSource** instance."
  },
  "dxPivotGrid.getFieldChooserPopup()": {
    "shortDescription": "Gets the Popup instance of the field chooser window."
  },
  "dxPivotGrid.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxPivotGrid.updateDimensions()": {
    "shortDescription": "Updates the UI component to the size of its content."
  },
  "dxPivotGridFieldChooser": {
    "shortDescription": "A complementary UI component for the [PivotGrid](/api-reference/10%20UI%20Components/dxPivotGrid '/Documentation/ApiReference/UI_Components/dxPivotGrid/') that allows you to manage data displayed in the PivotGrid. The field chooser is already integrated in the PivotGrid and can be invoked using the context menu. If you need to continuously display the field chooser near the PivotGrid UI component, use the PivotGridFieldChooser UI component."
  },
  "dxPivotGridFieldChooser.applyChanges()": {
    "shortDescription": "Applies changes made in the UI component to the PivotGrid. Takes effect only if [applyChangesMode](/api-reference/10%20UI%20Components/dxPivotGridFieldChooser/1%20Configuration/applyChangesMode.md '/Documentation/ApiReference/UI_Components/dxPivotGridFieldChooser/Configuration/#applyChangesMode') is *\"onDemand\"*."
  },
  "dxPivotGridFieldChooser.cancelChanges()": {
    "shortDescription": "Cancels changes made in the UI component without applying them to the PivotGrid. Takes effect only if [applyChangesMode](/api-reference/10%20UI%20Components/dxPivotGridFieldChooser/1%20Configuration/applyChangesMode.md '/Documentation/ApiReference/UI_Components/dxPivotGridFieldChooser/Configuration/#applyChangesMode') is *\"onDemand\"*."
  },
  "dxPivotGridFieldChooser.contextMenuPreparing": {
    "shortDescription": "Raised before the context menu is rendered."
  },
  "dxPivotGridFieldChooser.getDataSource()": {
    "shortDescription": "Gets the **PivotGridDataSource** instance."
  },
  "dxPivotGridFieldChooser.updateDimensions()": {
    "shortDescription": "Updates the UI component to the size of its content."
  },
  "dxPivotGridFieldChooserOptions.allowSearch": {
    "shortDescription": "Specifies whether the field chooser allows search operations in the *\"All Fields\"* section."
  },
  "dxPivotGridFieldChooserOptions.applyChangesMode": {
    "shortDescription": "Specifies when to apply changes made in the UI component to the PivotGrid."
  },
  "dxPivotGridFieldChooserOptions.dataSource": {
    "shortDescription": "The data source of a [PivotGrid](/api-reference/10%20UI%20Components/dxPivotGrid '/Documentation/ApiReference/UI_Components/dxPivotGrid/') UI component."
  },
  "dxPivotGridFieldChooserOptions.encodeHtml": {
    "shortDescription": "Specifies whether HTML tags are displayed as plain text or applied to the values of the [header filter](/api-reference/10%20UI%20Components/dxPivotGridFieldChooser/1%20Configuration/headerFilter '/Documentation/ApiReference/UI_Components/dxPivotGridFieldChooser/Configuration/headerFilter/')."
  },
  "dxPivotGridFieldChooserOptions.headerFilter": {
    "shortDescription": "Configures the header filter feature."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.allowSearch": {
    "shortDescription": "Specifies whether searching is enabled in the header filter.",
    "depNote": "Use [search.enabled](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/enabled.md '/Documentation/ApiReference/UI_Components/dxPivotGridFieldChooser/Configuration/headerFilter/search/#enabled') instead."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.allowSelectAll": {
    "shortDescription": "Specifies whether a \"Select All\" option is available to users."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.height": {
    "shortDescription": "Specifies the height of the popup menu containing filtering values."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.search": {
    "shortDescription": "Configures the header filter's search functionality."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.searchTimeout": {
    "shortDescription": "Specifies a delay in milliseconds between when a user finishes typing in the header filter's search panel, and when the search is executed.",
    "depNote": "Use [search.timeout](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/timeout.md '/Documentation/ApiReference/UI_Components/dxPivotGridFieldChooser/Configuration/headerFilter/search/#timeout') instead."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.showRelevantValues": {
    "shortDescription": "Specifies whether to show all field values or only those that satisfy the other applied filters."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.texts": {
    "shortDescription": "Configures the texts of the popup menu's elements."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.texts.cancel": {
    "shortDescription": "Specifies the text of the button that closes the popup menu without applying a filter."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.texts.emptyValue": {
    "shortDescription": "Specifies the name of the item that represents empty values in the popup menu."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.texts.ok": {
    "shortDescription": "Specifies the text of the button that applies a filter."
  },
  "dxPivotGridFieldChooserOptions.headerFilter.width": {
    "shortDescription": "Specifies the width of the popup menu containing filtering values."
  },
  "dxPivotGridFieldChooserOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxPivotGridFieldChooserOptions.layout": {
    "shortDescription": "Specifies the field chooser layout."
  },
  "dxPivotGridFieldChooserOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxPivotGridFieldChooserOptions.onContextMenuPreparing": {
    "shortDescription": "A function that is executed before the context menu is rendered."
  },
  "dxPivotGridFieldChooserOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxPivotGridFieldChooserOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxPivotGridFieldChooserOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxPivotGridFieldChooserOptions.searchTimeout": {
    "shortDescription": "Specifies a delay in milliseconds between when a user finishes typing in the field chooser's search panel, and when the search is executed."
  },
  "dxPivotGridFieldChooserOptions.state": {
    "shortDescription": "The UI component's state."
  },
  "dxPivotGridFieldChooserOptions.texts": {
    "shortDescription": "Strings that can be changed or localized in the PivotGridFieldChooser UI component."
  },
  "dxPivotGridFieldChooserOptions.texts.allFields": {
    "shortDescription": "The string to display instead of **All Fields**."
  },
  "dxPivotGridFieldChooserOptions.texts.columnFields": {
    "shortDescription": "The string to display instead of **Column Fields**."
  },
  "dxPivotGridFieldChooserOptions.texts.dataFields": {
    "shortDescription": "The string to display instead of **Data Fields**."
  },
  "dxPivotGridFieldChooserOptions.texts.filterFields": {
    "shortDescription": "The string to display instead of **Filter Fields**."
  },
  "dxPivotGridFieldChooserOptions.texts.rowFields": {
    "shortDescription": "The string to display instead of **Row Fields**."
  },
  "dxPivotGridOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxPivotGridOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxPivotGridOptions.allowExpandAll": {
    "shortDescription": "Allows users to expand/collapse all header items within the same header level. Ignored if the [PivotGridDataSource](/api-reference/30%20Data%20Layer/PivotGridDataSource '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/')'s [paginate](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/paginate.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#paginate') property is **true**."
  },
  "dxPivotGridOptions.allowFiltering": {
    "shortDescription": "Allows a user to filter fields by selecting or deselecting values in the popup menu."
  },
  "dxPivotGridOptions.allowSorting": {
    "shortDescription": "Allows an end user to change sorting properties."
  },
  "dxPivotGridOptions.allowSortingBySummary": {
    "shortDescription": "Allows users to sort the pivot grid by summary values instead of field values. Ignored if the [PivotGridDataSource](/api-reference/30%20Data%20Layer/PivotGridDataSource '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/')'s [paginate](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/paginate.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#paginate') property is **true**."
  },
  "dxPivotGridOptions.dataFieldArea": {
    "shortDescription": "Specifies the area to which data field headers must belong."
  },
  "dxPivotGridOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxPivotGridOptions.encodeHtml": {
    "shortDescription": "Specifies whether HTML tags are displayed as plain text or applied to cell values."
  },
  "dxPivotGridOptions.export": {
    "shortDescription": "Configures client-side exporting."
  },
  "dxPivotGridOptions.export.enabled": {
    "shortDescription": "Enables client-side exporting."
  },
  "dxPivotGridOptions.fieldChooser": {
    "shortDescription": "The **Field Chooser** configuration properties."
  },
  "dxPivotGridOptions.fieldChooser.allowSearch": {
    "shortDescription": "Specifies whether the field chooser allows search operations in the *\"All Fields\"* section."
  },
  "dxPivotGridOptions.fieldChooser.applyChangesMode": {
    "shortDescription": "Specifies when to apply changes made in the field chooser to the PivotGrid."
  },
  "dxPivotGridOptions.fieldChooser.enabled": {
    "shortDescription": "Enables or disables the field chooser."
  },
  "dxPivotGridOptions.fieldChooser.height": {
    "shortDescription": "Specifies the field chooser height."
  },
  "dxPivotGridOptions.fieldChooser.layout": {
    "shortDescription": "Specifies the field chooser layout."
  },
  "dxPivotGridOptions.fieldChooser.searchTimeout": {
    "shortDescription": "Specifies a delay in milliseconds between when a user finishes typing in the field chooser's search panel, and when the search is executed."
  },
  "dxPivotGridOptions.fieldChooser.texts": {
    "shortDescription": "Strings that can be changed or localized in the pivot grid's integrated Field Chooser."
  },
  "dxPivotGridOptions.fieldChooser.texts.allFields": {
    "shortDescription": "The string to display instead of **All Fields**."
  },
  "dxPivotGridOptions.fieldChooser.texts.columnFields": {
    "shortDescription": "The string to display instead of **Column Fields**."
  },
  "dxPivotGridOptions.fieldChooser.texts.dataFields": {
    "shortDescription": "The string to display instead of **Data Fields**."
  },
  "dxPivotGridOptions.fieldChooser.texts.filterFields": {
    "shortDescription": "The string to display instead of **Filter Fields**."
  },
  "dxPivotGridOptions.fieldChooser.texts.rowFields": {
    "shortDescription": "The string to display instead of **Row Fields**."
  },
  "dxPivotGridOptions.fieldChooser.title": {
    "shortDescription": "Specifies the text to display as a title of the field chooser popup window."
  },
  "dxPivotGridOptions.fieldChooser.width": {
    "shortDescription": "Specifies the field chooser width."
  },
  "dxPivotGridOptions.fieldPanel": {
    "shortDescription": "Configures the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.allowFieldDragging": {
    "shortDescription": "Makes fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel') draggable."
  },
  "dxPivotGridOptions.fieldPanel.showColumnFields": {
    "shortDescription": "Shows/hides column fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.showDataFields": {
    "shortDescription": "Shows/hides data fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.showFilterFields": {
    "shortDescription": "Shows/hides filter fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.showRowFields": {
    "shortDescription": "Shows/hides row fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.texts": {
    "shortDescription": "Specifies the placeholders of the field areas."
  },
  "dxPivotGridOptions.fieldPanel.texts.columnFieldArea": {
    "shortDescription": "Specifies the placeholder of the [column field area](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.texts.dataFieldArea": {
    "shortDescription": "Specifies the placeholder of the [data field area](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.texts.filterFieldArea": {
    "shortDescription": "Specifies the placeholder of the [filter field area](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.texts.rowFieldArea": {
    "shortDescription": "Specifies the placeholder of the [row field area](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.fieldPanel.visible": {
    "shortDescription": "Shows/hides the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "dxPivotGridOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxPivotGridOptions.headerFilter": {
    "shortDescription": "Configures the header filter feature."
  },
  "dxPivotGridOptions.headerFilter.allowSearch": {
    "shortDescription": "Specifies whether searching is enabled in the header filter.",
    "depNote": "Use [search.enabled](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/enabled.md '/Documentation/ApiReference/UI_Components/dxPivotGrid/Configuration/headerFilter/search/#enabled') instead."
  },
  "dxPivotGridOptions.headerFilter.allowSelectAll": {
    "shortDescription": "Specifies whether a \"Select All\" option is available to users."
  },
  "dxPivotGridOptions.headerFilter.height": {
    "shortDescription": "Specifies the height of the popup menu containing filtering values."
  },
  "dxPivotGridOptions.headerFilter.search": {
    "shortDescription": "Configures the header filter's search functionality."
  },
  "dxPivotGridOptions.headerFilter.searchTimeout": {
    "shortDescription": "Specifies a delay in milliseconds between when a user finishes typing in the header filter's search panel, and when the search is executed.",
    "depNote": "Use [search.timeout](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/timeout.md '/Documentation/ApiReference/UI_Components/dxPivotGrid/Configuration/headerFilter/search/#timeout') instead."
  },
  "dxPivotGridOptions.headerFilter.showRelevantValues": {
    "shortDescription": "Specifies whether to show all field values or only those that satisfy the other applied filters."
  },
  "dxPivotGridOptions.headerFilter.texts": {
    "shortDescription": "Configures the texts of the popup menu's elements."
  },
  "dxPivotGridOptions.headerFilter.texts.cancel": {
    "shortDescription": "Specifies the text of the button that closes the popup menu without applying a filter."
  },
  "dxPivotGridOptions.headerFilter.texts.emptyValue": {
    "shortDescription": "Specifies the name of the item that represents empty values in the popup menu."
  },
  "dxPivotGridOptions.headerFilter.texts.ok": {
    "shortDescription": "Specifies the text of the button that applies a filter."
  },
  "dxPivotGridOptions.headerFilter.width": {
    "shortDescription": "Specifies the width of the popup menu containing filtering values."
  },
  "dxPivotGridOptions.hideEmptySummaryCells": {
    "shortDescription": "Specifies whether or not to hide rows and columns with no data."
  },
  "dxPivotGridOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxPivotGridOptions.loadPanel": {
    "shortDescription": "Specifies properties configuring the load panel."
  },
  "dxPivotGridOptions.loadPanel.enabled": {
    "shortDescription": "Enables or disables the load panel."
  },
  "dxPivotGridOptions.loadPanel.height": {
    "shortDescription": "Specifies the height of the load panel."
  },
  "dxPivotGridOptions.loadPanel.indicatorSrc": {
    "shortDescription": "Specifies the URL pointing to an image that will be used as a load indicator."
  },
  "dxPivotGridOptions.loadPanel.shading": {
    "shortDescription": "Specifies whether to shade the UI component when the load panel appears."
  },
  "dxPivotGridOptions.loadPanel.shadingColor": {
    "shortDescription": "Specifies the shading color. Applies only if [shading](/api-reference/10%20UI%20Components/dxPivotGrid/1%20Configuration/loadPanel/shading.md '/Documentation/ApiReference/UI_Components/dxPivotGrid/Configuration/loadPanel/#shading') is **true**."
  },
  "dxPivotGridOptions.loadPanel.showIndicator": {
    "shortDescription": "Specifies whether or not to show a load indicator."
  },
  "dxPivotGridOptions.loadPanel.showPane": {
    "shortDescription": "Specifies whether or not to show load panel background."
  },
  "dxPivotGridOptions.loadPanel.text": {
    "shortDescription": "Specifies the text to display inside a load panel."
  },
  "dxPivotGridOptions.loadPanel.width": {
    "shortDescription": "Specifies the width of the load panel."
  },
  "dxPivotGridOptions.onCellClick": {
    "shortDescription": "A function that is executed when a pivot grid cell is clicked or tapped."
  },
  "dxPivotGridOptions.onCellPrepared": {
    "shortDescription": "A function that is executed after a pivot grid cell is created."
  },
  "dxPivotGridOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxPivotGridOptions.onContextMenuPreparing": {
    "shortDescription": "A function that is executed before the context menu is rendered."
  },
  "dxPivotGridOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxPivotGridOptions.onExporting": {
    "shortDescription": "A function that is executed before data is exported."
  },
  "dxPivotGridOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxPivotGridOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxPivotGridOptions.rowHeaderLayout": {
    "shortDescription": "Specifies the layout of items in the [row header](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers')."
  },
  "dxPivotGridOptions.scrolling": {
    "shortDescription": "A configuration object specifying scrolling properties."
  },
  "dxPivotGridOptions.scrolling.mode": {
    "shortDescription": "Specifies the scrolling mode."
  },
  "dxPivotGridOptions.scrolling.useNative": {
    "shortDescription": "Specifies whether or not the UI component uses native scrolling."
  },
  "dxPivotGridOptions.showBorders": {
    "shortDescription": "Specifies whether the outer borders of the grid are visible or not."
  },
  "dxPivotGridOptions.showColumnGrandTotals": {
    "shortDescription": "Specifies whether to display the Grand Total column."
  },
  "dxPivotGridOptions.showColumnTotals": {
    "shortDescription": "Specifies whether to display the Total columns."
  },
  "dxPivotGridOptions.showRowGrandTotals": {
    "shortDescription": "Specifies whether to display the Grand Total row."
  },
  "dxPivotGridOptions.showRowTotals": {
    "shortDescription": "Specifies whether to display the Total rows. Applies only if [rowHeaderLayout](/api-reference/10%20UI%20Components/dxPivotGrid/1%20Configuration/rowHeaderLayout.md '/Documentation/ApiReference/UI_Components/dxPivotGrid/Configuration/#rowHeaderLayout') is *\"standard\"*."
  },
  "dxPivotGridOptions.showTotalsPrior": {
    "shortDescription": "Specifies where to show the total rows or columns."
  },
  "dxPivotGridOptions.stateStoring": {
    "shortDescription": "A configuration object specifying properties related to state storing."
  },
  "dxPivotGridOptions.stateStoring.customLoad": {
    "shortDescription": "Specifies a function that is executed on state loading. Applies only if the [type](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/stateStoring/type.md '{basewidgetpath}/Configuration/stateStoring/#type') is *'custom'*."
  },
  "dxPivotGridOptions.stateStoring.customSave": {
    "shortDescription": "Specifies a function that is executed on state change. Applies only if the [type](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/stateStoring/type.md '{basewidgetpath}/Configuration/stateStoring/#type') is *\"custom\"*."
  },
  "dxPivotGridOptions.stateStoring.enabled": {
    "shortDescription": "Specifies whether or not a grid saves its state."
  },
  "dxPivotGridOptions.stateStoring.savingTimeout": {
    "shortDescription": "Specifies the delay between the last change of a grid state and the operation of saving this state in milliseconds."
  },
  "dxPivotGridOptions.stateStoring.storageKey": {
    "shortDescription": "Specifies a unique key to be used for storing the grid state."
  },
  "dxPivotGridOptions.stateStoring.type": {
    "shortDescription": "Specifies the type of storage to be used for state storing."
  },
  "dxPivotGridOptions.texts": {
    "shortDescription": "Strings that can be changed or localized in the PivotGrid UI component."
  },
  "dxPivotGridOptions.texts.collapseAll": {
    "shortDescription": "The string to display as a **Collapse All** context menu item."
  },
  "dxPivotGridOptions.texts.dataNotAvailable": {
    "shortDescription": "Specifies text displayed in a cell when its data is unavailable for some reason."
  },
  "dxPivotGridOptions.texts.expandAll": {
    "shortDescription": "The string to display as an **Expand All** context menu item."
  },
  "dxPivotGridOptions.texts.exportToExcel": {
    "shortDescription": "The string to display as an **Export to Excel file** context menu item."
  },
  "dxPivotGridOptions.texts.grandTotal": {
    "shortDescription": "The string to display as a header of the **Grand Total** row and column."
  },
  "dxPivotGridOptions.texts.noData": {
    "shortDescription": "Specifies the text displayed when a pivot grid does not contain any fields."
  },
  "dxPivotGridOptions.texts.removeAllSorting": {
    "shortDescription": "The string to display as a **Remove All Sorting** context menu item."
  },
  "dxPivotGridOptions.texts.showFieldChooser": {
    "shortDescription": "The string to display as a **Show Field Chooser** context menu item."
  },
  "dxPivotGridOptions.texts.sortColumnBySummary": {
    "shortDescription": "The string to display as a **Sort Column by Summary Value** context menu item."
  },
  "dxPivotGridOptions.texts.sortRowBySummary": {
    "shortDescription": "The string to display as a **Sort Row by Summary Value** context menu item."
  },
  "dxPivotGridOptions.texts.total": {
    "shortDescription": "The string to display as a header of the **Total** row and column."
  },
  "dxPivotGridOptions.wordWrapEnabled": {
    "shortDescription": "Specifies whether long text in [header items](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers') should be wrapped."
  },
  "dxPivotGridPivotGridCell": {
    "shortDescription": "An object containing information about the pivot grid cell."
  },
  "dxPivotGridPivotGridCell.columnPath": {
    "shortDescription": "The cell's column path. Available for data area cells only."
  },
  "dxPivotGridPivotGridCell.columnType": {
    "shortDescription": "The type of the column to which the cell belongs. Available for data area cells only."
  },
  "dxPivotGridPivotGridCell.dataIndex": {
    "shortDescription": "The data field's index. Available for data area cells only."
  },
  "dxPivotGridPivotGridCell.expanded": {
    "shortDescription": "Indicates whether the cell is expanded. Available for row or column area cells only."
  },
  "dxPivotGridPivotGridCell.path": {
    "shortDescription": "The path to the row/column cell. Available for row or column area cells only."
  },
  "dxPivotGridPivotGridCell.rowPath": {
    "shortDescription": "The cell's row path. Available for data area cells only."
  },
  "dxPivotGridPivotGridCell.rowType": {
    "shortDescription": "The type of the row to which the cell belongs. Available for data area cells only."
  },
  "dxPivotGridPivotGridCell.text": {
    "shortDescription": "The text displayed in the cell."
  },
  "dxPivotGridPivotGridCell.type": {
    "shortDescription": "The cell's type. Available for row or column area cells only."
  },
  "dxPivotGridPivotGridCell.value": {
    "shortDescription": "The cell's value."
  },
  "dxPivotGridSummaryCell": {
    "shortDescription": "An object exposing methods that manipulate a summary cell and provide access to its neighboring cells."
  },
  "dxPivotGridSummaryCell.child(direction, fieldValue)": {
    "shortDescription": "Gets the child cell in a specified direction."
  },
  "dxPivotGridSummaryCell.children(direction)": {
    "shortDescription": "Gets all child cells in a specified direction."
  },
  "dxPivotGridSummaryCell.field(area)": {
    "shortDescription": "Gets a pivot grid field that corresponds to the summary cell."
  },
  "dxPivotGridSummaryCell.grandTotal()": {
    "shortDescription": "Gets the **Grand Total** of the entire pivot grid."
  },
  "dxPivotGridSummaryCell.grandTotal(direction)": {
    "shortDescription": "Gets a partial Grand Total cell of a row or column."
  },
  "dxPivotGridSummaryCell.isPostProcessed(field)": {
    "shortDescription": "Indicates whether the [summaryDisplayMode](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/summaryDisplayMode.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#summaryDisplayMode') or [calculateSummaryValue](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/calculateSummaryValue.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#calculateSummaryValue') post-processed the summary value."
  },
  "dxPivotGridSummaryCell.next(direction)": {
    "shortDescription": "Gets the cell next to the current one in a specified direction."
  },
  "dxPivotGridSummaryCell.next(direction, allowCrossGroup)": {
    "shortDescription": "Gets the cell next to current in a specified direction."
  },
  "dxPivotGridSummaryCell.parent(direction)": {
    "shortDescription": "Gets the parent cell in a specified direction."
  },
  "dxPivotGridSummaryCell.prev(direction)": {
    "shortDescription": "Gets the cell prior to the current one in a specified direction."
  },
  "dxPivotGridSummaryCell.prev(direction, allowCrossGroup)": {
    "shortDescription": "Gets the cell previous to current in a specified direction."
  },
  "dxPivotGridSummaryCell.slice(field, value)": {
    "shortDescription": "Gets the cell located by the path of the source cell with one field value changed."
  },
  "dxPivotGridSummaryCell.value()": {
    "shortDescription": "Gets the summary cell value."
  },
  "dxPivotGridSummaryCell.value(field)": {
    "shortDescription": "Gets the value of any [field](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/') associated with the summary cell."
  },
  "dxPivotGridSummaryCell.value(field, postProcessed)": {
    "shortDescription": "Gets the value of any [field](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/') associated with the summary cell."
  },
  "dxPivotGridSummaryCell.value(postProcessed)": {
    "shortDescription": "Gets the summary cell value."
  },
  "dxPolarChart": {
    "shortDescription": "The PolarChart is a UI component that visualizes data in a polar coordinate system."
  },
  "dxPolarChart.argumentAxisClick": {
    "shortDescription": "Raised when a [label](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/070%20Axis%20Labels.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axis_Labels') on the [argument axis](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/10%20Argument%20Axis.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes/Argument_Axis') is clicked or tapped."
  },
  "dxPolarChart.getValueAxis()": {
    "shortDescription": "Gets a [value axis](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/valueAxis/')."
  },
  "dxPolarChart.legendClick": {
    "shortDescription": "Raised when a [legend item](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/120%20Legend.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Legend') is clicked or tapped."
  },
  "dxPolarChart.resetVisualRange()": {
    "shortDescription": "Resets the value axis' [visual range](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis/visualRange '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/valueAxis/visualRange/') to the data range or to the [whole range](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis/wholeRange '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/valueAxis/wholeRange/') if it is within the data range."
  },
  "dxPolarChart.seriesClick": {
    "shortDescription": "Raised when a [series](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/010%20Series.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Series') is clicked or tapped."
  },
  "dxPolarChart.seriesHoverChanged": {
    "shortDescription": "Raised after the pointer enters or leaves a series."
  },
  "dxPolarChart.seriesSelectionChanged": {
    "shortDescription": "Raised when a series is selected or selection is canceled."
  },
  "dxPolarChart.zoomEnd": {
    "shortDescription": "Raised when zooming or panning ends."
  },
  "dxPolarChart.zoomStart": {
    "shortDescription": "Raised when zooming or panning begins."
  },
  "dxPolarChartAdaptiveLayout": {
    "shortDescription": "Specifies adaptive layout properties."
  },
  "dxPolarChartAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPolarChartAnnotationConfig.name": {
    "shortDescription": "Specifies the annotation's name."
  },
  "dxPolarChartArgumentAxis": {
    "shortDescription": "Specifies [argument axis](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/10%20Argument%20Axis.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes/Argument_Axis') properties for the PolarChart UI component."
  },
  "dxPolarChartArgumentAxisConstantLines": {
    "shortDescription": "Defines an array of the argument axis constant lines."
  },
  "dxPolarChartArgumentAxisConstantLinesLabel": {
    "shortDescription": "An object defining constant line label properties."
  },
  "dxPolarChartArgumentAxisLabel": {
    "shortDescription": "Specifies properties for argument axis labels."
  },
  "dxPolarChartArgumentAxisMinorTick": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPolarChartArgumentAxisStrips": {
    "shortDescription": "Specifies properties for argument axis strips."
  },
  "dxPolarChartArgumentAxisStripsLabel": {
    "shortDescription": "An object that defines the label configuration properties of a strip."
  },
  "dxPolarChartArgumentAxisTick": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPolarChartCommonAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPolarChartCommonAnnotationConfig.angle": {
    "shortDescription": "Specifies the angle between the [startAngle](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/argumentAxis/startAngle.md '{basewidgetpath}/Configuration/argumentAxis/#startAngle') and the [radius](/api-reference/_hidden/dxPolarChartCommonAnnotationConfig/radius.md '{basewidgetpath}/Configuration/annotations/#radius')."
  },
  "dxPolarChartCommonAnnotationConfig.customizeTooltip": {
    "shortDescription": "Customizes the text and appearance of the annotation's tooltip."
  },
  "dxPolarChartCommonAnnotationConfig.radius": {
    "shortDescription": "Places an annotation at the specified distance from the center of the UI component."
  },
  "dxPolarChartCommonAnnotationConfig.template": {
    "shortDescription": "Specifies a custom template for the annotation. Applies only if the [type](/api-reference/_hidden/BaseWidgetAnnotationConfig/type.md '{basewidgetpath}/Configuration/annotations/#type') is *\"custom\"*."
  },
  "dxPolarChartCommonAnnotationConfig.tooltipTemplate": {
    "shortDescription": "Specifies a custom template for an annotation's tooltip."
  },
  "dxPolarChartCommonAxisSettings": {
    "shortDescription": "An object defining the configuration properties that are common for all [axes](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/03%20Axes.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes') of the PolarChart UI component."
  },
  "dxPolarChartCommonAxisSettingsConstantLineStyle": {
    "shortDescription": "Specifies the appearance of all the UI component's constant lines."
  },
  "dxPolarChartCommonAxisSettingsConstantLineStyleLabel": {
    "shortDescription": "An object defining constant line label properties."
  },
  "dxPolarChartCommonAxisSettingsLabel": {
    "shortDescription": "An object defining the [label](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/070%20Axis%20Labels.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axis_Labels') configuration properties that are common for all axes in the PolarChart UI component."
  },
  "dxPolarChartCommonAxisSettingsMinorTick": {
    "shortDescription": "Specifies the properties of the minor ticks."
  },
  "dxPolarChartCommonAxisSettingsStripStyle": {
    "shortDescription": "An object defining configuration properties for [strip](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/100%20Strips.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Strips') style."
  },
  "dxPolarChartCommonAxisSettingsStripStyleLabel": {
    "shortDescription": "An object defining the configuration properties for a strip label style."
  },
  "dxPolarChartCommonAxisSettingsTick": {
    "shortDescription": "An object defining the configuration properties for [axis ticks](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/060%20Axis%20Ticks/01%20Axis%20Ticks.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axis_Ticks')."
  },
  "dxPolarChartCommonSeriesSetting": {
    "shortDescription": "An object defining the configuration properties that are common for all series of the PolarChart UI component."
  },
  "dxPolarChartLegend": {
    "shortDescription": "Specifies the properties of a chart's legend."
  },
  "dxPolarChartOptions.adaptiveLayout": {
    "shortDescription": "Specifies adaptive layout properties."
  },
  "dxPolarChartOptions.adaptiveLayout.height": {
    "shortDescription": "Specifies the minimum container height at which the layout begins to adapt."
  },
  "dxPolarChartOptions.adaptiveLayout.width": {
    "shortDescription": "Specifies the minimum container width at which the layout begins to adapt."
  },
  "dxPolarChartOptions.annotations": {
    "shortDescription": "Specifies the annotation collection."
  },
  "dxPolarChartOptions.argumentAxis": {
    "shortDescription": "Specifies [argument axis](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/10%20Argument%20Axis.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes/Argument_Axis') properties for the PolarChart UI component."
  },
  "dxPolarChartOptions.argumentAxis.argumentType": {
    "shortDescription": "Specifies the desired type of axis values."
  },
  "dxPolarChartOptions.argumentAxis.axisDivisionFactor": {
    "shortDescription": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the *\"continuous\"* and *\"logarithmic\"* [types](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/valueAxis/#type')."
  },
  "dxPolarChartOptions.argumentAxis.categories": {
    "shortDescription": "Specifies the order of categories on an axis of the *\"discrete\"* [type](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/argumentAxis/#type')."
  },
  "dxPolarChartOptions.argumentAxis.constantLines": {
    "shortDescription": "Defines an array of the argument axis constant lines."
  },
  "dxPolarChartOptions.argumentAxis.constantLines.displayBehindSeries": {
    "shortDescription": "Specifies whether to display the constant line behind or in front of the series."
  },
  "dxPolarChartOptions.argumentAxis.constantLines.extendAxis": {
    "shortDescription": "Specifies whether to extend the axis to display the constant line."
  },
  "dxPolarChartOptions.argumentAxis.constantLines.label": {
    "shortDescription": "An object defining constant line label properties."
  },
  "dxPolarChartOptions.argumentAxis.constantLines.label.text": {
    "shortDescription": "Specifies the text to be displayed in a constant line label."
  },
  "dxPolarChartOptions.argumentAxis.constantLines.value": {
    "shortDescription": "Specifies a value to be displayed by a constant line."
  },
  "dxPolarChartOptions.argumentAxis.firstPointOnStartAngle": {
    "shortDescription": "Specifies whether or not to display the first point at the angle specified by the [startAngle](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/argumentAxis/startAngle.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/argumentAxis/#startAngle') property."
  },
  "dxPolarChartOptions.argumentAxis.hoverMode": {
    "shortDescription": "Specifies the elements that will be highlighted when the argument axis is hovered over."
  },
  "dxPolarChartOptions.argumentAxis.label": {
    "shortDescription": "Specifies properties for argument axis labels."
  },
  "dxPolarChartOptions.argumentAxis.label.customizeHint": {
    "shortDescription": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the argument axis."
  },
  "dxPolarChartOptions.argumentAxis.label.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed by argument axis labels."
  },
  "dxPolarChartOptions.argumentAxis.label.format": {
    "shortDescription": "Formats a value before it is displayed in an axis label."
  },
  "dxPolarChartOptions.argumentAxis.linearThreshold": {
    "shortDescription": "Specifies a value used to calculate the range on a [logarithmic axis](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/argumentAxis/type.md '{basewidgetpath}/Configuration/argumentAxis/#type') within which the axis should be linear. Applies only if the data source contains negative values or zeroes."
  },
  "dxPolarChartOptions.argumentAxis.logarithmBase": {
    "shortDescription": "Specifies the value to be raised to a power when generating ticks for a [logarithmic axis](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/argumentAxis/type.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/argumentAxis/#type')."
  },
  "dxPolarChartOptions.argumentAxis.minorTick": {
    "shortDescription": "Specifies the properties of the minor ticks."
  },
  "dxPolarChartOptions.argumentAxis.minorTick.shift": {
    "shortDescription": "Shifts minor ticks from the reference position."
  },
  "dxPolarChartOptions.argumentAxis.minorTickCount": {
    "shortDescription": "Specifies the number of minor ticks between two neighboring major ticks."
  },
  "dxPolarChartOptions.argumentAxis.minorTickInterval": {
    "shortDescription": "Specifies the interval between minor ticks."
  },
  "dxPolarChartOptions.argumentAxis.originValue": {
    "shortDescription": "Specifies the value to be used as the origin for the argument axis."
  },
  "dxPolarChartOptions.argumentAxis.period": {
    "shortDescription": "Specifies the period of the argument values in the data source."
  },
  "dxPolarChartOptions.argumentAxis.startAngle": {
    "shortDescription": "Specifies the angle in arc degrees to which the argument axis should be rotated. The positive values rotate the axis clockwise."
  },
  "dxPolarChartOptions.argumentAxis.strips": {
    "shortDescription": "Specifies properties for argument axis strips."
  },
  "dxPolarChartOptions.argumentAxis.strips.color": {
    "shortDescription": "Specifies a color for a strip."
  },
  "dxPolarChartOptions.argumentAxis.strips.endValue": {
    "shortDescription": "Specifies an end value for a strip."
  },
  "dxPolarChartOptions.argumentAxis.strips.label": {
    "shortDescription": "An object that defines the label configuration properties of a strip."
  },
  "dxPolarChartOptions.argumentAxis.strips.label.text": {
    "shortDescription": "Specifies the text displayed in a strip."
  },
  "dxPolarChartOptions.argumentAxis.strips.startValue": {
    "shortDescription": "Specifies a start value for a strip."
  },
  "dxPolarChartOptions.argumentAxis.tick": {
    "shortDescription": "An object defining the configuration properties for axis ticks."
  },
  "dxPolarChartOptions.argumentAxis.tick.shift": {
    "shortDescription": "Shifts ticks from the reference position."
  },
  "dxPolarChartOptions.argumentAxis.tickInterval": {
    "shortDescription": "Specifies an interval between axis ticks/grid lines."
  },
  "dxPolarChartOptions.argumentAxis.type": {
    "shortDescription": "Specifies the required type of the argument axis."
  },
  "dxPolarChartOptions.barGroupPadding": {
    "shortDescription": "Controls the padding and consequently the angular width of a group of bars with the same argument using relative units. Ignored if the [barGroupWidth](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/barGroupWidth.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/#barGroupWidth') property is set."
  },
  "dxPolarChartOptions.barGroupWidth": {
    "shortDescription": "Specifies a fixed angular width for groups of bars with the same argument, measured in degrees. Takes precedence over the [barGroupPadding](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/barGroupPadding.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/#barGroupPadding') property."
  },
  "dxPolarChartOptions.commonAnnotationSettings": {
    "shortDescription": "Specifies settings common for all annotations in the PolarChart."
  },
  "dxPolarChartOptions.commonAxisSettings": {
    "shortDescription": "An object defining the configuration properties that are common for all [axes](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/03%20Axes.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes') of the PolarChart UI component."
  },
  "dxPolarChartOptions.commonAxisSettings.allowDecimals": {
    "shortDescription": "Specifies whether to allow decimal values on the axis. When **false**, the axis contains integer values only."
  },
  "dxPolarChartOptions.commonAxisSettings.color": {
    "shortDescription": "Specifies the color of the line that represents an axis."
  },
  "dxPolarChartOptions.commonAxisSettings.constantLineStyle": {
    "shortDescription": "Specifies the appearance of all the UI component's constant lines."
  },
  "dxPolarChartOptions.commonAxisSettings.constantLineStyle.color": {
    "shortDescription": "Specifies a color for a constant line."
  },
  "dxPolarChartOptions.commonAxisSettings.constantLineStyle.dashStyle": {
    "shortDescription": "Specifies a dash style for a constant line."
  },
  "dxPolarChartOptions.commonAxisSettings.constantLineStyle.label": {
    "shortDescription": "An object defining constant line label properties."
  },
  "dxPolarChartOptions.commonAxisSettings.constantLineStyle.label.font": {
    "shortDescription": "Specifies font properties for a constant line label."
  },
  "dxPolarChartOptions.commonAxisSettings.constantLineStyle.label.visible": {
    "shortDescription": "Indicates whether or not to display labels for the axis constant lines."
  },
  "dxPolarChartOptions.commonAxisSettings.constantLineStyle.width": {
    "shortDescription": "Specifies a constant line width in pixels."
  },
  "dxPolarChartOptions.commonAxisSettings.discreteAxisDivisionMode": {
    "shortDescription": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
  },
  "dxPolarChartOptions.commonAxisSettings.endOnTick": {
    "shortDescription": "Specifies whether to force the axis to start and end on ticks."
  },
  "dxPolarChartOptions.commonAxisSettings.grid": {
    "shortDescription": "An object defining the configuration properties for the [grid lines](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/090%20Grid/01%20Grid.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Grid') of an [axis](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/03%20Axes.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes') in the PolarChart UI component."
  },
  "dxPolarChartOptions.commonAxisSettings.grid.color": {
    "shortDescription": "Specifies a color for grid lines."
  },
  "dxPolarChartOptions.commonAxisSettings.grid.opacity": {
    "shortDescription": "Specifies an opacity for grid lines."
  },
  "dxPolarChartOptions.commonAxisSettings.grid.visible": {
    "shortDescription": "Indicates whether or not the grid lines of an axis are visible."
  },
  "dxPolarChartOptions.commonAxisSettings.grid.width": {
    "shortDescription": "Specifies the width of grid lines."
  },
  "dxPolarChartOptions.commonAxisSettings.inverted": {
    "shortDescription": "Indicates whether or not an axis is inverted."
  },
  "dxPolarChartOptions.commonAxisSettings.label": {
    "shortDescription": "An object defining the [label](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/070%20Axis%20Labels.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axis_Labels') configuration properties that are common for all axes in the PolarChart UI component."
  },
  "dxPolarChartOptions.commonAxisSettings.label.font": {
    "shortDescription": "Specifies font properties for axis labels."
  },
  "dxPolarChartOptions.commonAxisSettings.label.indentFromAxis": {
    "shortDescription": "Specifies the spacing between an axis and its labels in pixels."
  },
  "dxPolarChartOptions.commonAxisSettings.label.overlappingBehavior": {
    "shortDescription": "Decides how to arrange axis labels when there is not enough space to keep all of them."
  },
  "dxPolarChartOptions.commonAxisSettings.label.visible": {
    "shortDescription": "Indicates whether or not axis labels are visible."
  },
  "dxPolarChartOptions.commonAxisSettings.minorGrid": {
    "shortDescription": "Specifies the properties of the minor grid."
  },
  "dxPolarChartOptions.commonAxisSettings.minorGrid.color": {
    "shortDescription": "Specifies a color for the lines of the minor grid."
  },
  "dxPolarChartOptions.commonAxisSettings.minorGrid.opacity": {
    "shortDescription": "Specifies an opacity for the lines of the minor grid."
  },
  "dxPolarChartOptions.commonAxisSettings.minorGrid.visible": {
    "shortDescription": "Indicates whether the minor grid is visible or not."
  },
  "dxPolarChartOptions.commonAxisSettings.minorGrid.width": {
    "shortDescription": "Specifies a width for the lines of the minor grid."
  },
  "dxPolarChartOptions.commonAxisSettings.minorTick": {
    "shortDescription": "Specifies the properties of the minor ticks."
  },
  "dxPolarChartOptions.commonAxisSettings.minorTick.color": {
    "shortDescription": "Specifies a color for the minor ticks."
  },
  "dxPolarChartOptions.commonAxisSettings.minorTick.length": {
    "shortDescription": "Specifies minor tick length."
  },
  "dxPolarChartOptions.commonAxisSettings.minorTick.opacity": {
    "shortDescription": "Specifies an opacity for the minor ticks."
  },
  "dxPolarChartOptions.commonAxisSettings.minorTick.visible": {
    "shortDescription": "Indicates whether or not the minor ticks are displayed on an axis."
  },
  "dxPolarChartOptions.commonAxisSettings.minorTick.width": {
    "shortDescription": "Specifies minor tick width."
  },
  "dxPolarChartOptions.commonAxisSettings.opacity": {
    "shortDescription": "Specifies the opacity of the line that represents an axis."
  },
  "dxPolarChartOptions.commonAxisSettings.stripStyle": {
    "shortDescription": "An object defining configuration properties for [strip](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/100%20Strips.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Strips') style."
  },
  "dxPolarChartOptions.commonAxisSettings.stripStyle.label": {
    "shortDescription": "An object defining the configuration properties for a strip label style."
  },
  "dxPolarChartOptions.commonAxisSettings.stripStyle.label.font": {
    "shortDescription": "Specifies font properties for a strip label."
  },
  "dxPolarChartOptions.commonAxisSettings.tick": {
    "shortDescription": "An object defining the configuration properties for [axis ticks](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/060%20Axis%20Ticks/01%20Axis%20Ticks.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axis_Ticks')."
  },
  "dxPolarChartOptions.commonAxisSettings.tick.color": {
    "shortDescription": "Specifies ticks color."
  },
  "dxPolarChartOptions.commonAxisSettings.tick.length": {
    "shortDescription": "Specifies tick length."
  },
  "dxPolarChartOptions.commonAxisSettings.tick.opacity": {
    "shortDescription": "Specifies tick opacity."
  },
  "dxPolarChartOptions.commonAxisSettings.tick.visible": {
    "shortDescription": "Indicates whether or not ticks are visible on an axis."
  },
  "dxPolarChartOptions.commonAxisSettings.tick.width": {
    "shortDescription": "Specifies tick width."
  },
  "dxPolarChartOptions.commonAxisSettings.visible": {
    "shortDescription": "Indicates whether or not the line that represents an axis in a chart is visible."
  },
  "dxPolarChartOptions.commonAxisSettings.width": {
    "shortDescription": "Specifies the width of the line that represents an axis in the chart."
  },
  "dxPolarChartOptions.commonSeriesSettings": {
    "shortDescription": "An object defining the configuration properties that are common for all series of the PolarChart UI component."
  },
  "dxPolarChartOptions.commonSeriesSettings.area": {
    "shortDescription": "An object that specifies configuration properties for all series of the *area* type in the chart."
  },
  "dxPolarChartOptions.commonSeriesSettings.bar": {
    "shortDescription": "An object that specifies configuration properties for all series of the _bar_ type in the chart."
  },
  "dxPolarChartOptions.commonSeriesSettings.line": {
    "shortDescription": "An object that specifies configuration properties for all series of the _line_ type in the chart."
  },
  "dxPolarChartOptions.commonSeriesSettings.scatter": {
    "shortDescription": "An object that specifies configuration properties for all series of the _scatter_ type in the chart."
  },
  "dxPolarChartOptions.commonSeriesSettings.stackedbar": {
    "shortDescription": "An object that specifies configuration properties for all series of the _stackedBar_ type in the chart."
  },
  "dxPolarChartOptions.commonSeriesSettings.type": {
    "shortDescription": "Sets a series type."
  },
  "dxPolarChartOptions.containerBackgroundColor": {
    "shortDescription": "Specifies the color of the parent page element."
  },
  "dxPolarChartOptions.customizeAnnotation": {
    "shortDescription": "Customizes an individual [annotation](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/annotations '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/annotations/')."
  },
  "dxPolarChartOptions.dataPrepareSettings": {
    "shortDescription": "An object providing properties for managing data from a data source."
  },
  "dxPolarChartOptions.dataPrepareSettings.checkTypeForAllData": {
    "shortDescription": "Specifies whether or not to validate the values from a data source."
  },
  "dxPolarChartOptions.dataPrepareSettings.convertToAxisDataType": {
    "shortDescription": "Specifies whether or not to convert the values from a data source into the data type of an axis."
  },
  "dxPolarChartOptions.dataPrepareSettings.sortingMethod": {
    "shortDescription": "Specifies how to sort the series points."
  },
  "dxPolarChartOptions.legend": {
    "shortDescription": "Specifies the properties of a chart's legend."
  },
  "dxPolarChartOptions.legend.customizeHint": {
    "shortDescription": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
  },
  "dxPolarChartOptions.legend.customizeText": {
    "shortDescription": "<p>Specifies a callback function that returns the text to be displayed by legend items.</p>"
  },
  "dxPolarChartOptions.legend.hoverMode": {
    "shortDescription": "Specifies what series elements to highlight when a corresponding item in the legend is hovered over."
  },
  "dxPolarChartOptions.negativesAsZeroes": {
    "shortDescription": "Forces the UI component to treat negative values as zeroes. Applies to stacked-like series only."
  },
  "dxPolarChartOptions.onArgumentAxisClick": {
    "shortDescription": "A function that is executed when a [label](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/070%20Axis%20Labels.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axis_Labels') on the [argument axis](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/10%20Argument%20Axis.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes/Argument_Axis') is clicked or tapped."
  },
  "dxPolarChartOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxPolarChartOptions.onDone": {
    "shortDescription": "A function that is executed when all series are ready."
  },
  "dxPolarChartOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxPolarChartOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxPolarChartOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxPolarChartOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxPolarChartOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxPolarChartOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxPolarChartOptions.onLegendClick": {
    "shortDescription": "A function that is executed when a [legend item](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/120%20Legend.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Legend') is clicked or tapped."
  },
  "dxPolarChartOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxPolarChartOptions.onPointClick": {
    "shortDescription": "A function that is executed when a series point is clicked or tapped."
  },
  "dxPolarChartOptions.onPointHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a series point."
  },
  "dxPolarChartOptions.onPointSelectionChanged": {
    "shortDescription": "A function that is executed when a series point is selected or selection is canceled."
  },
  "dxPolarChartOptions.onSeriesClick": {
    "shortDescription": "A function that is executed when a [series](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/010%20Series.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Series') is clicked or tapped."
  },
  "dxPolarChartOptions.onSeriesHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a series."
  },
  "dxPolarChartOptions.onSeriesSelectionChanged": {
    "shortDescription": "A function that is executed when a series is selected or selection is canceled."
  },
  "dxPolarChartOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxPolarChartOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxPolarChartOptions.onZoomEnd": {
    "shortDescription": "A function that is executed when zooming or panning ends."
  },
  "dxPolarChartOptions.onZoomStart": {
    "shortDescription": "A function that is executed when zooming or panning begins."
  },
  "dxPolarChartOptions.resolveLabelOverlapping": {
    "shortDescription": "Specifies how the chart must behave when [series point labels](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/030%20Series%20Point%20Labels.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Series_Point_Labels') overlap."
  },
  "dxPolarChartOptions.series": {
    "shortDescription": "Specifies properties for PolarChart UI component [series](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/010%20Series.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Series')."
  },
  "dxPolarChartOptions.seriesSelectionMode": {
    "shortDescription": "Specifies whether a single series or multiple series can be selected in the chart."
  },
  "dxPolarChartOptions.seriesTemplate": {
    "shortDescription": "Defines properties for the series template."
  },
  "dxPolarChartOptions.seriesTemplate.customizeSeries": {
    "shortDescription": "Specifies a callback function that returns a [series](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/series '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/series/') object with individual series settings."
  },
  "dxPolarChartOptions.seriesTemplate.nameField": {
    "shortDescription": "Specifies a data source field that represents the series name."
  },
  "dxPolarChartOptions.tooltip": {
    "shortDescription": "Configures tooltips."
  },
  "dxPolarChartOptions.tooltip.shared": {
    "shortDescription": "Specifies whether the tooltip is shared across all series points with the same argument."
  },
  "dxPolarChartOptions.useSpiderWeb": {
    "shortDescription": "Indicates whether to display a \"spider web\"."
  },
  "dxPolarChartOptions.valueAxis": {
    "shortDescription": "Specifies [value axis](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/20%20Value%20Axis.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes/Value_Axis') properties for the PolarChart UI component."
  },
  "dxPolarChartOptions.valueAxis.axisDivisionFactor": {
    "shortDescription": "Specifies a coefficient for dividing the value axis."
  },
  "dxPolarChartOptions.valueAxis.categories": {
    "shortDescription": "Specifies the order of categories on an axis of the *\"discrete\"* [type](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/valueAxis/#type')."
  },
  "dxPolarChartOptions.valueAxis.constantLines": {
    "shortDescription": "Defines an array of the value axis constant lines."
  },
  "dxPolarChartOptions.valueAxis.constantLines.displayBehindSeries": {
    "shortDescription": "Specifies whether to display the constant line behind or in front of the series."
  },
  "dxPolarChartOptions.valueAxis.constantLines.extendAxis": {
    "shortDescription": "Specifies whether to extend the axis to display the constant line."
  },
  "dxPolarChartOptions.valueAxis.constantLines.label": {
    "shortDescription": "An object defining constant line label properties."
  },
  "dxPolarChartOptions.valueAxis.constantLines.label.text": {
    "shortDescription": "Specifies the text to be displayed in a constant line label."
  },
  "dxPolarChartOptions.valueAxis.constantLines.value": {
    "shortDescription": "Specifies a value to be displayed by a constant line."
  },
  "dxPolarChartOptions.valueAxis.endOnTick": {
    "shortDescription": "Specifies whether to force the axis to start and end on ticks."
  },
  "dxPolarChartOptions.valueAxis.label": {
    "shortDescription": "Specifies properties for value axis labels."
  },
  "dxPolarChartOptions.valueAxis.label.customizeHint": {
    "shortDescription": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the value axis."
  },
  "dxPolarChartOptions.valueAxis.label.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed in value axis labels."
  },
  "dxPolarChartOptions.valueAxis.label.format": {
    "shortDescription": "Formats a value before it is displayed in an axis label."
  },
  "dxPolarChartOptions.valueAxis.linearThreshold": {
    "shortDescription": "Specifies a value used to calculate the range on a [logarithmic axis](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis/type.md '{basewidgetpath}/Configuration/valueAxis/#type') within which the axis should be linear. Applies only if the data source contains negative values or zeroes."
  },
  "dxPolarChartOptions.valueAxis.logarithmBase": {
    "shortDescription": "Specifies the value to be raised to a power when generating ticks for a logarithmic axis."
  },
  "dxPolarChartOptions.valueAxis.maxValueMargin": {
    "shortDescription": "Specifies a coefficient that determines the spacing between the maximum series point and the axis."
  },
  "dxPolarChartOptions.valueAxis.minorTickCount": {
    "shortDescription": "Specifies the number of minor ticks between two neighboring major ticks."
  },
  "dxPolarChartOptions.valueAxis.minorTickInterval": {
    "shortDescription": "Specifies the interval between [minor ticks](/concepts/05%20UI%20Components/Chart/20%20Axes/07%20Axis%20Ticks.md '/Documentation/Guide/UI_Components/Chart/Axes/Axis_Ticks/')."
  },
  "dxPolarChartOptions.valueAxis.minValueMargin": {
    "shortDescription": "Specifies a coefficient that determines the spacing between the minimum series point and the axis."
  },
  "dxPolarChartOptions.valueAxis.minVisualRangeLength": {
    "shortDescription": "Specifies the minimum length of the [visual range](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis/visualRange '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/valueAxis/visualRange/')."
  },
  "dxPolarChartOptions.valueAxis.showZero": {
    "shortDescription": "Specifies whether or not to indicate a zero value on the value axis."
  },
  "dxPolarChartOptions.valueAxis.strips": {
    "shortDescription": "Specifies properties for value axis strips."
  },
  "dxPolarChartOptions.valueAxis.strips.color": {
    "shortDescription": "Specifies a color for a strip."
  },
  "dxPolarChartOptions.valueAxis.strips.endValue": {
    "shortDescription": "Specifies an end value for a strip."
  },
  "dxPolarChartOptions.valueAxis.strips.label": {
    "shortDescription": "An object that defines the label configuration properties of a strip."
  },
  "dxPolarChartOptions.valueAxis.strips.label.text": {
    "shortDescription": "Specifies the text displayed in a strip."
  },
  "dxPolarChartOptions.valueAxis.strips.startValue": {
    "shortDescription": "Specifies a start value for a strip."
  },
  "dxPolarChartOptions.valueAxis.tick": {
    "shortDescription": "An object defining the configuration properties for axis ticks."
  },
  "dxPolarChartOptions.valueAxis.tick.visible": {
    "shortDescription": "Indicates whether or not ticks are visible on an axis."
  },
  "dxPolarChartOptions.valueAxis.tickInterval": {
    "shortDescription": "Specifies an interval between axis ticks/grid lines."
  },
  "dxPolarChartOptions.valueAxis.type": {
    "shortDescription": "Specifies the required type of the value axis."
  },
  "dxPolarChartOptions.valueAxis.valueMarginsEnabled": {
    "shortDescription": "Indicates whether to display series with indents from axis boundaries."
  },
  "dxPolarChartOptions.valueAxis.valueType": {
    "shortDescription": "Specifies the desired type of axis values."
  },
  "dxPolarChartOptions.valueAxis.visualRange": {
    "shortDescription": "Defines the axis' displayed range. Cannot be wider than the [wholeRange](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis/wholeRange '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/valueAxis/wholeRange/')."
  },
  "dxPolarChartOptions.valueAxis.visualRangeUpdateMode": {
    "shortDescription": "Specifies how the axis's [visual range](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis/visualRange '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/valueAxis/visualRange/') should behave when the PolarChart data is updated."
  },
  "dxPolarChartOptions.valueAxis.wholeRange": {
    "shortDescription": "Defines the range where the axis can be zoomed."
  },
  "dxPolarChartSeriesTypes": {
    "shortDescription": "This section lists objects that define properties used to configure series of specific types."
  },
  "dxPolarChartSeriesTypes.areapolarseries": {
    "shortDescription": "An object defining a series of the **area** type."
  },
  "dxPolarChartSeriesTypes.areapolarseries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to the series."
  },
  "dxPolarChartSeriesTypes.areapolarseries.point": {
    "shortDescription": "An object defining configuration properties for [points](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/020%20Series%20Points/10%20Series%20Points.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Series_Points') in line and area series."
  },
  "dxPolarChartSeriesTypes.areapolarseries.point.visible": {
    "shortDescription": "Specifies the points visibility for a line and area series."
  },
  "dxPolarChartSeriesTypes.areapolarseries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects the series."
  },
  "dxPolarChartSeriesTypes.barpolarseries": {
    "shortDescription": "An object defining a series of the **bar** type."
  },
  "dxPolarChartSeriesTypes.barpolarseries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to the series."
  },
  "dxPolarChartSeriesTypes.barpolarseries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects the series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries": {
    "shortDescription": "An object that defines configuration properties for polar chart series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.argumentField": {
    "shortDescription": "Specifies the data source field that provides arguments for series points."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.axis": {
    "shortDescription": ""
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.barPadding": {
    "shortDescription": "Controls the padding and consequently the angular width of all bars in a series using relative units. Ignored if the [barWidth](/api-reference/10%20UI%20Components/dxPolarChart/5%20Series%20Types/CommonPolarChartSeries/barWidth.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/series/#barWidth') property is set."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.barWidth": {
    "shortDescription": "Specifies a fixed angular width for all bars in a series, measured in degrees. Takes precedence over the [barPadding](/api-reference/10%20UI%20Components/dxPolarChart/5%20Series%20Types/CommonPolarChartSeries/barPadding.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/series/#barPadding') property."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.border": {
    "shortDescription": "An object defining the series border configuration properties."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.border.color": {
    "shortDescription": "Sets a border color for a series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.border.dashStyle": {
    "shortDescription": "Specifies a dash style for the borders of series points."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.border.visible": {
    "shortDescription": "Sets border visibility for a series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.border.width": {
    "shortDescription": "Sets a border width for a series in pixels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.closed": {
    "shortDescription": "Specifies whether or not to close the chart by joining the end point with the first point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.color": {
    "shortDescription": "Specifies a series color."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.dashStyle": {
    "shortDescription": "Specifies the dash style of the series' line."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverMode": {
    "shortDescription": "Specifies the series elements to highlight when a series is hovered over."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle": {
    "shortDescription": "An object defining configuration properties for a hovered series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border": {
    "shortDescription": "An object defining the border properties for a hovered series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.color": {
    "shortDescription": "<p>Sets a border color for a hovered series.</p>"
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.dashStyle": {
    "shortDescription": "Specifies a dash style for the borders of point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.visible": {
    "shortDescription": "Sets a border visibility for a hovered series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.width": {
    "shortDescription": "Sets a border width for a hovered series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.color": {
    "shortDescription": "Sets a color for a series when it is hovered over."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.dashStyle": {
    "shortDescription": "Specifies the dash style for the line in a hovered series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching": {
    "shortDescription": "Specifies the hatching properties to be applied when a series is hovered over."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.direction": {
    "shortDescription": "Specifies how to apply hatching to highlight the hovered series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.opacity": {
    "shortDescription": "Specifies the opacity of hatching lines."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.step": {
    "shortDescription": "Specifies the distance between hatching lines in pixels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.width": {
    "shortDescription": "Specifies the width of hatching lines in pixels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.highlight": {
    "shortDescription": "Specifies whether to lighten the series when a user points to it."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.width": {
    "shortDescription": "Specifies the width of a line in a hovered series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.ignoreEmptyPoints": {
    "shortDescription": "Specifies whether the series should ignore null data points."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label": {
    "shortDescription": "An object defining the [label](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/030%20Series%20Point%20Labels.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Series_Point_Labels') configuration properties."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.argumentFormat": {
    "shortDescription": "Formats the point argument before it is displayed in the point label. To format the point value, use the [format](/api-reference/10%20UI%20Components/dxPolarChart/5%20Series%20Types/CommonPolarChartSeries/label/format.md '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/series/label/#format') property."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.backgroundColor": {
    "shortDescription": "Colors the point labels' background. The default color is inherited from the points."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border": {
    "shortDescription": "Specifies border properties for point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.color": {
    "shortDescription": "<p>Specifies a border color for point labels.</p>"
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.dashStyle": {
    "shortDescription": "Specifies a dash style for the borders of point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.visible": {
    "shortDescription": "Indicates whether borders are visible in point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.width": {
    "shortDescription": "Specifies the border width for point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector": {
    "shortDescription": "Specifies connector properties for series point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.color": {
    "shortDescription": "Specifies the color of label connectors."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.visible": {
    "shortDescription": "Indicates whether or not label connectors are visible."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.width": {
    "shortDescription": "Specifies the width of label connectors."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed by point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.displayFormat": {
    "shortDescription": "Specifies the label's text."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.font": {
    "shortDescription": "Specifies font properties for the text displayed in point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.format": {
    "shortDescription": "Formats a value before it is displayed in a point label."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.position": {
    "shortDescription": "Specifies a label position in bar-like series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.rotationAngle": {
    "shortDescription": "Specifies the angle used to rotate point labels from their initial position."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.showForZeroValues": {
    "shortDescription": "Specifies whether or not to show a label when the point has a zero value."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.label.visible": {
    "shortDescription": "Specifies the visibility of point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.maxLabelCount": {
    "shortDescription": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.minBarSize": {
    "shortDescription": "Specifies the minimal length of a displayed bar in pixels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.opacity": {
    "shortDescription": "Specifies opacity for a series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point": {
    "shortDescription": "An object defining configuration properties for [points](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/020%20Series%20Points/10%20Series%20Points.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Series_Points') in line and area series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border": {
    "shortDescription": "Specifies border properties for points in the line and area series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.color": {
    "shortDescription": "Sets a border color for points in the line and area series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.visible": {
    "shortDescription": "Sets border visibility for points in the line and area series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.width": {
    "shortDescription": "Sets a border width for points in the line or area series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.color": {
    "shortDescription": "Specifies the points color."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverMode": {
    "shortDescription": "Specifies what series points to highlight when a point is hovered over."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle": {
    "shortDescription": "An object defining configuration properties for a hovered point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border": {
    "shortDescription": "An object defining the border properties for a hovered point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.color": {
    "shortDescription": "Sets a border color for a hovered point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.visible": {
    "shortDescription": "Sets border visibility for a hovered point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.width": {
    "shortDescription": "Sets a border width for a hovered point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.color": {
    "shortDescription": "Sets a color for a point when it is hovered over."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.size": {
    "shortDescription": "Specifies the diameter of a hovered point in the series that represents data points as symbols (not as bars for instance)."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image": {
    "shortDescription": "An object specifying the parameters of an image that is used as a point marker."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.height": {
    "shortDescription": "Specifies the height of an image that is used as a point marker."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.url": {
    "shortDescription": "Specifies a URL leading to the image to be used as a point marker."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.width": {
    "shortDescription": "Specifies the width of an image that is used as a point marker."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionMode": {
    "shortDescription": "Specifies what series points to highlight when a point is selected."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle": {
    "shortDescription": "An object defining configuration properties for a selected point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border": {
    "shortDescription": "An object defining the border properties for a selected point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.color": {
    "shortDescription": "Sets a border color for a selected point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.visible": {
    "shortDescription": "Sets border visibility for a selected point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.width": {
    "shortDescription": "Sets a border width for a selected point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.color": {
    "shortDescription": "Sets a color for a point when it is selected."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.size": {
    "shortDescription": "Specifies the diameter of a selected point in the series that represents data points as symbols (not as bars for instance)."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.size": {
    "shortDescription": "Specifies the point diameter in pixels for those series that represent data points as symbols (not as bars for instance)."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.symbol": {
    "shortDescription": "Specifies a symbol for presenting points of the line and area series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.point.visible": {
    "shortDescription": "Specifies the points visibility for a line and area series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionMode": {
    "shortDescription": "Specifies the series elements to highlight when the series is selected."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle": {
    "shortDescription": "An object defining configuration properties for a selected series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border": {
    "shortDescription": "An object defining the border properties for a selected series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.color": {
    "shortDescription": "Sets a border color for a selected series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.dashStyle": {
    "shortDescription": "Specifies a dash style for the borders of point labels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.visible": {
    "shortDescription": "Sets border visibility for a selected series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.width": {
    "shortDescription": "Sets a border width for a selected series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.color": {
    "shortDescription": "Sets a color for a series when it is selected."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.dashStyle": {
    "shortDescription": "Specifies the dash style for the line in a selected series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching": {
    "shortDescription": "Specifies the hatching properties to be applied when a series is selected."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.direction": {
    "shortDescription": "Specifies how to apply hatching to highlight a selected series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.opacity": {
    "shortDescription": "Specifies the opacity of hatching lines."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.step": {
    "shortDescription": "Specifies the distance between hatching lines in pixels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.width": {
    "shortDescription": "Specifies the width of hatching lines in pixels."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.highlight": {
    "shortDescription": "Specifies whether to lighten the series when a user selects it."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.width": {
    "shortDescription": "Specifies the width of a line in a selected series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.showInLegend": {
    "shortDescription": "Specifies whether or not to show the series in the chart's legend."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.stack": {
    "shortDescription": "Specifies the name of the stack where the values of the _stackedBar_ series must be located."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.tagField": {
    "shortDescription": "Specifies the name of the data source field that provides data about a point."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar": {
    "shortDescription": "Configures error bars."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.color": {
    "shortDescription": "Specifies the color of error bars."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.displayMode": {
    "shortDescription": "Specifies whether error bars must be displayed in full or partially."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.edgeLength": {
    "shortDescription": "Specifies the length of the lines that indicate error bar edges."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.highValueField": {
    "shortDescription": "Specifies the data field that provides data for high error values."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.lineWidth": {
    "shortDescription": "Specifies the width of the error bar line."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.lowValueField": {
    "shortDescription": "Specifies the data field that provides data for low error values."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.opacity": {
    "shortDescription": "Specifies the opacity of error bars."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.type": {
    "shortDescription": "Specifies how error bar values must be calculated."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.value": {
    "shortDescription": "Specifies the value to be used for generating error bars."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.valueField": {
    "shortDescription": "Specifies the data source field that provides values for series points."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.visible": {
    "shortDescription": "Specifies the visibility of a series."
  },
  "dxPolarChartSeriesTypes.CommonPolarChartSeries.width": {
    "shortDescription": "Specifies a line width."
  },
  "dxPolarChartSeriesTypes.linepolarseries": {
    "shortDescription": "An object defining a series of the **line** type."
  },
  "dxPolarChartSeriesTypes.linepolarseries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to the series."
  },
  "dxPolarChartSeriesTypes.linepolarseries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects the series."
  },
  "dxPolarChartSeriesTypes.scatterpolarseries": {
    "shortDescription": "An object defining a series of the **scatter** type."
  },
  "dxPolarChartSeriesTypes.stackedbarpolarseries": {
    "shortDescription": "An object defining a series of the **stackedBar** type."
  },
  "dxPolarChartSeriesTypes.stackedbarpolarseries.hoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to the series."
  },
  "dxPolarChartSeriesTypes.stackedbarpolarseries.label": {
    "shortDescription": "An object defining the [label](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/030%20Series%20Point%20Labels.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Series_Point_Labels') configuration properties."
  },
  "dxPolarChartSeriesTypes.stackedbarpolarseries.label.position": {
    "shortDescription": "Specifies a label position in bar-like series."
  },
  "dxPolarChartSeriesTypes.stackedbarpolarseries.selectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects the series."
  },
  "dxPolarChartTooltip": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPolarChartValueAxis": {
    "shortDescription": "Specifies [value axis](/concepts/05%20UI%20Components/PolarChart/10%20Visual%20Elements/050%20Axes/20%20Value%20Axis.md '/Documentation/Guide/UI_Components/PolarChart/Visual_Elements/#Axes/Value_Axis') properties for the PolarChart UI component."
  },
  "dxPolarChartValueAxisConstantLines": {
    "shortDescription": "Defines an array of the value axis constant lines."
  },
  "dxPolarChartValueAxisConstantLinesLabel": {
    "shortDescription": "An object defining constant line label properties."
  },
  "dxPolarChartValueAxisLabel": {
    "shortDescription": "Specifies properties for value axis labels."
  },
  "dxPolarChartValueAxisStrips": {
    "shortDescription": "Specifies properties for value axis strips."
  },
  "dxPolarChartValueAxisStripsLabel": {
    "shortDescription": "An object that defines the label configuration properties of a strip."
  },
  "dxPolarChartValueAxisTick": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPopover": {
    "shortDescription": "The Popover is a UI component that shows notifications within a box with an arrow pointing to a specified UI element."
  },
  "dxPopover.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxPopover.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxPopover.show(target)": {
    "shortDescription": "Shows the UI component for a target element."
  },
  "dxPopoverAnimation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Components/dxPopover/1%20Configuration/animation/show.md '{basewidgetpath}/Configuration/animation/#show'') and [hide](/api-reference/10%20UI%20Components/dxPopover/1%20Configuration/animation/hide.md '{basewidgetpath}/Configuration/animation/#hide')."
  },
  "dxPopoverOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxPopoverOptions.animation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Components/dxPopover/9%20Types/dxPopoverAnimation/show.md '{basewidgetpath}/Configuration/animation/#show'') and [hide](/api-reference/10%20UI%20Components/dxPopover/9%20Types/dxPopoverAnimation/hide.md '{basewidgetpath}/Configuration/animation/#hide')."
  },
  "dxPopoverOptions.animation.hide": {
    "shortDescription": "An object that defines the [animation properties](/api-reference/50%20Common/Object%20Structures/animationConfig '/Documentation/ApiReference/Common/Object_Structures/AnimationConfig/') used when the UI component is being hidden."
  },
  "dxPopoverOptions.animation.show": {
    "shortDescription": "An object that defines the [animation properties](/api-reference/50%20Common/Object%20Structures/animationConfig '/Documentation/ApiReference/Common/Object_Structures/AnimationConfig/') used when the UI component is being shown."
  },
  "dxPopoverOptions.closeOnOutsideClick": {
    "shortDescription": "Specifies whether to close the UI component if a user clicks outside the popover window or outside the target element.",
    "depNote": "Use the hideOnOutsideClick option instead."
  },
  "dxPopoverOptions.dragAndResizeArea": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPopoverOptions.dragEnabled": {
    "shortDescription": "Specifies whether or not to allow a user to drag the popup window."
  },
  "dxPopoverOptions.dragOutsideBoundary": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPopoverOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxPopoverOptions.fullScreen": {
    "shortDescription": "Specifies whether to display the Popup in full-screen mode."
  },
  "dxPopoverOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxPopoverOptions.hideEvent": {
    "shortDescription": "Specifies properties of popover hiding. Ignored if the [shading](/api-reference/10%20UI%20Components/dxPopover/1%20Configuration/shading.md '{basewidgetpath}/Configuration/#shading') property is set to **true**."
  },
  "dxPopoverOptions.hideEvent.delay": {
    "shortDescription": "The delay in milliseconds after which the UI component is hidden."
  },
  "dxPopoverOptions.hideEvent.name": {
    "shortDescription": "Specifies the event names on which the UI component is hidden."
  },
  "dxPopoverOptions.hideOnOutsideClick": {
    "shortDescription": "Specifies whether to hide the UI component if a user clicks outside the popover window or outside the target element."
  },
  "dxPopoverOptions.hideOnParentScroll": {
    "shortDescription": "Specifies whether to hide the {WidgetName} when users scroll one of its parent elements."
  },
  "dxPopoverOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxPopoverOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxPopoverOptions.onHidden": {
    "shortDescription": "A function that is executed after the UI component is hidden."
  },
  "dxPopoverOptions.onHiding": {
    "shortDescription": "A function that is executed before the UI component is hidden."
  },
  "dxPopoverOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxPopoverOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxPopoverOptions.onResize": {
    "shortDescription": "A function that is executed each time the UI component is resized by one pixel."
  },
  "dxPopoverOptions.onResizeEnd": {
    "shortDescription": "A function that is executed when resizing ends."
  },
  "dxPopoverOptions.onResizeStart": {
    "shortDescription": "A function that is executed when resizing starts."
  },
  "dxPopoverOptions.onShowing": {
    "shortDescription": "A function that is executed before the UI component is displayed."
  },
  "dxPopoverOptions.onShown": {
    "shortDescription": "A function that is executed after the UI component is displayed."
  },
  "dxPopoverOptions.onTitleRendered": {
    "shortDescription": "A function that is executed when the UI component's [title](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/title.md '{basewidgetpath}/Configuration/#title') is rendered."
  },
  "dxPopoverOptions.position": {
    "shortDescription": "An object defining UI component [positioning properties](/api-reference/50%20Common/Object%20Structures/positionConfig '/Documentation/ApiReference/Common/Object_Structures/PositionConfig/')."
  },
  "dxPopoverOptions.resizeEnabled": {
    "shortDescription": "Specifies whether or not an end user can resize the UI component."
  },
  "dxPopoverOptions.restorePosition": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPopoverOptions.shading": {
    "shortDescription": "Specifies whether to shade the background when the UI component is active."
  },
  "dxPopoverOptions.showEvent": {
    "shortDescription": "Specifies properties for displaying the UI component."
  },
  "dxPopoverOptions.showEvent.delay": {
    "shortDescription": "The delay in milliseconds after which the UI component is displayed."
  },
  "dxPopoverOptions.showEvent.name": {
    "shortDescription": "Specifies the event names on which the UI component is shown."
  },
  "dxPopoverOptions.showTitle": {
    "shortDescription": "A Boolean value specifying whether or not to display the title in the overlay window."
  },
  "dxPopoverOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxPopoverOptions.target": {
    "shortDescription": "Specifies the element against which to position the {WidgetName}."
  },
  "dxPopoverOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxPopup": {
    "shortDescription": "The Popup UI component is a pop-up window overlaying the current view."
  },
  "dxPopup.resize": {
    "shortDescription": "Raised each time the UI component is resized by one pixel."
  },
  "dxPopup.resizeEnd": {
    "shortDescription": "Raised when resizing ends."
  },
  "dxPopup.resizeStart": {
    "shortDescription": "Raised when resizing starts."
  },
  "dxPopup.titleRendered": {
    "shortDescription": "Raised when the UI component's [title](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/title.md '{basewidgetpath}/Configuration/#title') is rendered."
  },
  "dxPopupAnimation": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPopupOptions.animation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Widgets/dxOverlay/1%20Configuration/animation/show.md '{basewidgetpath}/Configuration/animation/#show') and [hide](/api-reference/10%20UI%20Widgets/dxOverlay/1%20Configuration/animation/hide.md '{basewidgetpath}/Configuration/animation/#hide')."
  },
  "dxPopupOptions.animation.hide": {
    "shortDescription": "An object that defines the animation properties used when the UI component is being hidden."
  },
  "dxPopupOptions.animation.show": {
    "shortDescription": "An object that defines the animation properties used when the UI component is being shown."
  },
  "dxPopupOptions.container": {
    "shortDescription": "Specifies the container in which to render the UI component."
  },
  "dxPopupOptions.dragAndResizeArea": {
    "shortDescription": "Specifies an element with boundaries within which users can drag and resize the Popup. Ignored if the [dragOutsideBoundary](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/dragOutsideBoundary.md '/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#dragOutsideBoundary') property is set to **true**."
  },
  "dxPopupOptions.dragEnabled": {
    "shortDescription": "Specifies whether or not to allow a user to drag the popup window."
  },
  "dxPopupOptions.dragOutsideBoundary": {
    "shortDescription": "Allows users to drag the Popup within the browser window or beyond the window's borders."
  },
  "dxPopupOptions.enableBodyScroll": {
    "shortDescription": "Specifies whether to enable page scrolling when the UI component is visible."
  },
  "dxPopupOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxPopupOptions.fullScreen": {
    "shortDescription": "Specifies whether to display the Popup in full-screen mode."
  },
  "dxPopupOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxPopupOptions.onResize": {
    "shortDescription": "A function that is executed each time the UI component is resized by one pixel."
  },
  "dxPopupOptions.onResizeEnd": {
    "shortDescription": "A function that is executed when resizing ends."
  },
  "dxPopupOptions.onResizeStart": {
    "shortDescription": "A function that is executed when resizing starts."
  },
  "dxPopupOptions.onTitleRendered": {
    "shortDescription": "A function that is executed when the UI component's [title](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/title.md '{basewidgetpath}/Configuration/#title') is rendered."
  },
  "dxPopupOptions.position": {
    "shortDescription": "Positions the UI component."
  },
  "dxPopupOptions.resizeEnabled": {
    "shortDescription": "Specifies whether or not an end user can resize the UI component."
  },
  "dxPopupOptions.restorePosition": {
    "shortDescription": "Specifies whether to display the {WidgetName} at the initial [position](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/position.md '{basewidgetpath}/Configuration/#position') when users reopen it."
  },
  "dxPopupOptions.showCloseButton": {
    "shortDescription": "Specifies whether or not the UI component displays the Close button."
  },
  "dxPopupOptions.showTitle": {
    "shortDescription": "A Boolean value specifying whether or not to display the title in the popup window."
  },
  "dxPopupOptions.title": {
    "shortDescription": "The title in the overlay window."
  },
  "dxPopupOptions.titleTemplate": {
    "shortDescription": "Specifies a custom template for the UI component title. Does not apply if the [title](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/title.md '/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#title') is defined."
  },
  "dxPopupOptions.toolbarItems": {
    "shortDescription": "Configures toolbar items."
  },
  "dxPopupOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxPopupToolbarItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxPopupToolbarItem.toolbar": {
    "shortDescription": "Specifies whether the item is displayed on a top or bottom toolbar."
  },
  "dxProgressBar": {
    "shortDescription": "The ProgressBar is a UI component that shows current progress."
  },
  "dxProgressBar.complete": {
    "shortDescription": "Raised when the [value](/api-reference/10%20UI%20Components/dxProgressBar/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxProgressBar/Configuration/#value') reaches the [maximum](/api-reference/10%20UI%20Components/dxTrackBar/1%20Configuration/max.md '/Documentation/ApiReference/UI_Components/dxProgressBar/Configuration/#max')."
  },
  "dxProgressBar.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxProgressBar.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxProgressBar.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxProgressBar/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxProgressBarOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxProgressBarOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxProgressBarOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxProgressBarOptions.onComplete": {
    "shortDescription": "A function that is executed when the [value](/api-reference/10%20UI%20Components/dxProgressBar/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxProgressBar/Configuration/#value') reaches the [maximum](/api-reference/10%20UI%20Components/dxTrackBar/1%20Configuration/max.md '/Documentation/ApiReference/UI_Components/dxProgressBar/Configuration/#max')."
  },
  "dxProgressBarOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxProgressBarOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxProgressBarOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxProgressBarOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxProgressBarOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxProgressBar/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxProgressBarOptions.showStatus": {
    "shortDescription": "Specifies whether or not the UI component displays a progress status."
  },
  "dxProgressBarOptions.statusFormat": {
    "shortDescription": "Specifies a format for the progress status."
  },
  "dxProgressBarOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxProgressBarOptions.value": {
    "shortDescription": "The current UI component value."
  },
  "DxPromise": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxRadioButton": {
    "shortDescription": "A radio button UI component."
  },
  "dxRadioGroup": {
    "shortDescription": "The RadioGroup is a UI component that contains a set of radio buttons and allows an end user to make a single selection from the set."
  },
  "dxRadioGroupOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxRadioGroupOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxRadioGroupOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxRadioGroupOptions.layout": {
    "shortDescription": "Specifies the radio group layout."
  },
  "dxRadioGroupOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxRadioGroupOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxRadioGroupOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxRadioGroupOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxRadioGroupOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxRadioGroupOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxRadioGroup/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxRadioGroupOptions.value": {
    "shortDescription": "Specifies the UI component's value."
  },
  "dxRangeSelector": {
    "shortDescription": "The RangeSelector is a UI component that allows a user to select a range of values on a scale."
  },
  "dxRangeSelector.getValue()": {
    "shortDescription": "Gets the currently selected range."
  },
  "dxRangeSelector.render(skipChartAnimation)": {
    "shortDescription": "Redraws the UI component."
  },
  "dxRangeSelector.setValue(value)": {
    "shortDescription": "Sets the selected range."
  },
  "dxRangeSelector.valueChanged": {
    "shortDescription": "Raised after the UI component's [value](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/value '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/#value') is changed."
  },
  "dxRangeSelectorOptions.background": {
    "shortDescription": "Specifies the properties for the range selector's background."
  },
  "dxRangeSelectorOptions.background.color": {
    "shortDescription": "Specifies the background color for the RangeSelector."
  },
  "dxRangeSelectorOptions.background.image": {
    "shortDescription": "Specifies image properties."
  },
  "dxRangeSelectorOptions.background.image.location": {
    "shortDescription": "Specifies a location for the image in the background of a range selector."
  },
  "dxRangeSelectorOptions.background.image.url": {
    "shortDescription": "Specifies the image's URL."
  },
  "dxRangeSelectorOptions.background.visible": {
    "shortDescription": "Indicates whether or not the background (background color and/or image) is visible."
  },
  "dxRangeSelectorOptions.behavior": {
    "shortDescription": "Specifies the RangeSelector's behavior properties."
  },
  "dxRangeSelectorOptions.behavior.allowSlidersSwap": {
    "shortDescription": "Indicates whether or not you can swap sliders."
  },
  "dxRangeSelectorOptions.behavior.animationEnabled": {
    "shortDescription": "Indicates whether or not animation is enabled."
  },
  "dxRangeSelectorOptions.behavior.callValueChanged": {
    "shortDescription": "Specifies when to call the [onValueChanged](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/onValueChanged.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/#onValueChanged') function.",
    "depNote": "Use the [valueChangeMode](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/behavior/valueChangeMode.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/behavior/#valueChangeMode') property instead."
  },
  "dxRangeSelectorOptions.behavior.manualRangeSelectionEnabled": {
    "shortDescription": "Indicates whether or not an end user can specify the range using a mouse, without the use of sliders."
  },
  "dxRangeSelectorOptions.behavior.moveSelectedRangeByClick": {
    "shortDescription": "Indicates whether or not an end user can shift the selected range to the required location on a scale by clicking."
  },
  "dxRangeSelectorOptions.behavior.snapToTicks": {
    "shortDescription": "Indicates whether to snap a slider to ticks."
  },
  "dxRangeSelectorOptions.behavior.valueChangeMode": {
    "shortDescription": "Specifies when to change the component's [value](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/value '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/#value')."
  },
  "dxRangeSelectorOptions.chart": {
    "shortDescription": "Specifies the properties required to display a chart as the range selector's background."
  },
  "dxRangeSelectorOptions.chart.barGroupPadding": {
    "shortDescription": "Controls the padding and consequently the width of a group of bars with the same argument using relative units. Ignored if the [barGroupWidth](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/chart/barGroupWidth.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/chart/#barGroupWidth') property is set."
  },
  "dxRangeSelectorOptions.chart.barGroupWidth": {
    "shortDescription": "Specifies a fixed width for groups of bars with the same argument, measured in pixels. Takes precedence over the [barGroupPadding](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/chart/barGroupPadding.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/chart/#barGroupPadding') property."
  },
  "dxRangeSelectorOptions.chart.bottomIndent": {
    "shortDescription": "Specifies an indent from the background's bottom to the lowest chart point. Accepts values from 0 to 1."
  },
  "dxRangeSelectorOptions.chart.commonSeriesSettings": {
    "shortDescription": "An object defining the common configuration properties for the chart's series."
  },
  "dxRangeSelectorOptions.chart.dataPrepareSettings": {
    "shortDescription": "An object providing properties for managing data from a data source."
  },
  "dxRangeSelectorOptions.chart.dataPrepareSettings.checkTypeForAllData": {
    "shortDescription": "Specifies whether or not to validate values from a data source."
  },
  "dxRangeSelectorOptions.chart.dataPrepareSettings.convertToAxisDataType": {
    "shortDescription": "Specifies whether or not to convert the values from a data source into the data type of an axis."
  },
  "dxRangeSelectorOptions.chart.dataPrepareSettings.sortingMethod": {
    "shortDescription": "Specifies how to sort series points."
  },
  "dxRangeSelectorOptions.chart.maxBubbleSize": {
    "shortDescription": "Specifies a coefficient that determines the diameter of the largest bubble."
  },
  "dxRangeSelectorOptions.chart.minBubbleSize": {
    "shortDescription": "Specifies the diameter of the smallest bubble measured in pixels."
  },
  "dxRangeSelectorOptions.chart.negativesAsZeroes": {
    "shortDescription": "Forces the UI component to treat negative values as zeroes. Applies to stacked-like series only."
  },
  "dxRangeSelectorOptions.chart.palette": {
    "shortDescription": "Sets the palette to be used to colorize series in the chart."
  },
  "dxRangeSelectorOptions.chart.paletteExtensionMode": {
    "shortDescription": "Specifies what to do with colors in the [palette](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/chart/palette.md '{basewidgetpath}/Configuration/chart/#palette') when their number is less than the number of series in the chart."
  },
  "dxRangeSelectorOptions.chart.series": {
    "shortDescription": "An object defining the chart's series."
  },
  "dxRangeSelectorOptions.chart.seriesTemplate": {
    "shortDescription": "Defines properties for the series template."
  },
  "dxRangeSelectorOptions.chart.seriesTemplate.customizeSeries": {
    "shortDescription": "Specifies a callback function that returns a [series](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/chart/series '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/chart/#series') object with individual series settings."
  },
  "dxRangeSelectorOptions.chart.seriesTemplate.nameField": {
    "shortDescription": "Specifies a data source field that represents the series name."
  },
  "dxRangeSelectorOptions.chart.topIndent": {
    "shortDescription": "Specifies an indent from the background's top to the topmost chart point. Accepts values from 0 to 1."
  },
  "dxRangeSelectorOptions.chart.valueAxis": {
    "shortDescription": "Configures the chart value axis."
  },
  "dxRangeSelectorOptions.chart.valueAxis.inverted": {
    "shortDescription": "Indicates whether or not the chart's value axis must be inverted."
  },
  "dxRangeSelectorOptions.chart.valueAxis.logarithmBase": {
    "shortDescription": "Specifies the value to be raised to a power when generating ticks for a [logarithmic value axis](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/chart/valueAxis/type.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/chart/valueAxis/#type')."
  },
  "dxRangeSelectorOptions.chart.valueAxis.max": {
    "shortDescription": "Specifies the maximum value of the chart's value axis."
  },
  "dxRangeSelectorOptions.chart.valueAxis.min": {
    "shortDescription": "Specifies the minimum value of the chart's value axis."
  },
  "dxRangeSelectorOptions.chart.valueAxis.type": {
    "shortDescription": "Specifies the type of the value axis."
  },
  "dxRangeSelectorOptions.chart.valueAxis.valueType": {
    "shortDescription": "Specifies the desired type of axis values."
  },
  "dxRangeSelectorOptions.containerBackgroundColor": {
    "shortDescription": "Specifies the color of the parent page element."
  },
  "dxRangeSelectorOptions.dataSource": {
    "shortDescription": "Specifies a data source for the scale values and for the [chart](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/chart '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/chart/') at the background."
  },
  "dxRangeSelectorOptions.dataSourceField": {
    "shortDescription": "Specifies the data source field that provides data for the scale."
  },
  "dxRangeSelectorOptions.indent": {
    "shortDescription": "Range selector's indent properties."
  },
  "dxRangeSelectorOptions.indent.left": {
    "shortDescription": "Specifies range selector's left indent."
  },
  "dxRangeSelectorOptions.indent.right": {
    "shortDescription": "Specifies range selector's right indent."
  },
  "dxRangeSelectorOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxRangeSelectorOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxRangeSelectorOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxRangeSelectorOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxRangeSelectorOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxRangeSelectorOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxRangeSelectorOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxRangeSelectorOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxRangeSelectorOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/value '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/#value') is changed."
  },
  "dxRangeSelectorOptions.scale": {
    "shortDescription": "Specifies properties of the range selector's scale."
  },
  "dxRangeSelectorOptions.scale.aggregateByCategory": {
    "shortDescription": "Aggregates series points that fall into the same category.",
    "depNote": "Use CommonSeries.aggregation.enabled instead."
  },
  "dxRangeSelectorOptions.scale.aggregationGroupWidth": {
    "shortDescription": "Specifies the length of aggregation intervals in pixels. Does not apply if [aggregateByCategory](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/aggregateByCategory.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#aggregateByCategory') is **true**. May be ignored in favor of the [aggregationInterval](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/aggregationInterval '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/aggregationInterval/') property."
  },
  "dxRangeSelectorOptions.scale.aggregationInterval": {
    "shortDescription": "Specifies the length of aggregation intervals in scale units. Applies only to the scale of the continuous or logarithmic [type](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/type.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#type')."
  },
  "dxRangeSelectorOptions.scale.allowDecimals": {
    "shortDescription": "Specifies whether to allow decimal values on the scale. When **false**, the scale contains integer values only."
  },
  "dxRangeSelectorOptions.scale.breaks": {
    "shortDescription": "Declares a scale break collection. Applies only if the scale's [type](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/type.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#type') is *\"continuous\"* or *\"logarithmic\"*."
  },
  "dxRangeSelectorOptions.scale.breakStyle": {
    "shortDescription": "Configures the scale breaks' appearance."
  },
  "dxRangeSelectorOptions.scale.breakStyle.color": {
    "shortDescription": "Specifies the scale breaks' color."
  },
  "dxRangeSelectorOptions.scale.breakStyle.line": {
    "shortDescription": "Specifies the scale breaks' line style."
  },
  "dxRangeSelectorOptions.scale.breakStyle.width": {
    "shortDescription": "Specifies the scale breaks' width in pixels."
  },
  "dxRangeSelectorOptions.scale.categories": {
    "shortDescription": "Specifies the order of arguments on a discrete scale."
  },
  "dxRangeSelectorOptions.scale.discreteAxisDivisionMode": {
    "shortDescription": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
  },
  "dxRangeSelectorOptions.scale.endOnTick": {
    "shortDescription": "Specifies whether to force the scale to start and end on ticks."
  },
  "dxRangeSelectorOptions.scale.endValue": {
    "shortDescription": "Specifies the scale's end value."
  },
  "dxRangeSelectorOptions.scale.holidays": {
    "shortDescription": "Days to be excluded from the scale when [workdaysOnly](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/workdaysOnly.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#workdaysOnly') is **true**."
  },
  "dxRangeSelectorOptions.scale.label": {
    "shortDescription": "Specifies common properties for scale labels."
  },
  "dxRangeSelectorOptions.scale.label.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed in scale labels."
  },
  "dxRangeSelectorOptions.scale.label.font": {
    "shortDescription": "Specifies font properties for the text displayed in the range selector's scale labels."
  },
  "dxRangeSelectorOptions.scale.label.format": {
    "shortDescription": "Formats a value before it is displayed in a scale label."
  },
  "dxRangeSelectorOptions.scale.label.overlappingBehavior": {
    "shortDescription": "Decides how to arrange scale labels when there is not enough space to keep all of them."
  },
  "dxRangeSelectorOptions.scale.label.topIndent": {
    "shortDescription": "Specifies a spacing between scale labels and the [background](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/background '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/background/') bottom edge."
  },
  "dxRangeSelectorOptions.scale.label.visible": {
    "shortDescription": "Specifies whether or not the scale's labels are visible."
  },
  "dxRangeSelectorOptions.scale.linearThreshold": {
    "shortDescription": "Specifies a value used to calculate the range on a [logarithmic scale](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/type.md '{basewidgetpath}/Configuration/scale/#type') within which the scale should be linear. Applies only if the data source contains negative values or zeroes."
  },
  "dxRangeSelectorOptions.scale.logarithmBase": {
    "shortDescription": "Specifies the value to be raised to a power when generating ticks for a [logarithmic scale](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/type.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#type')."
  },
  "dxRangeSelectorOptions.scale.marker": {
    "shortDescription": "Specifies properties for the date-time scale's markers."
  },
  "dxRangeSelectorOptions.scale.marker.label": {
    "shortDescription": "Defines the properties that can be set for the text that is displayed by the scale markers."
  },
  "dxRangeSelectorOptions.scale.marker.label.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed in scale markers."
  },
  "dxRangeSelectorOptions.scale.marker.label.format": {
    "shortDescription": "Formats a value before it is displayed in a scale marker."
  },
  "dxRangeSelectorOptions.scale.marker.separatorHeight": {
    "shortDescription": "Specifies the height of the marker's separator."
  },
  "dxRangeSelectorOptions.scale.marker.textLeftIndent": {
    "shortDescription": "Specifies the space between the marker label and the marker separator."
  },
  "dxRangeSelectorOptions.scale.marker.textTopIndent": {
    "shortDescription": "Specifies the space between the marker's label and the top edge of the marker's separator."
  },
  "dxRangeSelectorOptions.scale.marker.topIndent": {
    "shortDescription": "Specified the indent between the marker and the scale labels."
  },
  "dxRangeSelectorOptions.scale.marker.visible": {
    "shortDescription": "Indicates whether scale markers are visible."
  },
  "dxRangeSelectorOptions.scale.maxRange": {
    "shortDescription": "Specifies the maximum range that can be selected."
  },
  "dxRangeSelectorOptions.scale.minorTick": {
    "shortDescription": "Specifies properties of the range selector's minor ticks."
  },
  "dxRangeSelectorOptions.scale.minorTick.color": {
    "shortDescription": "Specifies the color of the scale's minor ticks."
  },
  "dxRangeSelectorOptions.scale.minorTick.opacity": {
    "shortDescription": "Specifies the opacity of the scale's minor ticks."
  },
  "dxRangeSelectorOptions.scale.minorTick.visible": {
    "shortDescription": "Indicates whether scale minor ticks are visible or not."
  },
  "dxRangeSelectorOptions.scale.minorTick.width": {
    "shortDescription": "Specifies the width of the scale's minor ticks."
  },
  "dxRangeSelectorOptions.scale.minorTickCount": {
    "shortDescription": "Specifies the number of minor ticks between neighboring major ticks."
  },
  "dxRangeSelectorOptions.scale.minorTickInterval": {
    "shortDescription": "Specifies an interval between minor ticks."
  },
  "dxRangeSelectorOptions.scale.minRange": {
    "shortDescription": "Specifies the minimum range that can be selected."
  },
  "dxRangeSelectorOptions.scale.placeholderHeight": {
    "shortDescription": "Specifies the height of the space reserved for the scale in pixels."
  },
  "dxRangeSelectorOptions.scale.showCustomBoundaryTicks": {
    "shortDescription": "Specifies whether or not to show ticks for the boundary scale values, when neither major ticks nor minor ticks are created for these values."
  },
  "dxRangeSelectorOptions.scale.singleWorkdays": {
    "shortDescription": "Days to be included in the scale when [workdaysOnly](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/workdaysOnly.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#workdaysOnly') is **true**."
  },
  "dxRangeSelectorOptions.scale.startValue": {
    "shortDescription": "Specifies the scale's start value."
  },
  "dxRangeSelectorOptions.scale.tick": {
    "shortDescription": "Specifies properties defining the appearance of scale ticks."
  },
  "dxRangeSelectorOptions.scale.tick.color": {
    "shortDescription": "Specifies the color of scale ticks (major ticks only)."
  },
  "dxRangeSelectorOptions.scale.tick.opacity": {
    "shortDescription": "Specifies the opacity of scale ticks (major ticks only)."
  },
  "dxRangeSelectorOptions.scale.tick.width": {
    "shortDescription": "Specifies the width of the scale's ticks (major ticks only)."
  },
  "dxRangeSelectorOptions.scale.tickInterval": {
    "shortDescription": "Specifies an interval between axis ticks."
  },
  "dxRangeSelectorOptions.scale.type": {
    "shortDescription": "Specifies the type of the scale."
  },
  "dxRangeSelectorOptions.scale.valueType": {
    "shortDescription": "Specifies the type of values on the scale."
  },
  "dxRangeSelectorOptions.scale.workdaysOnly": {
    "shortDescription": "Leaves only workdays on the scale: the [work week](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/workWeek.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#workWeek') days plus [single workdays](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/singleWorkdays.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#singleWorkdays') minus [holidays](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/holidays.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#holidays'). Applies only if the scale's [valueType](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/valueType.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#valueType') is *\"datetime\"*."
  },
  "dxRangeSelectorOptions.scale.workWeek": {
    "shortDescription": "Specifies which days are workdays. The array can contain values from 0 (Sunday) to 6 (Saturday). Applies only if [workdaysOnly](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/workdaysOnly.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#workdaysOnly') is **true**."
  },
  "dxRangeSelectorOptions.selectedRangeColor": {
    "shortDescription": "Specifies the color of the selected range."
  },
  "dxRangeSelectorOptions.selectedRangeUpdateMode": {
    "shortDescription": "Specifies how the selected range should behave when data is updated. Applies only when the RangeSelector is [bound to a data source](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/dataSource.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/#dataSource')."
  },
  "dxRangeSelectorOptions.shutter": {
    "shortDescription": "Specifies range selector shutter properties."
  },
  "dxRangeSelectorOptions.shutter.color": {
    "shortDescription": "Specifies shutter color."
  },
  "dxRangeSelectorOptions.shutter.opacity": {
    "shortDescription": "Specifies the opacity of the **color** of shutters."
  },
  "dxRangeSelectorOptions.sliderHandle": {
    "shortDescription": "Specifies the appearance of the range selector's slider handles."
  },
  "dxRangeSelectorOptions.sliderHandle.color": {
    "shortDescription": "Specifies the color of the slider handles."
  },
  "dxRangeSelectorOptions.sliderHandle.opacity": {
    "shortDescription": "Specifies the opacity of the slider handles."
  },
  "dxRangeSelectorOptions.sliderHandle.width": {
    "shortDescription": "Specifies the width of the slider handles."
  },
  "dxRangeSelectorOptions.sliderMarker": {
    "shortDescription": "Defines the properties of the range selector slider markers."
  },
  "dxRangeSelectorOptions.sliderMarker.color": {
    "shortDescription": "Specifies the color of the slider markers."
  },
  "dxRangeSelectorOptions.sliderMarker.customizeText": {
    "shortDescription": "Specifies a callback function that returns the text to be displayed by slider markers."
  },
  "dxRangeSelectorOptions.sliderMarker.font": {
    "shortDescription": "Specifies font properties for the text displayed by the range selector slider markers."
  },
  "dxRangeSelectorOptions.sliderMarker.format": {
    "shortDescription": "Formats a value before it is displayed in a slider marker."
  },
  "dxRangeSelectorOptions.sliderMarker.invalidRangeColor": {
    "shortDescription": "Specifies the color used for the slider marker text when the currently selected range does not match the [minRange](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/minRange '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/minRange/') and [maxRange](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/maxRange '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/maxRange/') values."
  },
  "dxRangeSelectorOptions.sliderMarker.paddingLeftRight": {
    "shortDescription": "Specifies the empty space between the marker's left and right borders and the marker's text."
  },
  "dxRangeSelectorOptions.sliderMarker.paddingTopBottom": {
    "shortDescription": "Specifies the empty space between the marker's top and bottom borders and the marker's text."
  },
  "dxRangeSelectorOptions.sliderMarker.placeholderHeight": {
    "shortDescription": "Specifies the placeholder height of the slider marker."
  },
  "dxRangeSelectorOptions.sliderMarker.visible": {
    "shortDescription": "Indicates whether or not the slider markers are visible."
  },
  "dxRangeSelectorOptions.tooltip": {
    "shortDescription": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer."
  },
  "dxRangeSelectorOptions.value": {
    "shortDescription": "The selected range (initial or current). Equals the entire [scale](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/') when not set."
  },
  "dxRangeSlider": {
    "shortDescription": "The RangeSlider is a UI component that allows an end user to choose a range of numeric values."
  },
  "dxRangeSlider.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxRangeSlider/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxRangeSlider.valueChanged": {
    "shortDescription": "Raised after the UI component's [value](/api-reference/10%20UI%20Components/Editor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxRangeSliderOptions.end": {
    "shortDescription": "The right edge of the interval currently selected using the range slider."
  },
  "dxRangeSliderOptions.endName": {
    "shortDescription": "The value to be assigned to the <a href=\"http://www.w3schools.com/tags/att_input_name.asp\" target=\"_blank\">name</a> attribute of the underlying `<input>` element."
  },
  "dxRangeSliderOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxRangeSliderOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxRangeSliderOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxRangeSliderOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxRangeSliderOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxRangeSliderOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxRangeSlider/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxRangeSliderOptions.start": {
    "shortDescription": "The left edge of the interval currently selected using the range slider."
  },
  "dxRangeSliderOptions.startName": {
    "shortDescription": "The value to be assigned to the <a href=\"http://www.w3schools.com/tags/att_input_name.asp\" target=\"_blank\">name</a> attribute of the underlying `<input>` element."
  },
  "dxRangeSliderOptions.value": {
    "shortDescription": "Specifies the UI component's value."
  },
  "dxRecurrenceEditor": {
    "shortDescription": "A base class for editors."
  },
  "dxRecurrenceEditorOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxRecurrenceEditorOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Widgets/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxRecurrenceEditorOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxRecurrenceEditorOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxRecurrenceEditorOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/Editor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxRecurrenceEditorOptions.value": {
    "shortDescription": "Specifies the UI component's value."
  },
  "dxResizable": {
    "shortDescription": "The Resizable UI component enables its content to be resizable in the UI."
  },
  "dxResizable.resize": {
    "shortDescription": "Raised each time the UI component is resized by one pixel."
  },
  "dxResizable.resizeEnd": {
    "shortDescription": "Raised when resizing ends."
  },
  "dxResizable.resizeStart": {
    "shortDescription": "Raised when resizing starts."
  },
  "dxResizableOptions.area": {
    "shortDescription": "Specifies the area within which users can resize the UI component."
  },
  "dxResizableOptions.handles": {
    "shortDescription": "Specifies which borders of the UI component element are used as a handle."
  },
  "dxResizableOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxResizableOptions.keepAspectRatio": {
    "shortDescription": "Specifies whether to resize the UI component's content proportionally when you use corner handles."
  },
  "dxResizableOptions.maxHeight": {
    "shortDescription": "Specifies the upper height boundary for resizing."
  },
  "dxResizableOptions.maxWidth": {
    "shortDescription": "Specifies the upper width boundary for resizing."
  },
  "dxResizableOptions.minHeight": {
    "shortDescription": "Specifies the lower height boundary for resizing."
  },
  "dxResizableOptions.minWidth": {
    "shortDescription": "Specifies the lower width boundary for resizing."
  },
  "dxResizableOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxResizableOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxResizableOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxResizableOptions.onResize": {
    "shortDescription": "A function that is executed each time the UI component is resized by one pixel."
  },
  "dxResizableOptions.onResizeEnd": {
    "shortDescription": "A function that is executed when resizing ends."
  },
  "dxResizableOptions.onResizeStart": {
    "shortDescription": "A function that is executed when resizing starts."
  },
  "dxResizableOptions.stepPrecision": {
    "shortDescription": ""
  },
  "dxResizableOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxResponsiveBox": {
    "shortDescription": "The ResponsiveBox UI component allows you to create an application or a website with a layout adapted to different screen sizes."
  },
  "dxResponsiveBox.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxResponsiveBox.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxResponsiveBox.selectionChanged": {
    "shortDescription": "Raised after selection changes."
  },
  "dxResponsiveBox.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxResponsiveBoxItem.location": {
    "shortDescription": "Specifies the item location and size against the UI component grid."
  },
  "dxResponsiveBoxItem.location.col": {
    "shortDescription": "Specifies which column the element should occupy. Accepts an index from the [cols](/api-reference/10%20UI%20Components/dxResponsiveBox/1%20Configuration/cols '/Documentation/ApiReference/UI_Components/dxResponsiveBox/Configuration/cols/') array."
  },
  "dxResponsiveBoxItem.location.colspan": {
    "shortDescription": "Specifies how many columns the element should span."
  },
  "dxResponsiveBoxItem.location.row": {
    "shortDescription": "Specifies which row the element should occupy. Accepts an index from the [rows](/api-reference/10%20UI%20Components/dxResponsiveBox/1%20Configuration/rows '/Documentation/ApiReference/UI_Components/dxResponsiveBox/Configuration/rows/') array."
  },
  "dxResponsiveBoxItem.location.rowspan": {
    "shortDescription": "Specifies how many rows the element should span."
  },
  "dxResponsiveBoxItem.location.screen": {
    "shortDescription": "Decides on which screens the current **location** settings should be applied to the element."
  },
  "dxResponsiveBoxOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxResponsiveBoxOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxResponsiveBoxOptions.cols": {
    "shortDescription": "Specifies the collection of columns for the grid used to position layout elements."
  },
  "dxResponsiveBoxOptions.cols.baseSize": {
    "shortDescription": "The column's base width. Calculated automatically when the [singleColumnScreen](/api-reference/10%20UI%20Components/dxResponsiveBox/1%20Configuration/singleColumnScreen.md '/Documentation/ApiReference/UI_Components/dxResponsiveBox/Configuration/#singleColumnScreen') property arranges all elements in a single column."
  },
  "dxResponsiveBoxOptions.cols.ratio": {
    "shortDescription": "The column width ratio."
  },
  "dxResponsiveBoxOptions.cols.screen": {
    "shortDescription": "Decides on which screens the current column is rendered."
  },
  "dxResponsiveBoxOptions.cols.shrink": {
    "shortDescription": "A factor that defines how much a column width shrinks relative to the rest of the columns in the container."
  },
  "dxResponsiveBoxOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxResponsiveBoxOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxResponsiveBoxOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxResponsiveBoxOptions.hint": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on the UI component."
  },
  "dxResponsiveBoxOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxResponsiveBoxOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "dxResponsiveBoxOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "dxResponsiveBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxResponsiveBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxResponsiveBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxResponsiveBoxOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxResponsiveBoxOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxResponsiveBoxOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxResponsiveBoxOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxResponsiveBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxResponsiveBoxOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxResponsiveBoxOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxResponsiveBoxOptions.rows": {
    "shortDescription": "Specifies the collection of rows for the grid used to position layout elements."
  },
  "dxResponsiveBoxOptions.rows.baseSize": {
    "shortDescription": "The row's base height. Calculated automatically when the [singleColumnScreen](/api-reference/10%20UI%20Components/dxResponsiveBox/1%20Configuration/singleColumnScreen.md '/Documentation/ApiReference/UI_Components/dxResponsiveBox/Configuration/#singleColumnScreen') property arranges all elements in a single column."
  },
  "dxResponsiveBoxOptions.rows.ratio": {
    "shortDescription": "The row height ratio."
  },
  "dxResponsiveBoxOptions.rows.screen": {
    "shortDescription": "Decides on which screens the current row is rendered."
  },
  "dxResponsiveBoxOptions.rows.shrink": {
    "shortDescription": "A factor that defines how much a row height shrinks relative to the rest of the rows in the container."
  },
  "dxResponsiveBoxOptions.screenByWidth": {
    "shortDescription": "Specifies the function returning the [size qualifier](/concepts/05%20UI%20Components/ResponsiveBox/05%20Size%20Qualifiers.md '/Documentation/Guide/UI_Components/ResponsiveBox/Size_Qualifiers/') depending on the screen's width."
  },
  "dxResponsiveBoxOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "dxResponsiveBoxOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "dxResponsiveBoxOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxResponsiveBoxOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxResponsiveBoxOptions.singleColumnScreen": {
    "shortDescription": "Specifies on which screens all layout elements should be arranged in a single column. Accepts a single or several [size qualifiers](/concepts/05%20UI%20Components/ResponsiveBox/05%20Size%20Qualifiers.md '/Documentation/Guide/UI_Components/ResponsiveBox/Size_Qualifiers/') separated by a space."
  },
  "dxResponsiveBoxOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxResponsiveBoxOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxSankey": {
    "shortDescription": "The Sankey is a UI component that visualizes the flow magnitude between value sets. The values being connected are called nodes; the connections - links. The higher the flow magnitude, the wider the link is."
  },
  "dxSankey.getAllLinks()": {
    "shortDescription": "Gets all sankey links."
  },
  "dxSankey.getAllNodes()": {
    "shortDescription": "Gets all sankey nodes."
  },
  "dxSankey.hideTooltip()": {
    "shortDescription": "Hides all UI component tooltips."
  },
  "dxSankey.linkClick": {
    "shortDescription": "Raised when a sankey link is clicked or tapped."
  },
  "dxSankey.linkHoverChanged": {
    "shortDescription": "Raised after the pointer enters or leaves a sankey link."
  },
  "dxSankey.nodeClick": {
    "shortDescription": "Raised when a sankey node is clicked or tapped."
  },
  "dxSankey.nodeHoverChanged": {
    "shortDescription": "Raised after the pointer enters or leaves a sankey node."
  },
  "dxSankeyConnectionInfoObject.source": {
    "shortDescription": "The title of the link's source node."
  },
  "dxSankeyConnectionInfoObject.target": {
    "shortDescription": "The title of the link's target node."
  },
  "dxSankeyConnectionInfoObject.weight": {
    "shortDescription": "The link's weight."
  },
  "dxSankeyLink": {
    "shortDescription": "A sankey link's structure."
  },
  "dxSankeyLink.connection": {
    "shortDescription": "An object that describes the connection."
  },
  "dxSankeyLink.hideTooltip()": {
    "shortDescription": "Hides the sankey link's tooltip."
  },
  "dxSankeyLink.hover(state)": {
    "shortDescription": "Changes the sankey link's hover state."
  },
  "dxSankeyLink.isHovered()": {
    "shortDescription": "Indicates whether the sankey link is in the hover state."
  },
  "dxSankeyLink.showTooltip()": {
    "shortDescription": "Shows the sankey link's tooltip."
  },
  "dxSankeyNode": {
    "shortDescription": "A sankey node's structure."
  },
  "dxSankeyNode.hideTooltip()": {
    "shortDescription": "Hides the sankey node's tooltip."
  },
  "dxSankeyNode.hover(state)": {
    "shortDescription": "Changes the sankey node's hover state."
  },
  "dxSankeyNode.isHovered()": {
    "shortDescription": "Indicates whether the sankey node is in the hover state."
  },
  "dxSankeyNode.label": {
    "shortDescription": "The node's label."
  },
  "dxSankeyNode.linksIn": {
    "shortDescription": "The node's incoming links."
  },
  "dxSankeyNode.linksOut": {
    "shortDescription": "The node's outgoing links."
  },
  "dxSankeyNode.showTooltip()": {
    "shortDescription": "Shows the sankey node's tooltip."
  },
  "dxSankeyNode.title": {
    "shortDescription": "The node's label.",
    "depNote": "Use label instead."
  },
  "dxSankeyOptions.adaptiveLayout": {
    "shortDescription": "Specifies adaptive layout properties."
  },
  "dxSankeyOptions.adaptiveLayout.height": {
    "shortDescription": "Specifies the minimum container height at which the layout begins to adapt."
  },
  "dxSankeyOptions.adaptiveLayout.keepLabels": {
    "shortDescription": "Specifies whether [node labels](/api-reference/10%20UI%20Components/dxSankey/1%20Configuration/label '/Documentation/ApiReference/UI_Components/dxSankey/Configuration/label/') should be kept when the UI component adapts the layout."
  },
  "dxSankeyOptions.adaptiveLayout.width": {
    "shortDescription": "Specifies the minimum container width at which the layout begins to adapt."
  },
  "dxSankeyOptions.alignment": {
    "shortDescription": "Aligns node columns vertically."
  },
  "dxSankeyOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxSankeyOptions.hoverEnabled": {
    "shortDescription": "Specifies whether nodes and links change their style when they are hovered over or pressed."
  },
  "dxSankeyOptions.label": {
    "shortDescription": "Configures sankey nodes' labels."
  },
  "dxSankeyOptions.label.border": {
    "shortDescription": "Configures the labels' borders."
  },
  "dxSankeyOptions.label.border.color": {
    "shortDescription": "Colors the labels' borders."
  },
  "dxSankeyOptions.label.border.visible": {
    "shortDescription": "Specifies whether the borders are visible."
  },
  "dxSankeyOptions.label.border.width": {
    "shortDescription": "Sets the borders' width in pixels."
  },
  "dxSankeyOptions.label.customizeText": {
    "shortDescription": "Customizes the labels' texts."
  },
  "dxSankeyOptions.label.font": {
    "shortDescription": "Specifies the labels' font properties."
  },
  "dxSankeyOptions.label.horizontalOffset": {
    "shortDescription": "Moves the labels horizontally from their initial positions."
  },
  "dxSankeyOptions.label.overlappingBehavior": {
    "shortDescription": "Specifies how to arrange labels when there is insufficient space to display them all."
  },
  "dxSankeyOptions.label.shadow": {
    "shortDescription": "Configures the labels' shadows."
  },
  "dxSankeyOptions.label.shadow.blur": {
    "shortDescription": "Specifies the shadows' blur distance. A larger value increases the blur distance."
  },
  "dxSankeyOptions.label.shadow.color": {
    "shortDescription": "Colors the labels' shadows."
  },
  "dxSankeyOptions.label.shadow.offsetX": {
    "shortDescription": "Moves the shadows horizontally from their initial positions."
  },
  "dxSankeyOptions.label.shadow.offsetY": {
    "shortDescription": "Moves the shadows vertically from their initial positions."
  },
  "dxSankeyOptions.label.shadow.opacity": {
    "shortDescription": "Specifies the shadows' transparency."
  },
  "dxSankeyOptions.label.useNodeColors": {
    "shortDescription": "Specifies whether to color labels in the nodes' colors."
  },
  "dxSankeyOptions.label.verticalOffset": {
    "shortDescription": "Moves the labels vertically from their initial positions."
  },
  "dxSankeyOptions.label.visible": {
    "shortDescription": "Specifies whether the labels are visible."
  },
  "dxSankeyOptions.link": {
    "shortDescription": "Configures sankey links' appearance."
  },
  "dxSankeyOptions.link.border": {
    "shortDescription": "Configures the links' borders."
  },
  "dxSankeyOptions.link.border.color": {
    "shortDescription": "Colors the links' borders."
  },
  "dxSankeyOptions.link.border.visible": {
    "shortDescription": "Specifies whether the borders are visible."
  },
  "dxSankeyOptions.link.border.width": {
    "shortDescription": "Sets the borders' width in pixels."
  },
  "dxSankeyOptions.link.color": {
    "shortDescription": "Colors the sankey links. Applies only if [colorMode](/api-reference/10%20UI%20Components/dxSankey/1%20Configuration/link/colorMode.md '/Documentation/ApiReference/UI_Components/dxSankey/Configuration/link/#colorMode') is *\"none\"*."
  },
  "dxSankeyOptions.link.colorMode": {
    "shortDescription": "Specifies how to color links."
  },
  "dxSankeyOptions.link.hoverStyle": {
    "shortDescription": "Configures the appearance a link changes to when it is hovered over or pressed."
  },
  "dxSankeyOptions.link.hoverStyle.border": {
    "shortDescription": "Configures the appearance a link's border changes to when the link is hovered over or pressed."
  },
  "dxSankeyOptions.link.hoverStyle.border.color": {
    "shortDescription": "Specifies the color a link's border changes to when the link is hovered over or pressed."
  },
  "dxSankeyOptions.link.hoverStyle.border.visible": {
    "shortDescription": "Specifies whether a link's border is visible when the link is hovered over or pressed."
  },
  "dxSankeyOptions.link.hoverStyle.border.width": {
    "shortDescription": "Specifies the width a link's border changes to when the link is hovered over or pressed."
  },
  "dxSankeyOptions.link.hoverStyle.color": {
    "shortDescription": "Specifies the color a link changes to when it is hovered over or pressed."
  },
  "dxSankeyOptions.link.hoverStyle.hatching": {
    "shortDescription": "Applies hatching to a link when it is hovered over or pressed."
  },
  "dxSankeyOptions.link.hoverStyle.hatching.direction": {
    "shortDescription": "Specifies hatching lines' direction."
  },
  "dxSankeyOptions.link.hoverStyle.hatching.opacity": {
    "shortDescription": "Specifies hatching lines' transparency."
  },
  "dxSankeyOptions.link.hoverStyle.hatching.step": {
    "shortDescription": "Specifies the distance in pixels between two hatching lines."
  },
  "dxSankeyOptions.link.hoverStyle.hatching.width": {
    "shortDescription": "Specifies hatching lines' width."
  },
  "dxSankeyOptions.link.hoverStyle.opacity": {
    "shortDescription": "Specifies the transparency a link changes to when it is hovered over or pressed."
  },
  "dxSankeyOptions.link.opacity": {
    "shortDescription": "Specifies the links' transparency."
  },
  "dxSankeyOptions.node": {
    "shortDescription": "Configures sankey nodes' appearance."
  },
  "dxSankeyOptions.node.border": {
    "shortDescription": "Configures the nodes' borders."
  },
  "dxSankeyOptions.node.border.color": {
    "shortDescription": "Colors the nodes' borders."
  },
  "dxSankeyOptions.node.border.visible": {
    "shortDescription": "Specifies whether the borders are visible."
  },
  "dxSankeyOptions.node.border.width": {
    "shortDescription": "Sets the borders' width in pixels."
  },
  "dxSankeyOptions.node.color": {
    "shortDescription": "Colors the sankey nodes."
  },
  "dxSankeyOptions.node.hoverStyle": {
    "shortDescription": "Configures the appearance a node changes to when it is hovered over or pressed."
  },
  "dxSankeyOptions.node.hoverStyle.border": {
    "shortDescription": "Configures the appearance a node's border changes to when the node is hovered over or pressed."
  },
  "dxSankeyOptions.node.hoverStyle.border.color": {
    "shortDescription": "Specifies the color a node's border changes to when the node is hovered over or pressed."
  },
  "dxSankeyOptions.node.hoverStyle.border.visible": {
    "shortDescription": "Specifies whether a node's border is visible when the node is hovered over or pressed."
  },
  "dxSankeyOptions.node.hoverStyle.border.width": {
    "shortDescription": "Specifies the width a node's border changes to when the node is hovered over or pressed."
  },
  "dxSankeyOptions.node.hoverStyle.color": {
    "shortDescription": "Specifies the color a node changes to when it is hovered over or pressed."
  },
  "dxSankeyOptions.node.hoverStyle.hatching": {
    "shortDescription": "Applies hatching to a node when it is hovered over or pressed."
  },
  "dxSankeyOptions.node.hoverStyle.hatching.direction": {
    "shortDescription": "Specifies hatching lines' direction."
  },
  "dxSankeyOptions.node.hoverStyle.hatching.opacity": {
    "shortDescription": "Specifies hatching lines' transparency."
  },
  "dxSankeyOptions.node.hoverStyle.hatching.step": {
    "shortDescription": "Specifies the distance in pixels between two hatching lines."
  },
  "dxSankeyOptions.node.hoverStyle.hatching.width": {
    "shortDescription": "Specifies hatching lines' width."
  },
  "dxSankeyOptions.node.hoverStyle.opacity": {
    "shortDescription": "Specifies the transparency a node changes to when it is hovered over or pressed."
  },
  "dxSankeyOptions.node.opacity": {
    "shortDescription": "Specifies the nodes' transparency."
  },
  "dxSankeyOptions.node.padding": {
    "shortDescription": "Specifies the vertical distance, in pixels, between two nodes."
  },
  "dxSankeyOptions.node.width": {
    "shortDescription": "Specifies the nodes' width in pixels."
  },
  "dxSankeyOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSankeyOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxSankeyOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxSankeyOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxSankeyOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxSankeyOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxSankeyOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxSankeyOptions.onLinkClick": {
    "shortDescription": "A function that is executed when a sankey link is clicked or tapped."
  },
  "dxSankeyOptions.onLinkHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a sankey link."
  },
  "dxSankeyOptions.onNodeClick": {
    "shortDescription": "A function that is executed when a sankey node is clicked or tapped."
  },
  "dxSankeyOptions.onNodeHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a sankey node."
  },
  "dxSankeyOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSankeyOptions.palette": {
    "shortDescription": "Sets the palette to be used to colorize sankey nodes."
  },
  "dxSankeyOptions.paletteExtensionMode": {
    "shortDescription": "Specifies how to extend the [palette](/api-reference/10%20UI%20Components/dxSankey/1%20Configuration/palette.md '/Documentation/ApiReference/UI_Components/dxSankey/Configuration/#palette') when it contains less colors than the number of sankey nodes."
  },
  "dxSankeyOptions.sortData": {
    "shortDescription": "Specifies nodes' sorting order in their columns."
  },
  "dxSankeyOptions.sourceField": {
    "shortDescription": "Specifies which data source field provides links' source nodes."
  },
  "dxSankeyOptions.targetField": {
    "shortDescription": "Specifies which data source field provides links' target nodes."
  },
  "dxSankeyOptions.tooltip": {
    "shortDescription": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer."
  },
  "dxSankeyOptions.tooltip.customizeLinkTooltip": {
    "shortDescription": "Customizes link tooltips' appearance."
  },
  "dxSankeyOptions.tooltip.customizeNodeTooltip": {
    "shortDescription": "Customizes node tooltips' appearance."
  },
  "dxSankeyOptions.tooltip.enabled": {
    "shortDescription": "Specifies whether the tooltip is enabled."
  },
  "dxSankeyOptions.tooltip.linkTooltipTemplate": {
    "shortDescription": "Specifies a custom template for a [link](/api-reference/10%20UI%20Components/dxSankey/1%20Configuration/link 'Documentation/ApiReference/UI_Components/dxSankey/Configuration/link/')'s tooltip."
  },
  "dxSankeyOptions.tooltip.nodeTooltipTemplate": {
    "shortDescription": "Specifies a custom template for a [node](/api-reference/10%20UI%20Components/dxSankey/1%20Configuration/node '/Documentation/ApiReference/UI_Components/dxSankey/Configuration/node/')'s tooltip."
  },
  "dxSankeyOptions.weightField": {
    "shortDescription": "Specifies which data source field provides links' weights."
  },
  "dxSankeyTooltip": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxScheduler": {
    "shortDescription": "The Scheduler is a UI component that represents scheduled data and allows a user to manage and edit it."
  },
  "dxScheduler.addAppointment(appointment)": {
    "shortDescription": "Adds an appointment."
  },
  "dxScheduler.appointmentAdded": {
    "shortDescription": "Raised after an appointment is added to the data source."
  },
  "dxScheduler.appointmentAdding": {
    "shortDescription": "Raised before an appointment is added to the data source."
  },
  "dxScheduler.appointmentClick": {
    "shortDescription": "Raised when an appointment is clicked or tapped."
  },
  "dxScheduler.appointmentContextMenu": {
    "shortDescription": "Raised when a user attempts to open the browser's context menu for an appointment."
  },
  "dxScheduler.appointmentDblClick": {
    "shortDescription": "Raised when an appointment is double-clicked or double-tapped."
  },
  "dxScheduler.appointmentDeleted": {
    "shortDescription": "Raised after an appointment is deleted from the data source."
  },
  "dxScheduler.appointmentDeleting": {
    "shortDescription": "Raised before an appointment is deleted from the data source."
  },
  "dxScheduler.appointmentFormOpening": {
    "shortDescription": "Raised before an appointment details form is opened."
  },
  "dxScheduler.appointmentRendered": {
    "shortDescription": "Raised when an appointment is rendered."
  },
  "dxScheduler.appointmentTooltipShowing": {
    "shortDescription": "Fires before showing an appointment's tooltip."
  },
  "dxScheduler.appointmentUpdated": {
    "shortDescription": "Raised after an appointment is updated in the data source."
  },
  "dxScheduler.appointmentUpdating": {
    "shortDescription": "Raised before an appointment is updated in the data source."
  },
  "dxScheduler.cellClick": {
    "shortDescription": "Raised when a view cell is clicked."
  },
  "dxScheduler.cellContextMenu": {
    "shortDescription": "Raised when a user attempts to open the browser's context menu for a cell."
  },
  "dxScheduler.deleteAppointment(appointment)": {
    "shortDescription": "Deletes an appointment from the timetable and its object from the data source."
  },
  "dxScheduler.deleteRecurrence(appointment, date, recurrenceEditMode)": {
    "shortDescription": "Deletes a recurring appointment occurrence."
  },
  "dxScheduler.getEndViewDate()": {
    "shortDescription": "Gets the current view's end date."
  },
  "dxScheduler.getStartViewDate()": {
    "shortDescription": "Gets the current view's start date."
  },
  "dxScheduler.hideAppointmentPopup(saveChanges)": {
    "shortDescription": "Hides an appointment details form."
  },
  "dxScheduler.hideAppointmentTooltip()": {
    "shortDescription": "Hides an appointment's or [cell overflow indicator](/concepts/05%20UI%20Components/Scheduler/030%20Appointments/080%20Cell%20Overflow%20Indicator.md '/Documentation/Guide/UI_Components/Scheduler/Appointments/Cell_Overflow_Indicator/')'s tooltip."
  },
  "dxScheduler.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxScheduler.scrollTo(date, group, allDay)": {
    "shortDescription": "Scrolls the current view to a specified position. Available for all views except *\"agenda\"*. You should specify the [height](/api-reference/10%20UI%20Components/DOMComponent/1%20Configuration/height.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#height') property to use this method."
  },
  "dxScheduler.scrollToTime(hours, minutes, date)": {
    "shortDescription": "Scrolls the current view to a specific day and time.",
    "depNote": "Use the scrollTo(date, group, allDay) method instead."
  },
  "dxScheduler.showAppointmentPopup(appointmentData, createNewAppointment, currentAppointmentData)": {
    "shortDescription": "Shows the appointment details form."
  },
  "dxScheduler.showAppointmentTooltip(appointmentData, target, currentAppointmentData)": {
    "shortDescription": "Shows a tooltip for a target element."
  },
  "dxScheduler.updateAppointment(target, appointment)": {
    "shortDescription": "Updates an appointment."
  },
  "dxSchedulerAppointment": {
    "shortDescription": "An object that describes an appointment in the [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') UI component."
  },
  "dxSchedulerAppointment.allDay": {
    "shortDescription": "Specifies whether the appointment lasts all day."
  },
  "dxSchedulerAppointment.description": {
    "shortDescription": "Specifies a detail description of the appointment."
  },
  "dxSchedulerAppointment.disabled": {
    "shortDescription": "Specifies whether the appointment responds to user interaction."
  },
  "dxSchedulerAppointment.endDate": {
    "shortDescription": "Specifies the ending of the appointment."
  },
  "dxSchedulerAppointment.endDateTimeZone": {
    "shortDescription": "Specifies the time zone for an appointment's [endDate](/api-reference/10%20UI%20Components/dxScheduler/7%20Interfaces/dxSchedulerAppointment/endDate.md '/Documentation/ApiReference/UI_Components/dxScheduler/Interfaces/dxSchedulerAppointment/#endDate'). Accepts values from the <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\">IANA time zone database</a>."
  },
  "dxSchedulerAppointment.html": {
    "shortDescription": "Specifies the HTML markup to be inserted into the appointment element."
  },
  "dxSchedulerAppointment.recurrenceException": {
    "shortDescription": "Specifies the start date and time of one or more appointments to exclude from a series. This property requires that you also set [recurrenceRule](/api-reference/10%20UI%20Components/dxScheduler/7%20Interfaces/dxSchedulerAppointment/recurrenceRule.md '/Documentation/ApiReference/UI_Components/dxScheduler/Interfaces/dxSchedulerAppointment/#recurrenceRule')."
  },
  "dxSchedulerAppointment.recurrenceRule": {
    "shortDescription": "Specifies a recurrence rule based on which the Scheduler generates an appointment series."
  },
  "dxSchedulerAppointment.startDate": {
    "shortDescription": "Specifies the start of the appointment."
  },
  "dxSchedulerAppointment.startDateTimeZone": {
    "shortDescription": "Specifies the time zone for an appointment's [startDate](/api-reference/10%20UI%20Components/dxScheduler/7%20Interfaces/dxSchedulerAppointment/startDate.md '/Documentation/ApiReference/UI_Components/dxScheduler/Interfaces/dxSchedulerAppointment/#startDate'). Accepts values from the <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\">IANA time zone database</a>."
  },
  "dxSchedulerAppointment.template": {
    "shortDescription": "Specifies a template that should be used to render this appointment only."
  },
  "dxSchedulerAppointment.text": {
    "shortDescription": "Specifies the subject of the appointment."
  },
  "dxSchedulerAppointment.visible": {
    "shortDescription": "Specifies whether or not an appointment must be displayed."
  },
  "dxSchedulerOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxSchedulerOptions.adaptivityEnabled": {
    "shortDescription": "Specifies whether the UI component adapts to small screens."
  },
  "dxSchedulerOptions.allDayExpr": {
    "shortDescription": "Specifies the name of the data source item field whose value defines whether or not the corresponding appointment is an all-day appointment."
  },
  "dxSchedulerOptions.allDayPanelMode": {
    "shortDescription": "Specifies the display mode for the **All day** panel."
  },
  "dxSchedulerOptions.appointmentCollectorTemplate": {
    "shortDescription": "Specifies a custom template for [cell overflow indicators](/concepts/05%20UI%20Components/Scheduler/030%20Appointments/080%20Cell%20Overflow%20Indicator.md '/Documentation/Guide/UI_Components/Scheduler/Appointments/Cell_Overflow_Indicator/')."
  },
  "dxSchedulerOptions.appointmentDragging": {
    "shortDescription": "Configures appointment reordering using drag and drop gestures."
  },
  "dxSchedulerOptions.appointmentDragging.autoScroll": {
    "shortDescription": "Enables automatic scrolling while dragging an appointment beyond the viewport."
  },
  "dxSchedulerOptions.appointmentDragging.data": {
    "shortDescription": "A container for custom data."
  },
  "dxSchedulerOptions.appointmentDragging.group": {
    "shortDescription": "Allows you to group several UI components so that users can drag and drop appointments between them."
  },
  "dxSchedulerOptions.appointmentDragging.onAdd": {
    "shortDescription": "A function that is called when a new appointment is added."
  },
  "dxSchedulerOptions.appointmentDragging.onDragEnd": {
    "shortDescription": "A function that is called when the dragged appointment's position is changed."
  },
  "dxSchedulerOptions.appointmentDragging.onDragMove": {
    "shortDescription": "A function that is called every time a draggable appointment is moved."
  },
  "dxSchedulerOptions.appointmentDragging.onDragStart": {
    "shortDescription": "A function that is called when the drag gesture is initialized."
  },
  "dxSchedulerOptions.appointmentDragging.onRemove": {
    "shortDescription": "A function that is called when a draggable appointment is removed."
  },
  "dxSchedulerOptions.appointmentDragging.scrollSensitivity": {
    "shortDescription": "Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if [autoScroll](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/appointmentDragging/autoScroll.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/appointmentDragging/#autoScroll') is **true**."
  },
  "dxSchedulerOptions.appointmentDragging.scrollSpeed": {
    "shortDescription": "Specifies the scrolling speed when dragging an appointment beyond the viewport. Applies only if [autoScroll](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/appointmentDragging/autoScroll.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/appointmentDragging/#autoScroll') is **true**."
  },
  "dxSchedulerOptions.appointmentPopupTemplate": {
    "shortDescription": "The template to be used for rendering an appointment details popup."
  },
  "dxSchedulerOptions.appointmentTemplate": {
    "shortDescription": "Specifies a custom template for appointments."
  },
  "dxSchedulerOptions.appointmentTooltipTemplate": {
    "shortDescription": "Specifies a custom template for tooltips displayed when users click an appointment or [cell overflow indicator](/concepts/05%20UI%20Components/Scheduler/030%20Appointments/080%20Cell%20Overflow%20Indicator.md '/Documentation/Guide/UI_Components/Scheduler/Appointments/Cell_Overflow_Indicator/')."
  },
  "dxSchedulerOptions.cellDuration": {
    "shortDescription": "Specifies cell duration in minutes. This property's value should divide the interval between [startDayHour](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/startDayHour.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#startDayHour') and [endDayHour](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/endDayHour.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#endDayHour') into even parts."
  },
  "dxSchedulerOptions.crossScrollingEnabled": {
    "shortDescription": "Specifies whether or not an end user can scroll the view in both directions at the same time."
  },
  "dxSchedulerOptions.currentDate": {
    "shortDescription": "Specifies the current date."
  },
  "dxSchedulerOptions.currentView": {
    "shortDescription": "Specifies the displayed view. Accepts [name](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views/name.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/views/#name') or [type](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views/type.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/views/#type') of a view available in the [views](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/views/') array."
  },
  "dxSchedulerOptions.customizeDateNavigatorText": {
    "shortDescription": "Customizes the date navigator's text."
  },
  "dxSchedulerOptions.dataCellTemplate": {
    "shortDescription": "Specifies a custom template for table cells."
  },
  "dxSchedulerOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxSchedulerOptions.dateCellTemplate": {
    "shortDescription": "Specifies a custom template for day scale items."
  },
  "dxSchedulerOptions.dateSerializationFormat": {
    "shortDescription": "Specifies the format in which date-time values should be sent to the server."
  },
  "dxSchedulerOptions.descriptionExpr": {
    "shortDescription": "Specifies the name of the data source item field whose value holds the description of the corresponding appointment."
  },
  "dxSchedulerOptions.dropDownAppointmentTemplate": {
    "shortDescription": "Specifies a custom template for tooltips displayed when users click a [cell overflow indicator](/concepts/05%20UI%20Components/Scheduler/030%20Appointments/080%20Cell%20Overflow%20Indicator.md '/Documentation/Guide/UI_Components/Scheduler/Appointments/Cell_Overflow_Indicator/').",
    "depNote": "Use the appointmentTooltipTemplate option instead."
  },
  "dxSchedulerOptions.editing": {
    "shortDescription": "Specifies which editing operations a user can perform on appointments."
  },
  "dxSchedulerOptions.editing.allowAdding": {
    "shortDescription": "Specifies whether or not an end user can add appointments."
  },
  "dxSchedulerOptions.editing.allowDeleting": {
    "shortDescription": "Specifies whether or not an end user can delete appointments."
  },
  "dxSchedulerOptions.editing.allowDragging": {
    "shortDescription": "Specifies whether users can drag and drop appointments."
  },
  "dxSchedulerOptions.editing.allowResizing": {
    "shortDescription": "Specifies whether or not an end user can change an appointment duration."
  },
  "dxSchedulerOptions.editing.allowTimeZoneEditing": {
    "shortDescription": "Specifies whether users can edit appointment time zones."
  },
  "dxSchedulerOptions.editing.allowUpdating": {
    "shortDescription": "Specifies whether or not an end user can change appointment properties."
  },
  "dxSchedulerOptions.endDateExpr": {
    "shortDescription": "Specifies the name of the data source item field that defines the ending of an appointment."
  },
  "dxSchedulerOptions.endDateTimeZoneExpr": {
    "shortDescription": "Specifies the name of the data source item field that defines the timezone of the appointment end date."
  },
  "dxSchedulerOptions.endDayHour": {
    "shortDescription": "Specifies the last hour on the time scale. Accepts integer values from 0 to 24."
  },
  "dxSchedulerOptions.firstDayOfWeek": {
    "shortDescription": "Specifies the first day of a week. Does not apply to the [agenda view](/concepts/05%20UI%20Components/Scheduler/060%20Views/010%20View%20Types/050%20Agenda%20View.md '/Documentation/Guide/UI_Components/Scheduler/Views/View_Types/#Agenda_View')."
  },
  "dxSchedulerOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxSchedulerOptions.groupByDate": {
    "shortDescription": "If **true**, appointments are grouped by date first and then by resource; opposite if **false**. Applies only if appointments are [grouped](/concepts/05%20UI%20Components/Scheduler/040%20Resources/030%20Group%20Appointments%20by%20Resources.md '/Documentation/Guide/UI_Components/Scheduler/Resources/Group_Appointments_by_Resources/') and [groupOrientation](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views/groupOrientation.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/views/#groupOrientation') is *\"horizontal\"*."
  },
  "dxSchedulerOptions.groups": {
    "shortDescription": "Specifies the [resource kinds](/concepts/05%20UI%20Components/Scheduler/040%20Resources/020%20Assign%20Appointments%20to%20Resources '/Documentation/Guide/UI_Components/Scheduler/Resources/Assign_Appointments_to_Resources/') by which the scheduler's appointments are grouped in a timetable."
  },
  "dxSchedulerOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxSchedulerOptions.indicatorTime": {
    "shortDescription": ""
  },
  "dxSchedulerOptions.indicatorUpdateInterval": {
    "shortDescription": "Specifies the time interval between when the [date-time indicator](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/showCurrentTimeIndicator.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#showCurrentTimeIndicator') changes its position, in milliseconds."
  },
  "dxSchedulerOptions.max": {
    "shortDescription": "The latest date the UI component allows you to select."
  },
  "dxSchedulerOptions.maxAppointmentsPerCell": {
    "shortDescription": "Specifies the limit of full-sized appointments displayed per cell. Applies to all views except *\"agenda\"*."
  },
  "dxSchedulerOptions.min": {
    "shortDescription": "The earliest date the UI component allows you to select."
  },
  "dxSchedulerOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty. Available for the Agenda [view](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#views') only."
  },
  "dxSchedulerOptions.offset": {
    "shortDescription": "Specifies the minute offset within Scheduler indicating the starting point of a day."
  },
  "dxSchedulerOptions.onAppointmentAdded": {
    "shortDescription": "A function that is executed after an appointment is added to the data source."
  },
  "dxSchedulerOptions.onAppointmentAdding": {
    "shortDescription": "A function that is executed before an appointment is added to the data source."
  },
  "dxSchedulerOptions.onAppointmentClick": {
    "shortDescription": "A function that is executed when an appointment is clicked or tapped."
  },
  "dxSchedulerOptions.onAppointmentContextMenu": {
    "shortDescription": "A function that is executed when a user attempts to open the browser's context menu for an appointment. Allows you to replace this context menu with a custom context menu."
  },
  "dxSchedulerOptions.onAppointmentDblClick": {
    "shortDescription": "A function that is executed when an appointment is double-clicked or double-tapped."
  },
  "dxSchedulerOptions.onAppointmentDeleted": {
    "shortDescription": "A function that is executed after an appointment is deleted from the data source."
  },
  "dxSchedulerOptions.onAppointmentDeleting": {
    "shortDescription": "A function that is executed before an appointment is deleted from the data source."
  },
  "dxSchedulerOptions.onAppointmentFormOpening": {
    "shortDescription": "A function that is executed before an appointment details form appears. Use this function to customize the form."
  },
  "dxSchedulerOptions.onAppointmentRendered": {
    "shortDescription": "A function that is executed when an appointment is rendered."
  },
  "dxSchedulerOptions.onAppointmentTooltipShowing": {
    "shortDescription": "Occurs before showing an appointment's tooltip."
  },
  "dxSchedulerOptions.onAppointmentUpdated": {
    "shortDescription": "A function that is executed after an appointment is updated in the data source."
  },
  "dxSchedulerOptions.onAppointmentUpdating": {
    "shortDescription": "A function that is executed before an appointment is updated in the data source."
  },
  "dxSchedulerOptions.onCellClick": {
    "shortDescription": "A function that is executed when a view cell is clicked."
  },
  "dxSchedulerOptions.onCellContextMenu": {
    "shortDescription": "A function that is executed when a user attempts to open the browser's context menu for a cell. Allows you to replace this context menu with a custom context menu."
  },
  "dxSchedulerOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxSchedulerOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSchedulerOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxSchedulerOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSchedulerOptions.recurrenceEditMode": {
    "shortDescription": "Specifies the edit mode for recurring appointments."
  },
  "dxSchedulerOptions.recurrenceExceptionExpr": {
    "shortDescription": "Specifies the name of the data source item field that defines exceptions for the current recurring appointment."
  },
  "dxSchedulerOptions.recurrenceRuleExpr": {
    "shortDescription": "Specifies the name of the data source item field that defines a recurrence rule for generating recurring appointments."
  },
  "dxSchedulerOptions.remoteFiltering": {
    "shortDescription": "Specifies whether filtering is performed on the server or client side."
  },
  "dxSchedulerOptions.resourceCellTemplate": {
    "shortDescription": "Specifies a custom template for resource headers."
  },
  "dxSchedulerOptions.resources": {
    "shortDescription": "Specifies an array of resources available in the scheduler."
  },
  "dxSchedulerOptions.resources.allowMultiple": {
    "shortDescription": "Specifies whether you can assign several resources of this kind to an appointment."
  },
  "dxSchedulerOptions.resources.colorExpr": {
    "shortDescription": "Specifies the [resource object](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/resources/dataSource.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/resources/#dataSource') field that is used as a resource color."
  },
  "dxSchedulerOptions.resources.dataSource": {
    "shortDescription": "Specifies available resource instances."
  },
  "dxSchedulerOptions.resources.displayExpr": {
    "shortDescription": "Specifies which field from the [resource data objects](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/resources/dataSource.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/resources/#dataSource') provides values to be displayed in the resource editor."
  },
  "dxSchedulerOptions.resources.fieldExpr": {
    "shortDescription": "The name of the appointment object field that specifies a resource of this kind."
  },
  "dxSchedulerOptions.resources.label": {
    "shortDescription": "Specifies the label of the Appointment popup window field that allows end users to assign a resource of this kind."
  },
  "dxSchedulerOptions.resources.useColorAsDefault": {
    "shortDescription": "Specifies whether appointments are colored like this resource kind."
  },
  "dxSchedulerOptions.resources.valueExpr": {
    "shortDescription": "Specifies the [resource object](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/resources/dataSource.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/resources/#dataSource') field that is used as a value of the Resource editor in the Appointment popup window."
  },
  "dxSchedulerOptions.scrolling": {
    "shortDescription": "Configures scrolling."
  },
  "dxSchedulerOptions.selectedCellData": {
    "shortDescription": "The data of the currently selected cells."
  },
  "dxSchedulerOptions.shadeUntilCurrentTime": {
    "shortDescription": "Specifies whether to apply shading to cover the timetable up to the current time."
  },
  "dxSchedulerOptions.showAllDayPanel": {
    "shortDescription": "Specifies the \"All-day\" panel's visibility. Setting this property to **false** hides the panel along with the all-day appointments."
  },
  "dxSchedulerOptions.showCurrentTimeIndicator": {
    "shortDescription": "Specifies the current date-time indicator's visibility."
  },
  "dxSchedulerOptions.startDateExpr": {
    "shortDescription": "Specifies the name of the data source item field that defines the start of an appointment."
  },
  "dxSchedulerOptions.startDateTimeZoneExpr": {
    "shortDescription": "Specifies the name of the data source item field that defines the timezone of the appointment start date."
  },
  "dxSchedulerOptions.startDayHour": {
    "shortDescription": "Specifies the first hour on the time scale. Accepts integer values from 0 to 24."
  },
  "dxSchedulerOptions.textExpr": {
    "shortDescription": "Specifies the name of the data source item field that holds the subject of an appointment."
  },
  "dxSchedulerOptions.timeCellTemplate": {
    "shortDescription": "Specifies a custom template for time scale items."
  },
  "dxSchedulerOptions.timeZone": {
    "shortDescription": "Specifies the time zone for the Scheduler's grid. Accepts values from the <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\">IANA time zone database</a>."
  },
  "dxSchedulerOptions.useDropDownViewSwitcher": {
    "shortDescription": "Specifies whether a user can switch views using tabs or a drop-down menu."
  },
  "dxSchedulerOptions.views": {
    "shortDescription": "Specifies and configures the [views](/concepts/05%20UI%20Components/Scheduler/060%20Views/010%20View%20Types '/Documentation/Guide/UI_Components/Scheduler/Views/View_Types/') to be available in the [view switcher](/concepts/05%20UI%20Components/Scheduler/070%20View%20Switcher.md '/Documentation/Guide/UI_Components/Scheduler/View_Switcher/')."
  },
  "dxSchedulerOptions.views.agendaDuration": {
    "shortDescription": "Specifies the number of dates that can be shown at a time in the [agenda view](/concepts/05%20UI%20Components/Scheduler/060%20Views/010%20View%20Types/050%20Agenda%20View.md '/Documentation/Guide/UI_Components/Scheduler/Views/View_Types/#Agenda_View')."
  },
  "dxSchedulerOptions.views.allDayPanelMode": {
    "shortDescription": "Specifies the display mode for the **All day** panel."
  },
  "dxSchedulerOptions.views.appointmentCollectorTemplate": {
    "shortDescription": "Specifies a custom template for [cell overflow indicators](/concepts/05%20UI%20Components/Scheduler/030%20Appointments/080%20Cell%20Overflow%20Indicator.md '/Documentation/Guide/UI_Components/Scheduler/Appointments/Cell_Overflow_Indicator/') in this view."
  },
  "dxSchedulerOptions.views.appointmentTemplate": {
    "shortDescription": "Specifies a custom template for appointments."
  },
  "dxSchedulerOptions.views.appointmentTooltipTemplate": {
    "shortDescription": "Specifies a custom template for tooltips displayed when users click an appointment or [cell overflow indicator](/concepts/05%20UI%20Components/Scheduler/030%20Appointments/080%20Cell%20Overflow%20Indicator.md '/Documentation/Guide/UI_Components/Scheduler/Appointments/Cell_Overflow_Indicator/') in this view."
  },
  "dxSchedulerOptions.views.cellDuration": {
    "shortDescription": "The cell duration in minutes."
  },
  "dxSchedulerOptions.views.dataCellTemplate": {
    "shortDescription": "Specifies a custom template for table cells."
  },
  "dxSchedulerOptions.views.dateCellTemplate": {
    "shortDescription": "Specifies a custom template for date scale items."
  },
  "dxSchedulerOptions.views.dropDownAppointmentTemplate": {
    "shortDescription": "Specifies a custom template for tooltips displayed when users click a [cell overflow indicator](/concepts/05%20UI%20Components/Scheduler/030%20Appointments/080%20Cell%20Overflow%20Indicator.md '/Documentation/Guide/UI_Components/Scheduler/Appointments/Cell_Overflow_Indicator/') in this view.",
    "depNote": "Use the views.appointmentTooltipTemplate option instead."
  },
  "dxSchedulerOptions.views.endDayHour": {
    "shortDescription": "Specifies the last hour on the view's time scale. Accepts integer values from 0 to 24."
  },
  "dxSchedulerOptions.views.firstDayOfWeek": {
    "shortDescription": "The first day of a week. Does not apply to the [agenda view](/concepts/05%20UI%20Components/Scheduler/060%20Views/010%20View%20Types/050%20Agenda%20View.md '/Documentation/Guide/UI_Components/Scheduler/Views/View_Types/#Agenda_View')."
  },
  "dxSchedulerOptions.views.groupByDate": {
    "shortDescription": "If **true**, appointments are grouped by date first and then by resource; opposite if **false**. Applies only if appointments are [grouped](/concepts/05%20UI%20Components/Scheduler/040%20Resources/030%20Group%20Appointments%20by%20Resources.md '/Documentation/Guide/UI_Components/Scheduler/Resources/Group_Appointments_by_Resources/') and [groupOrientation](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views/groupOrientation.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/views/#groupOrientation') is *\"horizontal\"*."
  },
  "dxSchedulerOptions.views.groupOrientation": {
    "shortDescription": "Arranges resource headers vertically (in a column) or horizontally (in a row)."
  },
  "dxSchedulerOptions.views.groups": {
    "shortDescription": "The resource kinds by which appointments are grouped."
  },
  "dxSchedulerOptions.views.intervalCount": {
    "shortDescription": "Multiplies the default view interval. Applies to all [view types](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views/type.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/views/#type') except *\"agenda\"*."
  },
  "dxSchedulerOptions.views.maxAppointmentsPerCell": {
    "shortDescription": "Specifies the limit of full-sized appointments displayed per cell. Applies to all views except *\"agenda\"*."
  },
  "dxSchedulerOptions.views.name": {
    "shortDescription": "A custom view name displayed in the [view switcher](/concepts/05%20UI%20Components/Scheduler/070%20View%20Switcher.md '/Documentation/Guide/UI_Components/Scheduler/View_Switcher/')."
  },
  "dxSchedulerOptions.views.offset": {
    "shortDescription": "Specifies the minute offset within the view indicating the starting point of a day."
  },
  "dxSchedulerOptions.views.resourceCellTemplate": {
    "shortDescription": "Specifies a custom template for resource headers."
  },
  "dxSchedulerOptions.views.scrolling": {
    "shortDescription": "Configures scrolling for a view."
  },
  "dxSchedulerOptions.views.startDate": {
    "shortDescription": "Specifies the date from which to start counting the [view interval](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views/intervalCount.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/views/#intervalCount'). Applies to all [view types](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views/type.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/views/#type') except *\"agenda\"*."
  },
  "dxSchedulerOptions.views.startDayHour": {
    "shortDescription": "Specifies the first hour on the view's time scale. Accepts integer values from 0 to 24."
  },
  "dxSchedulerOptions.views.timeCellTemplate": {
    "shortDescription": "Specifies a custom template for time scale items."
  },
  "dxSchedulerOptions.views.type": {
    "shortDescription": "The type of the view."
  },
  "dxSchedulerScrolling": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSchedulerScrolling.mode": {
    "shortDescription": "Specifies the scrolling mode."
  },
  "dxSchedulerTimeZone": {
    "shortDescription": "A time zone object."
  },
  "dxSchedulerTimeZone.id": {
    "shortDescription": "A time zone text string from the <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\">IANA database</a>."
  },
  "dxSchedulerTimeZone.offset": {
    "shortDescription": "A GMT offset."
  },
  "dxSchedulerTimeZone.title": {
    "shortDescription": "A time zone in the following format: `(GMT ±[hh]:[mm]) [id]`."
  },
  "dxScrollable": {
    "shortDescription": "A UI component used to display scrollable content."
  },
  "dxScrollable.clientHeight()": {
    "shortDescription": "Gets the UI component's height."
  },
  "dxScrollable.clientWidth()": {
    "shortDescription": "Gets the UI component's width."
  },
  "dxScrollable.content()": {
    "shortDescription": "Gets the UI component's content."
  },
  "dxScrollable.scroll": {
    "shortDescription": "Raised on each scroll gesture."
  },
  "dxScrollable.scrollBy(distance)": {
    "shortDescription": "Scrolls the content by a specific distance."
  },
  "dxScrollable.scrollHeight()": {
    "shortDescription": "Gets the scrollable content's height in pixels."
  },
  "dxScrollable.scrollLeft()": {
    "shortDescription": "Gets the left scroll offset."
  },
  "dxScrollable.scrollOffset()": {
    "shortDescription": "Gets the scroll offset."
  },
  "dxScrollable.scrollTo(targetLocation)": {
    "shortDescription": "Scrolls the content to a specific position."
  },
  "dxScrollable.scrollToElement(element)": {
    "shortDescription": "Scrolls content to an element."
  },
  "dxScrollable.scrollTop()": {
    "shortDescription": "Gets the top scroll offset."
  },
  "dxScrollable.scrollWidth()": {
    "shortDescription": "Gets the scrollable content's width in pixels."
  },
  "dxScrollable.update()": {
    "shortDescription": "Updates the scrollable contents' dimensions."
  },
  "dxScrollable.updated": {
    "shortDescription": "Raised each time the UI component is updated."
  },
  "dxScrollableOptions.bounceEnabled": {
    "shortDescription": "A Boolean value specifying whether to enable or disable the bounce-back effect."
  },
  "dxScrollableOptions.direction": {
    "shortDescription": "A string value specifying the available scrolling directions."
  },
  "dxScrollableOptions.disabled": {
    "shortDescription": "Specifies whether the UI component responds to user interaction."
  },
  "dxScrollableOptions.onScroll": {
    "shortDescription": "A function that is executed on each scroll gesture."
  },
  "dxScrollableOptions.onUpdated": {
    "shortDescription": "A function that is executed each time the UI component is updated."
  },
  "dxScrollableOptions.scrollByContent": {
    "shortDescription": "A Boolean value specifying whether or not an end user can scroll the UI component content swiping it up or down. Applies only if [useNative](/api-reference/10%20UI%20Components/dxScrollable/1%20Configuration/useNative.md '{basewidgetpath}/Configuration/#useNative') is **false**"
  },
  "dxScrollableOptions.scrollByThumb": {
    "shortDescription": "Specifies whether a user can scroll the content with the scrollbar. Applies only if [useNative](/api-reference/10%20UI%20Components/dxScrollable/1%20Configuration/useNative.md '{basewidgetpath}/Configuration/#useNative') is **false**."
  },
  "dxScrollableOptions.showScrollbar": {
    "shortDescription": "Specifies when the UI component shows the scrollbar."
  },
  "dxScrollableOptions.useNative": {
    "shortDescription": "Indicates whether to use native or simulated scrolling."
  },
  "dxScrollView": {
    "shortDescription": "The ScrollView is a UI component that enables a user to scroll its content."
  },
  "dxScrollView.pullDown": {
    "shortDescription": "Raised when the \"pull to refresh\" gesture is performed."
  },
  "dxScrollView.reachBottom": {
    "shortDescription": "Raised when the content is scrolled down to the bottom."
  },
  "dxScrollView.refresh()": {
    "shortDescription": "Locks the UI component until the **release(preventScrollBottom)** method is called and executes the function passed to the [onPullDown](/api-reference/10%20UI%20Components/dxScrollView/1%20Configuration/onPullDown.md '/Documentation/ApiReference/UI_Components/dxScrollView/Configuration/#onPullDown') property and the handler assigned to the [pullDown](/api-reference/10%20UI%20Components/dxScrollView/4%20Events/pullDown.md '/Documentation/ApiReference/UI_Components/dxScrollView/Events/#pullDown') event."
  },
  "dxScrollView.release(preventScrollBottom)": {
    "shortDescription": "Notifies the ScrollView that data loading is finished."
  },
  "dxScrollView.toggleLoading(showOrHide)": {
    "shortDescription": "Toggles the UI component's loading state."
  },
  "dxScrollViewOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxScrollViewOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxScrollViewOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxScrollViewOptions.onPullDown": {
    "shortDescription": "A function that is executed when the \"pull to refresh\" gesture is performed. Supported on mobile devices only."
  },
  "dxScrollViewOptions.onReachBottom": {
    "shortDescription": "A function that is executed when the content is scrolled down to the bottom."
  },
  "dxScrollViewOptions.onScroll": {
    "shortDescription": "A function that is executed on each scroll gesture."
  },
  "dxScrollViewOptions.onUpdated": {
    "shortDescription": "A function that is executed each time the UI component is updated."
  },
  "dxScrollViewOptions.pulledDownText": {
    "shortDescription": "Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold."
  },
  "dxScrollViewOptions.pullingDownText": {
    "shortDescription": "Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold."
  },
  "dxScrollViewOptions.reachBottomText": {
    "shortDescription": "Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom."
  },
  "dxScrollViewOptions.refreshingText": {
    "shortDescription": "Specifies the text shown in the pullDown panel displayed when the content is being refreshed."
  },
  "dxSelectBox": {
    "shortDescription": "The SelectBox UI component is an editor that allows an end user to select an item from a drop-down list."
  },
  "dxSelectBox.customItemCreating": {
    "shortDescription": "Raised when a user adds a custom item."
  },
  "dxSelectBoxOptions.acceptCustomValue": {
    "shortDescription": "Specifies whether the UI component allows a user to enter a custom value. Requires the [onCustomItemCreating](/api-reference/10%20UI%20Components/dxSelectBox/1%20Configuration/onCustomItemCreating.md '{basewidgetpath}/Configuration/#onCustomItemCreating') handler implementation."
  },
  "dxSelectBoxOptions.allowClearing": {
    "shortDescription": ""
  },
  "dxSelectBoxOptions.customItemCreateEvent": {
    "shortDescription": "Specifies the <a href=\"https://en.wikipedia.org/wiki/DOM_events\" target=\"_blank\">DOM event</a> after which the custom item should be created. Applies only if [acceptCustomValue](/api-reference/10%20UI%20Components/dxSelectBox/1%20Configuration/acceptCustomValue.md '{basewidgetpath}/Configuration/#acceptCustomValue') is enabled."
  },
  "dxSelectBoxOptions.dropDownOptions": {
    "shortDescription": "Configures the drop-down field which holds the [content](/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#contentTemplate)."
  },
  "dxSelectBoxOptions.fieldTemplate": {
    "shortDescription": "Specifies a custom template for the text field. Must contain the [TextBox](/api-reference/10%20UI%20Components/dxTextBox '/Documentation/ApiReference/UI_Components/dxTextBox/') UI component."
  },
  "dxSelectBoxOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxSelectBoxOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxSelectBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxSelectBoxOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxSelectBoxOptions.onCustomItemCreating": {
    "shortDescription": "A function that is executed when a user adds a custom item. Requires [acceptCustomValue](/api-reference/10%20UI%20Components/dxSelectBox/1%20Configuration/acceptCustomValue.md '{basewidgetpath}/Configuration/#acceptCustomValue') to be set to **true**."
  },
  "dxSelectBoxOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxSelectBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSelectBoxOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxSelectBoxOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxSelectBoxOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxSelectBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxSelectBoxOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxSelectBoxOptions.onItemClick": {
    "shortDescription": "A function that is executed when a list item is clicked or tapped."
  },
  "dxSelectBoxOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxSelectBoxOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxSelectBoxOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxSelectBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSelectBoxOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxSelectBoxOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a list item is selected or selection is canceled."
  },
  "dxSelectBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxSelectBoxOptions.openOnFieldClick": {
    "shortDescription": "Specifies whether a user can open the drop-down list by clicking a text field."
  },
  "dxSelectBoxOptions.placeholder": {
    "shortDescription": "The text that is provided as a hint in the select box editor."
  },
  "dxSelectBoxOptions.showDropDownButton": {
    "shortDescription": "Specifies whether the drop-down button is visible."
  },
  "dxSelectBoxOptions.showSelectionControls": {
    "shortDescription": "Specifies whether or not to display selection controls."
  },
  "dxSelectBoxOptions.valueChangeEvent": {
    "shortDescription": "Specifies the <a href=\"https://en.wikipedia.org/wiki/DOM_events\" target=\"_blank\">DOM events</a> after which the UI component's [value](/api-reference/10%20UI%20Components/dxDropDownList/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should be updated. Applies only if [acceptCustomValue](/api-reference/10%20UI%20Components/dxSelectBox/1%20Configuration/acceptCustomValue.md '{basewidgetpath}/Configuration/#acceptCustomValue') is set to **true**.",
    "depNote": "Use the customItemCreateEvent option instead."
  },
  "dxSlider": {
    "shortDescription": "The Slider is a UI component that allows an end user to set a numeric value on a continuous range of possible values."
  },
  "dxSlider.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxSlider/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxSliderBase": {
    "shortDescription": "A base class for track bar UI components."
  },
  "dxSliderBaseOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxSliderBaseOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxSliderBaseOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxSliderBaseOptions.keyStep": {
    "shortDescription": "Specifies the step by which a handle moves when a user presses **Page Up** or **Page Down**."
  },
  "dxSliderBaseOptions.label": {
    "shortDescription": "Configures the labels displayed at the min and max values."
  },
  "dxSliderBaseOptions.label.format": {
    "shortDescription": "Formats a value before it is displayed in a label."
  },
  "dxSliderBaseOptions.label.position": {
    "shortDescription": "Specifies whether labels are over or under the scale."
  },
  "dxSliderBaseOptions.label.visible": {
    "shortDescription": "Specifies whether slider labels are visible."
  },
  "dxSliderBaseOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxSliderBaseOptions.showRange": {
    "shortDescription": "Specifies whether to highlight the selected range."
  },
  "dxSliderBaseOptions.step": {
    "shortDescription": "Specifies the step by which the UI component's value changes when a user drags a handler."
  },
  "dxSliderBaseOptions.tooltip": {
    "shortDescription": "Configures a tooltip."
  },
  "dxSliderBaseOptions.tooltip.enabled": {
    "shortDescription": "Specifies whether a tooltip is enabled."
  },
  "dxSliderBaseOptions.tooltip.format": {
    "shortDescription": "Specifies a tooltip's display format."
  },
  "dxSliderBaseOptions.tooltip.position": {
    "shortDescription": "Specifies whether a tooltip is over or under the slider."
  },
  "dxSliderBaseOptions.tooltip.showMode": {
    "shortDescription": "Specifies when the UI component shows a tooltip."
  },
  "dxSliderBaseOptions.valueChangeMode": {
    "shortDescription": "Specifies when to change the component's [value](/api-reference/10%20UI%20Components/Editor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value')."
  },
  "dxSliderOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxSliderOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSliderOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxSliderOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSliderOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxSlider/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxSliderOptions.value": {
    "shortDescription": "The current slider value."
  },
  "dxSortable": {
    "shortDescription": "Sortable is a user interface utility that allows a UI component's items to be reordered via drag and drop gestures."
  },
  "dxSortable.add": {
    "shortDescription": "Raised when a new item is added."
  },
  "dxSortable.dragChange": {
    "shortDescription": "Raised when the dragged item's position in the list is changed."
  },
  "dxSortable.dragEnd": {
    "shortDescription": "Raised when drag gesture is finished."
  },
  "dxSortable.dragMove": {
    "shortDescription": "Raised every time a draggable item is moved."
  },
  "dxSortable.dragStart": {
    "shortDescription": "Raised when drag gesture is initialized."
  },
  "dxSortable.placeholderPrepared": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSortable.remove": {
    "shortDescription": "Raised when a draggable item is removed."
  },
  "dxSortable.reorder": {
    "shortDescription": "Raised when the draggable items are reordered."
  },
  "dxSortable.update()": {
    "shortDescription": "Updates Sortable's dimensions. Call this method after items are added or their dimensions are changed during dragging."
  },
  "dxSortableOptions.allowDropInsideItem": {
    "shortDescription": "Allows a user to drop an item inside another item."
  },
  "dxSortableOptions.allowReordering": {
    "shortDescription": "Allows a user to reorder sortable items."
  },
  "dxSortableOptions.dragTemplate": {
    "shortDescription": "Specifies custom markup to be shown instead of the item being dragged."
  },
  "dxSortableOptions.dropFeedbackMode": {
    "shortDescription": "Specifies how to highlight the item's drop position."
  },
  "dxSortableOptions.filter": {
    "shortDescription": "Specifies a CSS selector for the items that can be dragged."
  },
  "dxSortableOptions.itemOrientation": {
    "shortDescription": "Notifies the UI component of the items' orientation."
  },
  "dxSortableOptions.moveItemOnDrop": {
    "shortDescription": "Moves an element in the HTML markup when it is dropped."
  },
  "dxSortableOptions.onAdd": {
    "shortDescription": "A function that is called when a new item is added."
  },
  "dxSortableOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSortableOptions.onDragChange": {
    "shortDescription": "A function that is called when the dragged item's position in the list is changed."
  },
  "dxSortableOptions.onDragEnd": {
    "shortDescription": "A function that is called when the drag gesture is finished."
  },
  "dxSortableOptions.onDragMove": {
    "shortDescription": "A function that is called every time a draggable item is moved."
  },
  "dxSortableOptions.onDragStart": {
    "shortDescription": "A function that is called when a drag gesture is initialized."
  },
  "dxSortableOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxSortableOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSortableOptions.onPlaceholderPrepared": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSortableOptions.onRemove": {
    "shortDescription": "A function that is called when a draggable item is removed."
  },
  "dxSortableOptions.onReorder": {
    "shortDescription": "A function that is called when the draggable items are reordered."
  },
  "dxSparkline": {
    "shortDescription": "The Sparkline UI component is a compact chart that contains only one series. Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text."
  },
  "dxSparklineOptions.argumentField": {
    "shortDescription": "Specifies the data source field that provides arguments for a sparkline."
  },
  "dxSparklineOptions.barNegativeColor": {
    "shortDescription": "Sets a color for the bars indicating negative values. Available for a sparkline of the *bar* type only."
  },
  "dxSparklineOptions.barPositiveColor": {
    "shortDescription": "Sets a color for the bars indicating positive values. Available for a sparkline of the *bar* type only."
  },
  "dxSparklineOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxSparklineOptions.firstLastColor": {
    "shortDescription": "Sets a color for the boundary of both the first and last points on a sparkline."
  },
  "dxSparklineOptions.ignoreEmptyPoints": {
    "shortDescription": "Specifies whether the sparkline should ignore null data points."
  },
  "dxSparklineOptions.lineColor": {
    "shortDescription": "Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types."
  },
  "dxSparklineOptions.lineWidth": {
    "shortDescription": "Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types."
  },
  "dxSparklineOptions.lossColor": {
    "shortDescription": "Sets a color for the bars indicating the values that are less than the [winloss threshold](/api-reference/10%20UI%20Components/dxSparkline/1%20Configuration/winlossThreshold.md '/Documentation/ApiReference/UI_Components/dxSparkline/Configuration/#winlossThreshold'). Available for a sparkline of the *winloss* type only."
  },
  "dxSparklineOptions.maxColor": {
    "shortDescription": "Sets a color for the boundary of the maximum point on a sparkline."
  },
  "dxSparklineOptions.maxValue": {
    "shortDescription": "Specifies the maximum value of the sparkline's value axis."
  },
  "dxSparklineOptions.minColor": {
    "shortDescription": "Sets a color for the boundary of the minimum point on a sparkline."
  },
  "dxSparklineOptions.minValue": {
    "shortDescription": "Specifies the minimum value of the sparkline value axis."
  },
  "dxSparklineOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSparklineOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxSparklineOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxSparklineOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxSparklineOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxSparklineOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxSparklineOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxSparklineOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSparklineOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxSparklineOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxSparklineOptions.pointColor": {
    "shortDescription": "Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types."
  },
  "dxSparklineOptions.pointSize": {
    "shortDescription": "Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types."
  },
  "dxSparklineOptions.pointSymbol": {
    "shortDescription": "Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types."
  },
  "dxSparklineOptions.showFirstLast": {
    "shortDescription": "Specifies whether or not to indicate both the first and last values on a sparkline."
  },
  "dxSparklineOptions.showMinMax": {
    "shortDescription": "Specifies whether or not to indicate both the minimum and maximum values on a sparkline."
  },
  "dxSparklineOptions.type": {
    "shortDescription": "Determines the type of a sparkline."
  },
  "dxSparklineOptions.valueField": {
    "shortDescription": "Specifies the data source field that provides values for a sparkline."
  },
  "dxSparklineOptions.winColor": {
    "shortDescription": "Sets a color for the bars indicating the values greater than a [winloss threshold](/api-reference/10%20UI%20Components/dxSparkline/1%20Configuration/winlossThreshold.md '/Documentation/ApiReference/UI_Components/dxSparkline/Configuration/#winlossThreshold'). Available for a sparkline of the *winloss* type only."
  },
  "dxSparklineOptions.winlossThreshold": {
    "shortDescription": "Specifies a value that serves as a threshold for the sparkline of the winloss type."
  },
  "dxSpeedDialAction": {
    "shortDescription": "The SpeedDialAction is a button that performs a custom action. It can be represented by a Floating Action Button (FAB) or a button in a speed dial menu opened with the FAB."
  },
  "dxSpeedDialAction.click": {
    "shortDescription": "Raised when the FAB or speed dial action button is clicked or tapped."
  },
  "dxSpeedDialAction.contentReady": {
    "shortDescription": "Raised when the UI component is rendered and each time the component is repainted."
  },
  "dxSpeedDialActionOptions.disabled": {
    "shortDescription": "Specifies whether the UI component responds to user interaction."
  },
  "dxSpeedDialActionOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxSpeedDialActionOptions.icon": {
    "shortDescription": "Specifies the icon the FAB or speed dial action button displays."
  },
  "dxSpeedDialActionOptions.index": {
    "shortDescription": "Allows you to reorder action buttons in the speed dial menu."
  },
  "dxSpeedDialActionOptions.label": {
    "shortDescription": "Specifies the text label displayed inside the FAB or near the speed dial action button."
  },
  "dxSpeedDialActionOptions.onClick": {
    "shortDescription": "A function that is executed when the FAB or speed dial action button is clicked or tapped."
  },
  "dxSpeedDialActionOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxSpeedDialActionOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSpeedDialActionOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxSpeedDialActionOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSpeedDialActionOptions.visible": {
    "shortDescription": "Allows you to hide the FAB from the view or the action from the speed dial menu."
  },
  "dxSpeedDialActionOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxSplitter": {
    "shortDescription": "Splitter is a UI component that allows you to divide a page or section into multiple adjustable [panes](/api-reference/10%20UI%20Components/dxSplitter/1%20Configuration/items '/Documentation/ApiReference/UI_Components/dxSplitter/Configuration/items/')."
  },
  "dxSplitter.focus()": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitter.itemCollapsed": {
    "shortDescription": "Raised after an item (pane) is collapsed."
  },
  "dxSplitter.itemExpanded": {
    "shortDescription": "Raised after an item (pane) is expanded."
  },
  "dxSplitter.itemHold": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitter.resize": {
    "shortDescription": "Raised each time an item (pane) is resized by one pixel."
  },
  "dxSplitter.resizeEnd": {
    "shortDescription": "Raised when resizing ends."
  },
  "dxSplitter.resizeStart": {
    "shortDescription": "Raised when resizing starts."
  },
  "dxSplitter.selectionChanged": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitter.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterItem": {
    "shortDescription": "A splitter item (pane)."
  },
  "dxSplitterItem.collapsed": {
    "shortDescription": "Specifies whether an item (pane) is initially collapsed."
  },
  "dxSplitterItem.collapsedSize": {
    "shortDescription": "Specifies the size of a collapsible item (pane) when collapsed in pixels or as a percentage."
  },
  "dxSplitterItem.collapsible": {
    "shortDescription": "Specifies whether an item (pane) is collapsible."
  },
  "dxSplitterItem.disabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterItem.html": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterItem.maxSize": {
    "shortDescription": "Specifies the maximum size of an item (pane) in pixels or as a percentage."
  },
  "dxSplitterItem.minSize": {
    "shortDescription": "Specifies the minimum size of an item (pane) in pixels or as a percentage."
  },
  "dxSplitterItem.resizable": {
    "shortDescription": "Specifies whether an item (pane) is resizable."
  },
  "dxSplitterItem.size": {
    "shortDescription": "Specifies the initial size of an item (pane) in pixels or as a percentage. The size changes after any layout alteration."
  },
  "dxSplitterItem.splitter": {
    "shortDescription": "Specifies a [splitter](/api-reference/10%20UI%20Components/dxSplitter/1%20Configuration '/Documentation/ApiReference/UI_Components/dxSplitter/Configuration/') inside an item (pane)."
  },
  "dxSplitterOptions.accessKey": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.activeStateEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.allowKeyboardNavigation": {
    "shortDescription": "Specifies whether to allow the Splitter to take focus and allow keyboard navigation."
  },
  "dxSplitterOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxSplitterOptions.focusStateEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.hint": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.itemHoldTimeout": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.items": {
    "shortDescription": "An array of items (panes) displayed by the UI component."
  },
  "dxSplitterOptions.keyExpr": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.noDataText": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxSplitterOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSplitterOptions.onInitialized": {
    "shortDescription": "A function used to save the UI component instance."
  },
  "dxSplitterOptions.onItemClick": {
    "shortDescription": "A function that is executed when an item (pane) is clicked or tapped."
  },
  "dxSplitterOptions.onItemCollapsed": {
    "shortDescription": "A function that is executed after an item (pane) is collapsed."
  },
  "dxSplitterOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when an item (pane) is right-clicked or pressed."
  },
  "dxSplitterOptions.onItemExpanded": {
    "shortDescription": "A function that is executed after an item (pane) is expanded."
  },
  "dxSplitterOptions.onItemHold": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.onItemRendered": {
    "shortDescription": "A function that is executed after an item (pane) is rendered."
  },
  "dxSplitterOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSplitterOptions.onResize": {
    "shortDescription": "A function that is executed each time an item (pane) is resized by one pixel."
  },
  "dxSplitterOptions.onResizeEnd": {
    "shortDescription": "A function that is called when resizing ends."
  },
  "dxSplitterOptions.onResizeStart": {
    "shortDescription": "A function that is called when resizing starts."
  },
  "dxSplitterOptions.onSelectionChanged": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.orientation": {
    "shortDescription": "Specifies item orientation (layout)."
  },
  "dxSplitterOptions.selectedIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.selectedItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.selectedItemKeys": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.selectedItems": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSplitterOptions.separatorSize": {
    "shortDescription": "Specifies the size of a separator bar in pixels."
  },
  "dxSplitterOptions.tabIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxSVGElement": {
    "shortDescription": "<!-- Description goes here -->",
    "depNote": null
  },
  "dxSwitch": {
    "shortDescription": "The Switch is a UI component that can be in two states: \"On\" and \"Off\"."
  },
  "dxSwitch.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxSwitch/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxSwitchOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxSwitchOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxSwitchOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxSwitchOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxSwitchOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxSwitchOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxSwitchOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxSwitchOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxSwitchOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxSwitch/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxSwitchOptions.switchedOffText": {
    "shortDescription": "Specifies the text displayed when the UI component is switched off."
  },
  "dxSwitchOptions.switchedOnText": {
    "shortDescription": "Specifies the text displayed when the UI component is switched on."
  },
  "dxSwitchOptions.value": {
    "shortDescription": "A Boolean value specifying whether the current switch state is \"On\" or \"Off\"."
  },
  "dxTabPanel": {
    "shortDescription": "The TabPanel is a UI component consisting of the [Tabs](/api-reference/10%20UI%20Components/dxTabs '/Documentation/ApiReference/UI_Components/dxTabs/') and [MultiView](/api-reference/10%20UI%20Components/dxMultiView '/Documentation/ApiReference/UI_Components/dxMultiView/') UI components. It automatically synchronizes the selected tab with the currently displayed view, and vice versa."
  },
  "dxTabPanel.selectionChanging": {
    "shortDescription": "Raised before selection changes."
  },
  "dxTabPanel.titleClick": {
    "shortDescription": "Raised when a tab is clicked or tapped."
  },
  "dxTabPanel.titleHold": {
    "shortDescription": "Raised when a tab has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '/Documentation/ApiReference/UI_Components/dxTabPanel/Configuration/#itemHoldTimeout')."
  },
  "dxTabPanel.titleRendered": {
    "shortDescription": "Raised after a tab is rendered."
  },
  "dxTabPanelItem.badge": {
    "shortDescription": "Specifies a badge text for the tab."
  },
  "dxTabPanelItem.icon": {
    "shortDescription": "Specifies the icon to be displayed in the tab's title."
  },
  "dxTabPanelItem.tabTemplate": {
    "shortDescription": "Specifies a template that should be used to render the tab for this item only."
  },
  "dxTabPanelItem.title": {
    "shortDescription": "Specifies the item title text displayed on a corresponding tab."
  },
  "dxTabPanelOptions.animationEnabled": {
    "shortDescription": "Specifies whether or not to animate the displayed item change."
  },
  "dxTabPanelOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxTabPanelOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxTabPanelOptions.iconPosition": {
    "shortDescription": "Specifies icon position relative to the text inside the tab."
  },
  "dxTabPanelOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxTabPanelOptions.itemTitleTemplate": {
    "shortDescription": "Specifies a custom template for item titles."
  },
  "dxTabPanelOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTabPanelOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTabPanelOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTabPanelOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxTabPanelOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxTabPanelOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxTabPanelOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxTabPanelOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTabPanelOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxTabPanelOptions.onSelectionChanging": {
    "shortDescription": "A function that is called before selection changes."
  },
  "dxTabPanelOptions.onTitleClick": {
    "shortDescription": "A function that is executed when a tab is clicked or tapped."
  },
  "dxTabPanelOptions.onTitleHold": {
    "shortDescription": "A function that is executed when a tab has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '/Documentation/ApiReference/UI_Components/dxTabPanel/Configuration/#itemHoldTimeout')."
  },
  "dxTabPanelOptions.onTitleRendered": {
    "shortDescription": "A function that is executed after a tab is rendered."
  },
  "dxTabPanelOptions.repaintChangesOnly": {
    "shortDescription": "Specifies whether to repaint only those elements whose data changed."
  },
  "dxTabPanelOptions.scrollByContent": {
    "shortDescription": "A Boolean value specifying if tabs in the title are scrolled by content."
  },
  "dxTabPanelOptions.scrollingEnabled": {
    "shortDescription": "A Boolean indicating whether or not to add scrolling support for tabs in the title."
  },
  "dxTabPanelOptions.showNavButtons": {
    "shortDescription": "Specifies whether navigation buttons should be available when tabs exceed the UI component's width."
  },
  "dxTabPanelOptions.stylingMode": {
    "shortDescription": "Specifies the styling mode for the active tab."
  },
  "dxTabPanelOptions.swipeEnabled": {
    "shortDescription": "A Boolean value specifying whether or not to allow users to change the selected index by swiping."
  },
  "dxTabPanelOptions.tabsPosition": {
    "shortDescription": "Specifies tab position relative to the panel."
  },
  "dxTabs": {
    "shortDescription": "The Tabs component is a tab strip used to switch between pages or views. This UI component is included in the [TabPanel](/api-reference/10%20UI%20Components/dxTabPanel '/Documentation/ApiReference/UI_Components/dxTabPanel/') UI component, but you can use Tabs separately as well."
  },
  "dxTabsItem.badge": {
    "shortDescription": "Specifies a badge text for the tab."
  },
  "dxTabsItem.icon": {
    "shortDescription": "Specifies the icon to be displayed on the tab."
  },
  "dxTabsOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxTabsOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxTabsOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxTabsOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxTabsOptions.iconPosition": {
    "shortDescription": "Specifies icon position relative to the text inside the tab."
  },
  "dxTabsOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxTabsOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTabsOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTabsOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTabsOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxTabsOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxTabsOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxTabsOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxTabsOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTabsOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxTabsOptions.onSelectionChanging": {
    "shortDescription": "A function that is called before selection changes."
  },
  "dxTabsOptions.orientation": {
    "shortDescription": "Specifies component orientation."
  },
  "dxTabsOptions.repaintChangesOnly": {
    "shortDescription": "Specifies whether to repaint only those elements whose data changed."
  },
  "dxTabsOptions.scrollByContent": {
    "shortDescription": "Specifies whether or not an end user can scroll tabs by swiping."
  },
  "dxTabsOptions.scrollingEnabled": {
    "shortDescription": "Specifies whether or not an end user can scroll tabs."
  },
  "dxTabsOptions.selectionMode": {
    "shortDescription": "Specifies whether the UI component enables an end user to select only a single item or multiple items."
  },
  "dxTabsOptions.showNavButtons": {
    "shortDescription": "Specifies whether navigation buttons should be available when tabs exceed the UI component's width."
  },
  "dxTabsOptions.stylingMode": {
    "shortDescription": "Specifies the styling mode for the active tab."
  },
  "dxTagBox": {
    "shortDescription": "The TagBox UI component is an editor that allows an end user to select multiple items from a drop-down list."
  },
  "dxTagBox.multiTagPreparing": {
    "shortDescription": "Raised before the multi-tag is rendered."
  },
  "dxTagBox.selectAllValueChanged": {
    "shortDescription": "Raised when the \"Select All\" check box value is changed."
  },
  "dxTagBox.selectionChanged": {
    "shortDescription": "Raised when a list item is selected or selection is canceled."
  },
  "dxTagBoxOptions.applyValueMode": {
    "shortDescription": "Specifies how the UI component applies values."
  },
  "dxTagBoxOptions.displayValue": {
    "shortDescription": "Returns the value currently displayed by the UI component."
  },
  "dxTagBoxOptions.hideSelectedItems": {
    "shortDescription": "A Boolean value specifying whether or not to hide selected items."
  },
  "dxTagBoxOptions.maxDisplayedTags": {
    "shortDescription": "Specifies the limit on displayed tags. On exceeding it, the UI component replaces all tags with a single multi-tag that displays the number of selected items."
  },
  "dxTagBoxOptions.maxFilterQueryLength": {
    "shortDescription": "Specifies the maximum filter query length in characters."
  },
  "dxTagBoxOptions.multiline": {
    "shortDescription": "A Boolean value specifying whether or not the UI component is multiline."
  },
  "dxTagBoxOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxTagBoxOptions.onClosed": {
    "shortDescription": "A function that is executed once the drop-down editor is closed."
  },
  "dxTagBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTagBoxOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxTagBoxOptions.onCustomItemCreating": {
    "shortDescription": "A function that is executed when a user adds a custom item. Requires [acceptCustomValue](/api-reference/10%20UI%20Components/dxSelectBox/1%20Configuration/acceptCustomValue.md '{basewidgetpath}/Configuration/#acceptCustomValue') to be set to **true**."
  },
  "dxTagBoxOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxTagBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTagBoxOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxTagBoxOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxTagBoxOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxTagBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTagBoxOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxTagBoxOptions.onItemClick": {
    "shortDescription": "A function that is executed when a list item is clicked or tapped."
  },
  "dxTagBoxOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxTagBoxOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxTagBoxOptions.onMultiTagPreparing": {
    "shortDescription": "A function that is executed before the multi-tag is rendered."
  },
  "dxTagBoxOptions.onOpened": {
    "shortDescription": "A function that is executed once the drop-down editor is opened."
  },
  "dxTagBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTagBoxOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxTagBoxOptions.onSelectAllValueChanged": {
    "shortDescription": "A function that is executed when the \"Select All\" check box value is changed. Applies only if [showSelectionControls](/api-reference/10%20UI%20Components/dxSelectBox/1%20Configuration/showSelectionControls.md '/Documentation/ApiReference/UI_Components/dxTagBox/Configuration/#showSelectionControls') is **true**."
  },
  "dxTagBoxOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a list item is selected or selection is canceled."
  },
  "dxTagBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxTagBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxTagBoxOptions.selectAllMode": {
    "shortDescription": "Specifies the mode in which all items are selected."
  },
  "dxTagBoxOptions.selectAllText": {
    "shortDescription": "Specifies the text displayed at the \"Select All\" check box."
  },
  "dxTagBoxOptions.selectedItem": {
    "shortDescription": "Gets the currently selected item."
  },
  "dxTagBoxOptions.selectedItems": {
    "shortDescription": "Gets the currently selected items."
  },
  "dxTagBoxOptions.showDropDownButton": {
    "shortDescription": "Specifies whether the drop-down button is visible."
  },
  "dxTagBoxOptions.showMultiTagOnly": {
    "shortDescription": "Specifies whether the multi-tag is shown without ordinary tags."
  },
  "dxTagBoxOptions.spellcheck": {
    "shortDescription": "Specifies whether or not the UI component checks the inner text for spelling mistakes."
  },
  "dxTagBoxOptions.tagTemplate": {
    "shortDescription": "Specifies a custom template for tags."
  },
  "dxTagBoxOptions.useSubmitBehavior": {
    "shortDescription": ""
  },
  "dxTagBoxOptions.value": {
    "shortDescription": "Specifies the selected items."
  },
  "dxTemplate": {
    "shortDescription": "A custom template's markup."
  },
  "dxTemplateOptions.name": {
    "shortDescription": "Specifies the name of the template."
  },
  "dxTextArea": {
    "shortDescription": "The TextArea is a UI component that enables a user to enter and edit a multi-line text."
  },
  "dxTextArea.getButton(name)": {
    "shortDescription": "Gets an instance of a [custom action button](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/buttons '{basewidgetpath}/Configuration/buttons/')."
  },
  "dxTextAreaOptions.autoResizeEnabled": {
    "shortDescription": "A Boolean value specifying whether or not the auto resizing mode is enabled."
  },
  "dxTextAreaOptions.buttons": {
    "shortDescription": "Allows you to add custom buttons to the input text field."
  },
  "dxTextAreaOptions.mask": {
    "shortDescription": "The editor mask that specifies the custom format of the entered string."
  },
  "dxTextAreaOptions.maskChar": {
    "shortDescription": "Specifies a mask placeholder. A single character is recommended."
  },
  "dxTextAreaOptions.maskInvalidMessage": {
    "shortDescription": "A message displayed when the entered text does not match the specified pattern."
  },
  "dxTextAreaOptions.maskRules": {
    "shortDescription": "Specifies custom mask rules."
  },
  "dxTextAreaOptions.maxHeight": {
    "shortDescription": "Specifies the maximum height of the UI component."
  },
  "dxTextAreaOptions.minHeight": {
    "shortDescription": "Specifies the minimum height of the UI component."
  },
  "dxTextAreaOptions.mode": {
    "shortDescription": "The \"mode\" attribute value of the actual HTML input element representing the text box."
  },
  "dxTextAreaOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxTextAreaOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTextAreaOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxTextAreaOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxTextAreaOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTextAreaOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxTextAreaOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxTextAreaOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxTextAreaOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTextAreaOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxTextAreaOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxTextAreaOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxTextAreaOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTextAreaOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxTextAreaOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxTextBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxTextAreaOptions.showClearButton": {
    "shortDescription": "Specifies whether to display the Clear button in the UI component."
  },
  "dxTextAreaOptions.showMaskMode": {
    "shortDescription": "Specifies when the UI component shows the [mask](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/mask.md '{basewidgetpath}/Configuration/#mask'). Applies only if [useMaskedValue](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/useMaskedValue.md '{basewidgetpath}/Configuration/#useMaskedValue') is **true**."
  },
  "dxTextAreaOptions.spellcheck": {
    "shortDescription": "Specifies whether or not the UI component checks the inner text for spelling mistakes."
  },
  "dxTextAreaOptions.useMaskedValue": {
    "shortDescription": "Specifies whether the [value](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should contain mask characters or not."
  },
  "dxTextBox": {
    "shortDescription": "The TextBox is a UI component that enables a user to enter and edit a single line of text."
  },
  "dxTextBox.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/dxTextBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "dxTextBoxOptions.maxLength": {
    "shortDescription": "Specifies the maximum number of characters you can enter into the textbox."
  },
  "dxTextBoxOptions.mode": {
    "shortDescription": "The \"mode\" attribute value of the actual HTML input element representing the text box."
  },
  "dxTextBoxOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxTextBoxOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTextBoxOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxTextBoxOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxTextBoxOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTextBoxOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxTextBoxOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxTextBoxOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxTextBoxOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTextBoxOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxTextBoxOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxTextBoxOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxTextBoxOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTextBoxOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxTextBoxOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/dxTextBox/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "dxTextBoxOptions.value": {
    "shortDescription": "Specifies a value the UI component displays."
  },
  "dxTextEditor": {
    "shortDescription": "A base class for text editing UI components."
  },
  "dxTextEditor.blur()": {
    "shortDescription": "Removes focus from the input element."
  },
  "dxTextEditor.change": {
    "shortDescription": "Raised when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxTextEditor.copy": {
    "shortDescription": "Raised when the UI component's input has been copied."
  },
  "dxTextEditor.cut": {
    "shortDescription": "Raised when the UI component's input has been cut."
  },
  "dxTextEditor.enterKey": {
    "shortDescription": "Raised when the Enter key has been pressed while the UI component is focused."
  },
  "dxTextEditor.focus()": {
    "shortDescription": "Sets focus to the input element representing the UI component."
  },
  "dxTextEditor.focusIn": {
    "shortDescription": "Raised when the UI component gets focus."
  },
  "dxTextEditor.focusOut": {
    "shortDescription": "Raised when the UI component loses focus."
  },
  "dxTextEditor.getButton(name)": {
    "shortDescription": "Gets an instance of a [custom action button](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/buttons '{basewidgetpath}/Configuration/buttons/')."
  },
  "dxTextEditor.input": {
    "shortDescription": "Raised each time the UI component's input is changed while the UI component is focused."
  },
  "dxTextEditor.keyDown": {
    "shortDescription": "Raised when a user is pressing a key on the keyboard."
  },
  "dxTextEditor.keyUp": {
    "shortDescription": "Raised when a user releases a key on the keyboard."
  },
  "dxTextEditor.paste": {
    "shortDescription": "Raised when the UI component's input has been pasted."
  },
  "dxTextEditorOptions.buttons": {
    "shortDescription": "Allows you to add custom buttons to the input text field."
  },
  "dxTextEditorOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxTextEditorOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxTextEditorOptions.inputAttr": {
    "shortDescription": "Specifies the attributes to be passed on to the underlying HTML element."
  },
  "dxTextEditorOptions.label": {
    "shortDescription": "Specifies a text string used to annotate the editor's [value](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/value.md '{currentpath}/#value')."
  },
  "dxTextEditorOptions.labelMode": {
    "shortDescription": "Specifies the [label](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/label.md '{currentpath}/#label')'s display mode."
  },
  "dxTextEditorOptions.mask": {
    "shortDescription": "The editor mask that specifies the custom format of the entered string."
  },
  "dxTextEditorOptions.maskChar": {
    "shortDescription": "Specifies a mask placeholder. A single character is recommended."
  },
  "dxTextEditorOptions.maskInvalidMessage": {
    "shortDescription": "A message displayed when the entered text does not match the specified pattern."
  },
  "dxTextEditorOptions.maskRules": {
    "shortDescription": "Specifies custom mask rules."
  },
  "dxTextEditorOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "dxTextEditorOptions.onChange": {
    "shortDescription": "A function that is executed when the UI component loses focus after the text field's content was changed using the keyboard."
  },
  "dxTextEditorOptions.onCopy": {
    "shortDescription": "A function that is executed when the UI component's input has been copied."
  },
  "dxTextEditorOptions.onCut": {
    "shortDescription": "A function that is executed when the UI component's input has been cut."
  },
  "dxTextEditorOptions.onEnterKey": {
    "shortDescription": "A function that is executed when the Enter key has been pressed while the UI component is focused."
  },
  "dxTextEditorOptions.onFocusIn": {
    "shortDescription": "A function that is executed when the UI component gets focus."
  },
  "dxTextEditorOptions.onFocusOut": {
    "shortDescription": "A function that is executed when the UI component loses focus."
  },
  "dxTextEditorOptions.onInput": {
    "shortDescription": "A function that is executed each time the UI component's input is changed while the UI component is focused."
  },
  "dxTextEditorOptions.onKeyDown": {
    "shortDescription": "A function that is executed when a user is pressing a key on the keyboard."
  },
  "dxTextEditorOptions.onKeyUp": {
    "shortDescription": "A function that is executed when a user releases a key on the keyboard."
  },
  "dxTextEditorOptions.onPaste": {
    "shortDescription": "A function that is executed when the UI component's input has been pasted."
  },
  "dxTextEditorOptions.placeholder": {
    "shortDescription": "Specifies a text string displayed when the editor's [value](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/value.md '{currentpath}/#value') is empty."
  },
  "dxTextEditorOptions.showClearButton": {
    "shortDescription": "Specifies whether to display the Clear button in the UI component."
  },
  "dxTextEditorOptions.showMaskMode": {
    "shortDescription": "Specifies when the UI component shows the [mask](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/mask.md '{basewidgetpath}/Configuration/#mask'). Applies only if [useMaskedValue](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/useMaskedValue.md '{basewidgetpath}/Configuration/#useMaskedValue') is **true**."
  },
  "dxTextEditorOptions.spellcheck": {
    "shortDescription": "Specifies whether or not the UI component checks the inner text for spelling mistakes."
  },
  "dxTextEditorOptions.stylingMode": {
    "shortDescription": "Specifies how the UI component's text field is styled."
  },
  "dxTextEditorOptions.text": {
    "shortDescription": "The read-only property that holds the text displayed by the UI component **input** element."
  },
  "dxTextEditorOptions.useMaskedValue": {
    "shortDescription": "Specifies whether the [value](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should contain mask characters or not."
  },
  "dxTextEditorOptions.value": {
    "shortDescription": "Specifies the editor's value."
  },
  "dxTextEditorOptions.valueChangeEvent": {
    "shortDescription": "Specifies the <a href=\"https://en.wikipedia.org/wiki/DOM_events\" target=\"_blank\">DOM events</a> after which the UI component's [value](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') should be updated."
  },
  "dxTileView": {
    "shortDescription": "The TileView UI component contains a collection of tiles. Tiles can store much more information than ordinary buttons, that is why they are very popular in apps designed for touch devices."
  },
  "dxTileView.scrollPosition()": {
    "shortDescription": "Gets the current scroll position."
  },
  "dxTileView.selectionChanged": {
    "shortDescription": "Raised after selection changes."
  },
  "dxTileView.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxTileViewItem.heightRatio": {
    "shortDescription": "Specifies a multiplier for the [baseItemHeight](/api-reference/10%20UI%20Components/dxTileView/1%20Configuration/baseItemHeight.md '/Documentation/ApiReference/UI_Components/dxTileView/Configuration/#baseItemHeight') property value (for the purpose of obtaining the actual item height)."
  },
  "dxTileViewItem.widthRatio": {
    "shortDescription": "Specifies a multiplier for the [baseItemWidth](/api-reference/10%20UI%20Components/dxTileView/1%20Configuration/baseItemWidth.md '/Documentation/ApiReference/UI_Components/dxTileView/Configuration/#baseItemWidth') property value (for the purpose of obtaining the actual item width)."
  },
  "dxTileViewOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxTileViewOptions.baseItemHeight": {
    "shortDescription": "Specifies the height of the base tile view item."
  },
  "dxTileViewOptions.baseItemWidth": {
    "shortDescription": "Specifies the width of the base tile view item."
  },
  "dxTileViewOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxTileViewOptions.direction": {
    "shortDescription": "Specifies whether the UI component is oriented horizontally or vertically."
  },
  "dxTileViewOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxTileViewOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxTileViewOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "dxTileViewOptions.itemMargin": {
    "shortDescription": "Specifies the distance in pixels between adjacent tiles."
  },
  "dxTileViewOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxTileViewOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "dxTileViewOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTileViewOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTileViewOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTileViewOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxTileViewOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxTileViewOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxTileViewOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxTileViewOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTileViewOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxTileViewOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxTileViewOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "dxTileViewOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "dxTileViewOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxTileViewOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxTileViewOptions.showScrollbar": {
    "shortDescription": "Specifies when the UI component shows the scrollbar."
  },
  "dxToast": {
    "shortDescription": "The Toast is a UI component that provides pop-up notifications."
  },
  "dxToastAnimation": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxToastOptions.animation": {
    "shortDescription": "Configures UI component visibility animations. This object contains two fields: [show](/api-reference/10%20UI%20Widgets/dxOverlay/1%20Configuration/animation/show.md '{basewidgetpath}/Configuration/animation/#show') and [hide](/api-reference/10%20UI%20Widgets/dxOverlay/1%20Configuration/animation/hide.md '{basewidgetpath}/Configuration/animation/#hide')."
  },
  "dxToastOptions.animation.hide": {
    "shortDescription": "An object that defines the [animation properties](/api-reference/50%20Common/Object%20Structures/animationConfig '/Documentation/ApiReference/Common/Object_Structures/AnimationConfig/') used when the UI component is being hidden."
  },
  "dxToastOptions.animation.show": {
    "shortDescription": "An object that defines the [animation properties](/api-reference/50%20Common/Object%20Structures/animationConfig '/Documentation/ApiReference/Common/Object_Structures/AnimationConfig/') used when the UI component is being shown."
  },
  "dxToastOptions.closeOnClick": {
    "shortDescription": "A Boolean value specifying whether or not the toast is closed if a user clicks it."
  },
  "dxToastOptions.closeOnOutsideClick": {
    "depNote": "Use the hideOnOutsideClick option instead.",
    "shortDescription": "Specifies whether to close the UI component if a user clicks outside it."
  },
  "dxToastOptions.closeOnSwipe": {
    "shortDescription": "A Boolean value specifying whether or not the toast is closed if a user swipes it out of the screen boundaries."
  },
  "dxToastOptions.disabled": {
    "shortDescription": "Specifies whether the UI component responds to user interaction."
  },
  "dxToastOptions.displayTime": {
    "shortDescription": "The time span in milliseconds during which the Toast UI component is visible."
  },
  "dxToastOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxToastOptions.hideOnOutsideClick": {
    "shortDescription": "Specifies whether to hide the UI component if a user clicks outside it."
  },
  "dxToastOptions.maxWidth": {
    "shortDescription": "Specifies the maximum width the UI component can reach while resizing."
  },
  "dxToastOptions.message": {
    "shortDescription": "The Toast message text."
  },
  "dxToastOptions.minWidth": {
    "shortDescription": "Specifies the minimum width the UI component can reach while resizing."
  },
  "dxToastOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxToastOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxToastOptions.onHidden": {
    "shortDescription": "A function that is executed after the UI component is hidden."
  },
  "dxToastOptions.onHiding": {
    "shortDescription": "A function that is executed before the UI component is hidden."
  },
  "dxToastOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxToastOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxToastOptions.onShowing": {
    "shortDescription": "A function that is executed before the UI component is displayed."
  },
  "dxToastOptions.onShown": {
    "shortDescription": "A function that is executed after the UI component is displayed."
  },
  "dxToastOptions.position": {
    "shortDescription": "Positions the UI component."
  },
  "dxToastOptions.shading": {
    "shortDescription": "Specifies whether to shade the background when the UI component is active."
  },
  "dxToastOptions.type": {
    "shortDescription": "Specifies the Toast UI component type."
  },
  "dxToastOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxToolbar": {
    "shortDescription": "The Toolbar is a UI component containing items that usually manage screen content. Those items can be plain text or UI components."
  },
  "dxToolbar.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxToolbar.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxToolbar.selectionChanged": {
    "shortDescription": "Raised after selection changes."
  },
  "dxToolbar.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxToolbarItem.cssClass": {
    "shortDescription": "Specifies a CSS class to be applied to the item."
  },
  "dxToolbarItem.locateInMenu": {
    "shortDescription": "Specifies when to display an item in the toolbar's overflow menu."
  },
  "dxToolbarItem.location": {
    "shortDescription": "Specifies a location for the item on the toolbar."
  },
  "dxToolbarItem.menuItemTemplate": {
    "shortDescription": "Specifies a template that should be used to render a menu item."
  },
  "dxToolbarItem.options": {
    "shortDescription": "Configures the DevExtreme UI component used as a toolbar item."
  },
  "dxToolbarItem.showText": {
    "shortDescription": "Specifies when to display the text for the UI component item."
  },
  "dxToolbarItem.widget": {
    "shortDescription": "A UI component that presents a toolbar item. To configure it, use the [options](/api-reference/_hidden/dxToolbarItem/options.md '/Documentation/ApiReference/UI_Components/dxToolbar/Configuration/items/#options') object."
  },
  "dxToolbarOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxToolbarOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxToolbarOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxToolbarOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxToolbarOptions.height": {
    "shortDescription": "Specifies the UI component's height in pixels."
  },
  "dxToolbarOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxToolbarOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "dxToolbarOptions.menuItemTemplate": {
    "shortDescription": "Specifies a custom template for menu items."
  },
  "dxToolbarOptions.multiline": {
    "shortDescription": "Specifies whether or not the Toolbar arranges items into multiple lines when their combined width exceeds the Toolbar width."
  },
  "dxToolbarOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxToolbarOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxToolbarOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxToolbarOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxToolbarOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxToolbarOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxToolbarOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxToolbarOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxToolbarOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxToolbarOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxToolbarOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "dxToolbarOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "dxToolbarOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxToolbarOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxToolbarOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxTooltip": {
    "shortDescription": "The Tooltip UI component displays a tooltip for a specified element on the page."
  },
  "dxTooltipOptions.enableBodyScroll": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxTooltipOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTooltipOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTooltipOptions.onHidden": {
    "shortDescription": "A function that is executed after the UI component is hidden."
  },
  "dxTooltipOptions.onHiding": {
    "shortDescription": "A function that is executed before the UI component is hidden."
  },
  "dxTooltipOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTooltipOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTooltipOptions.onShowing": {
    "shortDescription": "A function that is executed before the UI component is displayed."
  },
  "dxTooltipOptions.onShown": {
    "shortDescription": "A function that is executed after the UI component is displayed."
  },
  "dxTooltipOptions.onTitleRendered": {
    "shortDescription": "A function that is executed when the UI component's [title](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/title.md '{basewidgetpath}/Configuration/#title') is rendered."
  },
  "dxTooltipOptions.showCloseButton": {
    "shortDescription": "Specifies whether or not the UI component displays the Close button."
  },
  "dxTooltipOptions.showTitle": {
    "shortDescription": "A Boolean value specifying whether or not to display the title in the overlay window."
  },
  "dxTooltipOptions.title": {
    "shortDescription": "The title in the overlay window."
  },
  "dxTooltipOptions.titleTemplate": {
    "shortDescription": "Specifies a custom template for the UI component title. Does not apply if the [title](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/title.md '/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#title') is defined."
  },
  "dxTooltipOptions.toolbarItems": {
    "shortDescription": "Configures toolbar items."
  },
  "dxTrackBar": {
    "shortDescription": "A base class for track bar UI components."
  },
  "dxTrackBarOptions.max": {
    "shortDescription": "The maximum value the UI component can accept."
  },
  "dxTrackBarOptions.min": {
    "shortDescription": "The minimum value the UI component can accept."
  },
  "dxTreeList": {
    "shortDescription": "The TreeList is a UI component that represents data from a local or remote source in the form of a multi-column tree view. This UI component offers such features as sorting, filtering, editing, selection, etc."
  },
  "dxTreeList.addColumn(columnOptions)": {
    "shortDescription": "Adds a new column."
  },
  "dxTreeList.addRow()": {
    "shortDescription": "Adds an empty data row to the highest hierarchical level and switches it to the editing state."
  },
  "dxTreeList.addRow(parentId)": {
    "shortDescription": "Adds an empty data row to a specified parent row."
  },
  "dxTreeList.cellClick": {
    "shortDescription": "Raised when a cell is clicked or tapped."
  },
  "dxTreeList.cellDblClick": {
    "shortDescription": "Raised when a cell is double-clicked or double-tapped."
  },
  "dxTreeList.cellHoverChanged": {
    "shortDescription": "Raised when the pointer enters or leaves a cell."
  },
  "dxTreeList.cellPrepared": {
    "shortDescription": "Raised after a cell is created."
  },
  "dxTreeList.collapseRow(key)": {
    "shortDescription": "Collapses a row with a specific key."
  },
  "dxTreeList.contextMenuPreparing": {
    "shortDescription": "Raised before the context menu is rendered."
  },
  "dxTreeList.editingStart": {
    "shortDescription": "Raised before a cell or row switches to the editing state."
  },
  "dxTreeList.editorPrepared": {
    "shortDescription": "Raised after an editor is created."
  },
  "dxTreeList.editorPreparing": {
    "shortDescription": "Raised before an editor is created."
  },
  "dxTreeList.expandRow(key)": {
    "shortDescription": "Expands a row with a specific key."
  },
  "dxTreeList.focusedCellChanged": {
    "shortDescription": "Raised after the focused cell changes."
  },
  "dxTreeList.focusedCellChanging": {
    "shortDescription": "Raised before the focused cell changes."
  },
  "dxTreeList.focusedRowChanged": {
    "shortDescription": "Raised after the focused row changes. Applies only when [focusedRowEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowEnabled.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#focusedRowEnabled') is **true**."
  },
  "dxTreeList.focusedRowChanging": {
    "shortDescription": "Raised before the focused row changes. Applies only when [focusedRowEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowEnabled.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#focusedRowEnabled') is **true**."
  },
  "dxTreeList.forEachNode(callback)": {
    "shortDescription": "Performs a pre-order tree traversal, executing a function on each visited [node](/api-reference/10%20UI%20Components/dxTreeList/4%20Node '/Documentation/ApiReference/UI_Components/dxTreeList/Node/'). Starts traversing from the top level nodes."
  },
  "dxTreeList.forEachNode(nodes, callback)": {
    "shortDescription": "Performs a pre-order tree traversal, executing a function on each visited [node](/api-reference/10%20UI%20Components/dxTreeList/4%20Node '/Documentation/ApiReference/UI_Components/dxTreeList/Node/'). Starts traversing from the specified nodes."
  },
  "dxTreeList.getNodeByKey(key)": {
    "shortDescription": "Gets a node with a specific key."
  },
  "dxTreeList.getRootNode()": {
    "shortDescription": "Gets the root node."
  },
  "dxTreeList.getSelectedRowKeys()": {
    "shortDescription": "Gets the keys of the rows selected explicitly [via the API](/concepts/05%20UI%20Components/TreeList/50%20Selection/20%20API/1%20Initial%20and%20Runtime%20Selection.md '/Documentation/Guide/UI_Components/TreeList/Selection/#API/Initial_and_Runtime_Selection') or via a click or tap."
  },
  "dxTreeList.getSelectedRowKeys(mode)": {
    "shortDescription": "Gets selected row keys."
  },
  "dxTreeList.getSelectedRowsData()": {
    "shortDescription": "Gets the data objects of the rows selected explicitly [via the API](/concepts/05%20UI%20Components/TreeList/50%20Selection/20%20API/1%20Initial%20and%20Runtime%20Selection.md '/Documentation/Guide/UI_Components/TreeList/Selection/#API/Initial_and_Runtime_Selection') or via a click or tap."
  },
  "dxTreeList.getSelectedRowsData(mode)": {
    "shortDescription": "Gets selected row data objects."
  },
  "dxTreeList.getVisibleColumns()": {
    "shortDescription": "Gets all visible columns."
  },
  "dxTreeList.getVisibleColumns(headerLevel)": {
    "shortDescription": "Gets all visible columns at a specific hierarchical level of column headers. Use it to access [banded columns](/api-reference/_hidden/GridBaseColumn/isBand.md '{basewidgetpath}/Configuration/columns/#isBand')."
  },
  "dxTreeList.getVisibleRows()": {
    "shortDescription": "Gets currently rendered rows."
  },
  "dxTreeList.isRowExpanded(key)": {
    "shortDescription": "Checks whether a row is expanded or collapsed."
  },
  "dxTreeList.loadDescendants()": {
    "shortDescription": "Loads all root node descendants (all data items). Takes effect only if data has the [plain structure](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/dataStructure.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#dataStructure') and  **remoteOperations**.[filtering](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/remoteOperations/filtering.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/remoteOperations/#filtering') is **true**."
  },
  "dxTreeList.loadDescendants(keys)": {
    "shortDescription": "Loads a specific node's descendants. Takes effect only if data has the [plain structure](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/dataStructure.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#dataStructure') and  **remoteOperations**.[filtering](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/remoteOperations/filtering.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/remoteOperations/#filtering') is **true**."
  },
  "dxTreeList.loadDescendants(keys, childrenOnly)": {
    "shortDescription": "Loads all or only direct descendants of specific nodes. Takes effect only if data has the [plain structure](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/dataStructure.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#dataStructure') and  **remoteOperations**.[filtering](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/remoteOperations/filtering.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/remoteOperations/#filtering') is **true**."
  },
  "dxTreeList.nodesInitialized": {
    "shortDescription": "Raised after the loaded nodes are initialized."
  },
  "dxTreeList.rowClick": {
    "shortDescription": "Raised when a row is clicked or tapped."
  },
  "dxTreeList.rowDblClick": {
    "shortDescription": "Raised when a row is double-clicked or double-tapped."
  },
  "dxTreeList.rowPrepared": {
    "shortDescription": "Raised after a row is created."
  },
  "dxTreeListColumn.buttons": {
    "shortDescription": "Allows you to customize buttons in the edit column or create a custom [command column](/concepts/05%20UI%20Components/TreeList/10%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/TreeList/Columns/Column_Types/Command_Columns/'). Applies only if the column's [type](/api-reference/_hidden/dxTreeListColumn/type.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/columns/#type') is *\"buttons\"*."
  },
  "dxTreeListColumn.cellTemplate": {
    "shortDescription": "Specifies a custom template for data cells."
  },
  "dxTreeListColumn.columns": {
    "shortDescription": "Configures columns."
  },
  "dxTreeListColumn.editCellTemplate": {
    "shortDescription": "Specifies a custom template for data cells in an editing state."
  },
  "dxTreeListColumn.headerCellTemplate": {
    "shortDescription": "Specifies a custom template for column headers."
  },
  "dxTreeListColumn.type": {
    "shortDescription": "Specifies the [command column](/concepts/05%20UI%20Components/TreeList/10%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/TreeList/Columns/Column_Types/Command_Columns/') that this object customizes."
  },
  "dxTreeListColumnButton": {
    "shortDescription": "Allows you to customize buttons in the edit column or create a custom [command column](/concepts/05%20Widgets/DataGrid/15%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/{WidgetName}/Columns/Column_Types/Command_Columns/'). Applies only if the column's [type](/api-reference/_hidden/dxDataGridColumn/type.md '/Documentation/ApiReference/UI_Components/dx{WidgetName}/Configuration/columns/#type') is *\"buttons\"*."
  },
  "dxTreeListColumnButton.disabled": {
    "shortDescription": "Specifies whether the button is disabled."
  },
  "dxTreeListColumnButton.name": {
    "shortDescription": "The name used to identify a built-in button."
  },
  "dxTreeListColumnButton.onClick": {
    "shortDescription": "A function that is executed when the button is clicked or tapped."
  },
  "dxTreeListColumnButton.template": {
    "shortDescription": "Specifies a custom button template."
  },
  "dxTreeListColumnButton.visible": {
    "shortDescription": "Specifies the button's visibility."
  },
  "dxTreeListEditing": {
    "shortDescription": "Configures editing."
  },
  "dxTreeListEditingTexts": {
    "shortDescription": "Contains properties that specify texts for editing-related UI elements."
  },
  "dxTreeListNode": {
    "shortDescription": "A TreeList node's structure."
  },
  "dxTreeListNode.children": {
    "shortDescription": "Contains all child nodes."
  },
  "dxTreeListNode.data": {
    "shortDescription": "The node's data object."
  },
  "dxTreeListNode.hasChildren": {
    "shortDescription": "Indicates whether the node has child nodes."
  },
  "dxTreeListNode.key": {
    "shortDescription": "The node's key."
  },
  "dxTreeListNode.level": {
    "shortDescription": "The node's hierarchical level."
  },
  "dxTreeListNode.parent": {
    "shortDescription": "The parent node."
  },
  "dxTreeListNode.visible": {
    "shortDescription": "Indicates whether the node is visualized as a row."
  },
  "dxTreeListOptions.autoExpandAll": {
    "shortDescription": "Specifies whether all rows are expanded initially."
  },
  "dxTreeListOptions.columns": {
    "shortDescription": "Configures columns."
  },
  "dxTreeListOptions.customizeColumns": {
    "shortDescription": "Customizes columns after they are created."
  },
  "dxTreeListOptions.dataStructure": {
    "shortDescription": "Notifies the UI component of the used data structure."
  },
  "dxTreeListOptions.editing": {
    "shortDescription": "Configures editing."
  },
  "dxTreeListOptions.editing.allowAdding": {
    "shortDescription": "Specifies whether a user can add new rows. It is called for each data row when defined as a function."
  },
  "dxTreeListOptions.editing.allowDeleting": {
    "shortDescription": "Specifies whether a user can delete rows. It is called for each data row when defined as a function."
  },
  "dxTreeListOptions.editing.allowUpdating": {
    "shortDescription": "Specifies whether a user can update rows. It is called for each data row when defined as a function"
  },
  "dxTreeListOptions.editing.texts": {
    "shortDescription": "Contains properties that specify texts for editing-related UI elements."
  },
  "dxTreeListOptions.editing.texts.addRowToNode": {
    "shortDescription": "Specifies text for the button that adds a new nested row. Applies if the **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/editing/#mode') is *\"batch\"* or *\"cell\"*."
  },
  "dxTreeListOptions.expandedRowKeys": {
    "shortDescription": "Specifies keys of the initially expanded rows."
  },
  "dxTreeListOptions.expandNodesOnFiltering": {
    "shortDescription": "Specifies whether nodes appear expanded or collapsed after filtering is applied."
  },
  "dxTreeListOptions.filterMode": {
    "shortDescription": "Specifies whether filter and search results should include matching rows only, matching rows with ancestors, or matching rows with ancestors and descendants (full branch)."
  },
  "dxTreeListOptions.hasItemsExpr": {
    "shortDescription": "Specifies which data field defines whether the node has children."
  },
  "dxTreeListOptions.itemsExpr": {
    "shortDescription": "Specifies which data field contains nested items. Set this property when your data has a [hierarchical structure](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/dataStructure.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#dataStructure')."
  },
  "dxTreeListOptions.keyExpr": {
    "shortDescription": "Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique."
  },
  "dxTreeListOptions.onAdaptiveDetailRowPreparing": {
    "shortDescription": "A function that is executed before an adaptive detail row is rendered."
  },
  "dxTreeListOptions.onCellClick": {
    "shortDescription": "A function that is executed when a cell is clicked or tapped. Executed before [onRowClick](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/onRowClick.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#onRowClick')."
  },
  "dxTreeListOptions.onCellDblClick": {
    "shortDescription": "A function that is executed when a cell is double-clicked or double-tapped. Executed before [onRowDblClick](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/onRowDblClick.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#onRowDblClick')."
  },
  "dxTreeListOptions.onCellHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a cell."
  },
  "dxTreeListOptions.onCellPrepared": {
    "shortDescription": "A function that is executed after a grid cell is created."
  },
  "dxTreeListOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTreeListOptions.onContextMenuPreparing": {
    "shortDescription": "A function that is executed before the context menu is rendered."
  },
  "dxTreeListOptions.onDataErrorOccurred": {
    "shortDescription": "A function that is executed when an error occurs in the data source."
  },
  "dxTreeListOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTreeListOptions.onEditCanceled": {
    "shortDescription": "A function that is executed after row changes are discarded."
  },
  "dxTreeListOptions.onEditCanceling": {
    "shortDescription": "A function that is executed when the edit operation is canceled, but row changes are not yet discarded."
  },
  "dxTreeListOptions.onEditingStart": {
    "shortDescription": "A function that is executed before a cell or row switches to the editing state."
  },
  "dxTreeListOptions.onEditorPrepared": {
    "shortDescription": "A function that is executed after an editor is created. Not executed for cells with an [editCellTemplate](/api-reference/_hidden/dxTreeListColumn/editCellTemplate.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/columns/#editCellTemplate')."
  },
  "dxTreeListOptions.onEditorPreparing": {
    "shortDescription": "A function used to customize a cell's [editor](/api-reference/_hidden/GridBaseColumn/editorOptions.md '{basewidgetpath}/Configuration/columns/#editorOptions'). Not executed for cells with an [editCellTemplate](/api-reference/_hidden/dxDataGridColumn/editCellTemplate.md '{basewidgetpath}/Configuration/columns/#editCellTemplate')."
  },
  "dxTreeListOptions.onFocusedCellChanged": {
    "shortDescription": "A function that is executed after the focused cell changes. Applies only to cells in data rows."
  },
  "dxTreeListOptions.onFocusedCellChanging": {
    "shortDescription": "A function that is executed before the focused cell changes. Applies only to cells in data rows."
  },
  "dxTreeListOptions.onFocusedRowChanged": {
    "shortDescription": "A function that executed when the focused row changes. Applies only to data rows. [focusedRowEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowEnabled.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#focusedRowEnabled') should be **true**."
  },
  "dxTreeListOptions.onFocusedRowChanging": {
    "shortDescription": "A function that is executed before the focused row changes. Applies only to data rows. [focusedRowEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowEnabled.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#focusedRowEnabled') should be **true**."
  },
  "dxTreeListOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTreeListOptions.onInitNewRow": {
    "shortDescription": "A function that is executed before a new row is added to the UI component."
  },
  "dxTreeListOptions.onKeyDown": {
    "shortDescription": "A function that is executed when the UI component is in focus and a key has been pressed down."
  },
  "dxTreeListOptions.onNodesInitialized": {
    "shortDescription": "A function that is executed after the loaded nodes are initialized."
  },
  "dxTreeListOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTreeListOptions.onRowClick": {
    "shortDescription": "A function that is executed when a grid row is clicked or tapped."
  },
  "dxTreeListOptions.onRowCollapsed": {
    "shortDescription": "A function that is executed after a row is collapsed."
  },
  "dxTreeListOptions.onRowCollapsing": {
    "shortDescription": "A function that is executed before a row is collapsed."
  },
  "dxTreeListOptions.onRowDblClick": {
    "shortDescription": "A function that is executed when a row is double-clicked or double-tapped. Executed after [onCellDblClick](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/onCellDblClick.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#onCellDblClick')."
  },
  "dxTreeListOptions.onRowExpanded": {
    "shortDescription": "A function that is executed after a row is expanded."
  },
  "dxTreeListOptions.onRowExpanding": {
    "shortDescription": "A function that is executed before a row is expanded."
  },
  "dxTreeListOptions.onRowInserted": {
    "shortDescription": "A function that is executed after a new row has been inserted into the data source."
  },
  "dxTreeListOptions.onRowInserting": {
    "shortDescription": "A function that is executed before a new row is inserted into the data source."
  },
  "dxTreeListOptions.onRowPrepared": {
    "shortDescription": "A function that is executed after a row is created."
  },
  "dxTreeListOptions.onRowRemoved": {
    "shortDescription": "A function that is executed after a row has been removed from the data source."
  },
  "dxTreeListOptions.onRowRemoving": {
    "shortDescription": "A function that is executed before a row is removed from the data source."
  },
  "dxTreeListOptions.onRowUpdated": {
    "shortDescription": "A function that is executed after a row has been updated in the data source."
  },
  "dxTreeListOptions.onRowUpdating": {
    "shortDescription": "A function that is executed before a row is updated in the data source."
  },
  "dxTreeListOptions.onRowValidating": {
    "shortDescription": "A function that is executed after cells in a row are validated against [validation rules](/api-reference/_hidden/GridBaseColumn/validationRules.md '{basewidgetpath}/Configuration/columns/#validationRules')."
  },
  "dxTreeListOptions.onSaved": {
    "shortDescription": "A function that is executed after row changes are saved."
  },
  "dxTreeListOptions.onSaving": {
    "shortDescription": "A function that is executed before pending row changes are saved."
  },
  "dxTreeListOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed after selecting a row or clearing its selection."
  },
  "dxTreeListOptions.onToolbarPreparing": {
    "shortDescription": "A function that is executed before the toolbar is created."
  },
  "dxTreeListOptions.paging": {
    "shortDescription": "Configures paging."
  },
  "dxTreeListOptions.paging.enabled": {
    "shortDescription": "Specifies whether paging is enabled."
  },
  "dxTreeListOptions.parentIdExpr": {
    "shortDescription": "Specifies which data field provides parent keys."
  },
  "dxTreeListOptions.remoteOperations": {
    "shortDescription": "Notifies the TreeList of the server's data processing operations. Applies only if data has a [plain structure](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/dataStructure.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#dataStructure')."
  },
  "dxTreeListOptions.remoteOperations.filtering": {
    "shortDescription": "Specifies whether filtering should be performed on the server."
  },
  "dxTreeListOptions.remoteOperations.grouping": {
    "shortDescription": "Specifies whether grouping should be performed on the server."
  },
  "dxTreeListOptions.remoteOperations.sorting": {
    "shortDescription": "Specifies whether sorting should be performed on the server."
  },
  "dxTreeListOptions.rootValue": {
    "shortDescription": "Specifies the root node's identifier. Applies if [dataStructure](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/dataStructure.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#dataStructure') is *\"plain\"*."
  },
  "dxTreeListOptions.scrolling": {
    "shortDescription": "Configures scrolling."
  },
  "dxTreeListOptions.scrolling.mode": {
    "shortDescription": "Specifies the scrolling mode."
  },
  "dxTreeListOptions.selection": {
    "shortDescription": "Configures runtime selection."
  },
  "dxTreeListOptions.selection.recursive": {
    "shortDescription": "Specifies whether selection is recursive."
  },
  "dxTreeListOptions.toolbar": {
    "shortDescription": "Configures the toolbar."
  },
  "dxTreeListPaging": {
    "shortDescription": "An object that configures paging."
  },
  "dxTreeListRowObject": {
    "shortDescription": "A grid row."
  },
  "dxTreeListRowObject.data": {
    "shortDescription": "A data object that the row visualizes."
  },
  "dxTreeListRowObject.isEditing": {
    "shortDescription": "Indicates whether the row is in the editing state."
  },
  "dxTreeListRowObject.isExpanded": {
    "shortDescription": "Indicates whether the row is expanded or collapsed. Available if [rowType](/api-reference/10%20UI%20Components/dxTreeList/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxTreeList/Row/#rowType') is *\"data\"*."
  },
  "dxTreeListRowObject.isNewRow": {
    "shortDescription": "Indicates that the row is added, but not yet saved. Available if [rowType](/api-reference/10%20UI%20Components/dxTreeList/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxTreeList/Row/#rowType') is *\"data\"*."
  },
  "dxTreeListRowObject.isSelected": {
    "shortDescription": "Indicates whether the row is selected. Available if [rowType](/api-reference/10%20UI%20Components/dxTreeList/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxTreeList/Row/#rowType') is *\"data\"* or *\"detail\"*."
  },
  "dxTreeListRowObject.key": {
    "shortDescription": "The row's key. Available if [rowType](/api-reference/10%20UI%20Components/dxTreeList/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxTreeList/Row/#rowType') is *\"data\"*, *\"detail\"* or *\"detailAdaptive\"*."
  },
  "dxTreeListRowObject.level": {
    "shortDescription": "The row's hierarchical level. Available if [rowType](/api-reference/10%20UI%20Components/dxTreeList/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxTreeList/Row/#rowType') is *\"data\"* or *\"detail\"*."
  },
  "dxTreeListRowObject.node": {
    "shortDescription": "The row's node. Available if [rowType](/api-reference/10%20UI%20Components/dxTreeList/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxTreeList/Row/#rowType') is *\"data\"* or *\"detail\"*."
  },
  "dxTreeListRowObject.rowIndex": {
    "shortDescription": "The row's *visible* index. This index is zero-based and available if [rowType](/api-reference/10%20UI%20Components/dxTreeList/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxTreeList/Row/#rowType') is *\"data\"*, *\"detail\"* or *\"detailAdaptive\"*."
  },
  "dxTreeListRowObject.rowType": {
    "shortDescription": "The row's type."
  },
  "dxTreeListRowObject.values": {
    "shortDescription": "Values displayed in the row's cells."
  },
  "dxTreeListScrolling": {
    "shortDescription": "Configures scrolling."
  },
  "dxTreeListToolbar": {
    "shortDescription": "Configures the toolbar."
  },
  "dxTreeListToolbar.disabled": {
    "shortDescription": "Specifies whether the toolbar responds to user interaction."
  },
  "dxTreeListToolbar.items": {
    "shortDescription": "Configures toolbar items."
  },
  "dxTreeListToolbar.visible": {
    "shortDescription": "Specifies whether the toolbar is visible."
  },
  "dxTreeListToolbarItem": {
    "shortDescription": "Configures toolbar items."
  },
  "dxTreeListToolbarItem.location": {
    "shortDescription": "Specifies a location for the item on the toolbar."
  },
  "dxTreeListToolbarItem.name": {
    "shortDescription": "A name used to identify the toolbar item."
  },
  "dxTreeMap": {
    "shortDescription": "The TreeMap is a UI component that displays hierarchical data by using nested rectangles."
  },
  "dxTreeMap.clearSelection()": {
    "shortDescription": "Deselects all nodes in the UI component."
  },
  "dxTreeMap.click": {
    "shortDescription": "Raised when a node is clicked or tapped."
  },
  "dxTreeMap.drill": {
    "shortDescription": "Raised when a user drills up or down."
  },
  "dxTreeMap.drillUp()": {
    "shortDescription": "Drills one level up."
  },
  "dxTreeMap.getCurrentNode()": {
    "shortDescription": "Gets the current node."
  },
  "dxTreeMap.getRootNode()": {
    "shortDescription": "Gets the root node."
  },
  "dxTreeMap.hideTooltip()": {
    "shortDescription": "Hides the [tooltip](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/tooltip '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/tooltip/')."
  },
  "dxTreeMap.hoverChanged": {
    "shortDescription": "Raised after the pointer enters or leaves a node."
  },
  "dxTreeMap.nodesInitialized": {
    "shortDescription": "Raised only once, after the nodes are initialized."
  },
  "dxTreeMap.nodesRendering": {
    "shortDescription": "Raised before the nodes are displayed and each time the collection of [active nodes](/api-reference/10%20UI%20Components/dxTreeMap/6%20Node/3%20Methods/isActive().md '/Documentation/ApiReference/UI_Components/dxTreeMap/Node/Methods/#isActive') is changed."
  },
  "dxTreeMap.resetDrillDown()": {
    "shortDescription": "Resets the drill down level."
  },
  "dxTreeMap.selectionChanged": {
    "shortDescription": "Raised when a node is selected or selection is canceled."
  },
  "dxTreeMapNode": {
    "shortDescription": "This section describes the **Node** object, which represents a treemap node."
  },
  "dxTreeMapNode.customize(options)": {
    "shortDescription": "Customizes the node."
  },
  "dxTreeMapNode.data": {
    "shortDescription": "The object from the [data source](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/dataSource.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/#dataSource') visualized by the node."
  },
  "dxTreeMapNode.drillDown()": {
    "shortDescription": "Drills down into the node."
  },
  "dxTreeMapNode.getAllChildren()": {
    "shortDescription": "Returns all nodes nested in the current node."
  },
  "dxTreeMapNode.getAllNodes()": {
    "shortDescription": "Returns all descendant nodes."
  },
  "dxTreeMapNode.getChild(index)": {
    "shortDescription": "Gets a specific node from a collection of direct descendants."
  },
  "dxTreeMapNode.getChildrenCount()": {
    "shortDescription": "Indicates how many direct descendants the current node has."
  },
  "dxTreeMapNode.getParent()": {
    "shortDescription": "Returns the parent node of the current node."
  },
  "dxTreeMapNode.index": {
    "shortDescription": "The index of the current node in the array of all nodes on the same level."
  },
  "dxTreeMapNode.isActive()": {
    "shortDescription": "Indicates whether the current node is active."
  },
  "dxTreeMapNode.isHovered()": {
    "shortDescription": "Indicates whether the node is in the hover state or not."
  },
  "dxTreeMapNode.isLeaf()": {
    "shortDescription": "Indicates whether the node is visualized by a tile or a group of tiles."
  },
  "dxTreeMapNode.isSelected()": {
    "shortDescription": "Indicates whether the node is selected or not."
  },
  "dxTreeMapNode.label()": {
    "shortDescription": "Returns the label of the node."
  },
  "dxTreeMapNode.label(label)": {
    "shortDescription": "Sets the label to the node."
  },
  "dxTreeMapNode.level": {
    "shortDescription": "The level that the current node occupies in the hierarchy of nodes."
  },
  "dxTreeMapNode.resetCustomization()": {
    "shortDescription": "Reverts the appearance of the node to the initial state."
  },
  "dxTreeMapNode.select(state)": {
    "shortDescription": "Sets the selection state of a node."
  },
  "dxTreeMapNode.showTooltip()": {
    "shortDescription": "Shows the [tooltip](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/tooltip '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/tooltip/')."
  },
  "dxTreeMapNode.value()": {
    "shortDescription": "Gets the raw value of the node."
  },
  "dxTreeMapOptions.childrenField": {
    "shortDescription": "Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only."
  },
  "dxTreeMapOptions.colorField": {
    "shortDescription": "Specifies the name of the [data source](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/dataSource.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/#dataSource') field that provides colors for tiles."
  },
  "dxTreeMapOptions.colorizer": {
    "shortDescription": "Manages the color settings."
  },
  "dxTreeMapOptions.colorizer.colorCodeField": {
    "shortDescription": "Specifies the name of the data source field whose values define the color of a tile. Applies only if the [type](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/colorizer/type.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/colorizer/#type') property is *\"gradient\"* or *\"range\"*."
  },
  "dxTreeMapOptions.colorizer.colorizeGroups": {
    "shortDescription": "Specifies whether or not all tiles in a group must be colored uniformly. Applies only if the [type](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/colorizer/type.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/colorizer/#type') property is *\"discrete\"*."
  },
  "dxTreeMapOptions.colorizer.palette": {
    "shortDescription": "Sets the palette to be used to colorize tiles."
  },
  "dxTreeMapOptions.colorizer.paletteExtensionMode": {
    "shortDescription": "Specifies what to do with colors in the [palette](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/colorizer/palette.md '{basewidgetpath}/Configuration/colorizer/#palette') when their number is less than the number of treemap tiles."
  },
  "dxTreeMapOptions.colorizer.range": {
    "shortDescription": "Allows you to paint tiles with similar values uniformly. Applies only if the [type](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/colorizer/type.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/colorizer/#type') property is *\"gradient\"* or *\"range\"*."
  },
  "dxTreeMapOptions.colorizer.type": {
    "shortDescription": "Specifies the colorizing algorithm."
  },
  "dxTreeMapOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxTreeMapOptions.group": {
    "shortDescription": "Configures groups."
  },
  "dxTreeMapOptions.group.border": {
    "shortDescription": "Configures the group borders."
  },
  "dxTreeMapOptions.group.border.color": {
    "shortDescription": "Colors the group borders."
  },
  "dxTreeMapOptions.group.border.width": {
    "shortDescription": "Specifies the width of the group borders in pixels."
  },
  "dxTreeMapOptions.group.color": {
    "shortDescription": "Colors the group headers."
  },
  "dxTreeMapOptions.group.headerHeight": {
    "shortDescription": "Specifies the height of the group headers in pixels."
  },
  "dxTreeMapOptions.group.hoverEnabled": {
    "shortDescription": "Specifies whether groups change their style when a user pauses on them."
  },
  "dxTreeMapOptions.group.hoverStyle": {
    "shortDescription": "Specifies the appearance of groups in the hover state."
  },
  "dxTreeMapOptions.group.hoverStyle.border": {
    "shortDescription": "Configures the appearance of the group borders in the hover state."
  },
  "dxTreeMapOptions.group.hoverStyle.border.color": {
    "shortDescription": "Colors the group borders in the hover state."
  },
  "dxTreeMapOptions.group.hoverStyle.border.width": {
    "shortDescription": "Specifies the width of the group borders in pixels. Applies to a group in the hover state."
  },
  "dxTreeMapOptions.group.hoverStyle.color": {
    "shortDescription": "Colors the group headers in the hover state."
  },
  "dxTreeMapOptions.group.label": {
    "shortDescription": "Configures the group labels."
  },
  "dxTreeMapOptions.group.label.font": {
    "shortDescription": "Specifies the font settings of the group labels."
  },
  "dxTreeMapOptions.group.label.textOverflow": {
    "shortDescription": "Specifies what to do with labels that overflow their group headers: hide, truncated them with ellipsis, or leave them as they are."
  },
  "dxTreeMapOptions.group.label.visible": {
    "shortDescription": "Changes the visibility of the group labels."
  },
  "dxTreeMapOptions.group.padding": {
    "shortDescription": "Specifies the distance in pixels between group borders and content."
  },
  "dxTreeMapOptions.group.selectionStyle": {
    "shortDescription": "Specifies the appearance of groups in the selected state."
  },
  "dxTreeMapOptions.group.selectionStyle.border": {
    "shortDescription": "Configures the appearance of the group borders in the selected state."
  },
  "dxTreeMapOptions.group.selectionStyle.border.color": {
    "shortDescription": "Colors the group borders in the selected state."
  },
  "dxTreeMapOptions.group.selectionStyle.border.width": {
    "shortDescription": "Specifies the width of the group borders in pixels. Applies to a group in the selected state."
  },
  "dxTreeMapOptions.group.selectionStyle.color": {
    "shortDescription": "Colors the group headers in the selected state."
  },
  "dxTreeMapOptions.hoverEnabled": {
    "shortDescription": "Specifies whether tiles and groups change their style when a user pauses on them."
  },
  "dxTreeMapOptions.idField": {
    "shortDescription": "Specifies the name of the data source field that provides IDs for items. Applies to plain [data sources](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/dataSource.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/#dataSource') only."
  },
  "dxTreeMapOptions.interactWithGroup": {
    "shortDescription": "Specifies whether the user will interact with a single tile or its group."
  },
  "dxTreeMapOptions.labelField": {
    "shortDescription": "Specifies the name of the [data source](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/dataSource.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/#dataSource') field that provides texts for tile and group labels."
  },
  "dxTreeMapOptions.layoutAlgorithm": {
    "shortDescription": "Specifies the layout algorithm."
  },
  "dxTreeMapOptions.layoutDirection": {
    "shortDescription": "Specifies the direction in which the items will be laid out."
  },
  "dxTreeMapOptions.margin": {
    "shortDescription": "Generates space around the UI component."
  },
  "dxTreeMapOptions.maxDepth": {
    "shortDescription": "Specifies how many hierarchical levels must be visualized."
  },
  "dxTreeMapOptions.onClick": {
    "shortDescription": "A function that is executed when a node is clicked or tapped."
  },
  "dxTreeMapOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTreeMapOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxTreeMapOptions.onDrill": {
    "shortDescription": "A function that is executed when a user drills up or down."
  },
  "dxTreeMapOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxTreeMapOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxTreeMapOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxTreeMapOptions.onHoverChanged": {
    "shortDescription": "A function that is executed after the pointer enters or leaves a node."
  },
  "dxTreeMapOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxTreeMapOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTreeMapOptions.onNodesInitialized": {
    "shortDescription": "A function that is executed only once, after the nodes are initialized."
  },
  "dxTreeMapOptions.onNodesRendering": {
    "shortDescription": "A function that is executed before the nodes are displayed and each time the collection of [active nodes](/api-reference/10%20UI%20Components/dxTreeMap/6%20Node/3%20Methods/isActive().md '/Documentation/ApiReference/UI_Components/dxTreeMap/Node/Methods/#isActive') is changed."
  },
  "dxTreeMapOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTreeMapOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a node is selected or selection is canceled."
  },
  "dxTreeMapOptions.parentField": {
    "shortDescription": "Specifies the name of the data source field that provides parent IDs for items. Applies to plain [data sources](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/dataSource.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/#dataSource') only."
  },
  "dxTreeMapOptions.selectionMode": {
    "shortDescription": "Specifies whether a single or multiple nodes can be in the selected state simultaneously."
  },
  "dxTreeMapOptions.tile": {
    "shortDescription": "Configures tiles."
  },
  "dxTreeMapOptions.tile.border": {
    "shortDescription": "Configures the tile borders."
  },
  "dxTreeMapOptions.tile.border.color": {
    "shortDescription": "Colors the tile borders."
  },
  "dxTreeMapOptions.tile.border.width": {
    "shortDescription": "Specifies the width of the tile borders in pixels."
  },
  "dxTreeMapOptions.tile.color": {
    "shortDescription": "Specifies a single color for all tiles."
  },
  "dxTreeMapOptions.tile.hoverStyle": {
    "shortDescription": "Specifies the appearance of tiles in the hover state."
  },
  "dxTreeMapOptions.tile.hoverStyle.border": {
    "shortDescription": "Configures the appearance of the tile borders in the hover state."
  },
  "dxTreeMapOptions.tile.hoverStyle.border.color": {
    "shortDescription": "Colors the tile borders in the hover state."
  },
  "dxTreeMapOptions.tile.hoverStyle.border.width": {
    "shortDescription": "Specifies the width of the tile borders in pixels. Applies to a tile in the hover state."
  },
  "dxTreeMapOptions.tile.hoverStyle.color": {
    "shortDescription": "Colors tiles in the hover state."
  },
  "dxTreeMapOptions.tile.label": {
    "shortDescription": "Configures the tile labels."
  },
  "dxTreeMapOptions.tile.label.font": {
    "shortDescription": "Specifies the font settings of the tile labels."
  },
  "dxTreeMapOptions.tile.label.textOverflow": {
    "shortDescription": "Specifies what to do with labels that overflow their tiles after applying [wordWrap](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/tile/label/wordWrap.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/tile/label/#wordWrap'): hide, truncate them and display an ellipsis, or do nothing."
  },
  "dxTreeMapOptions.tile.label.visible": {
    "shortDescription": "Changes the visibility of the tile labels."
  },
  "dxTreeMapOptions.tile.label.wordWrap": {
    "shortDescription": "Specifies how to wrap texts that do not fit into a single line."
  },
  "dxTreeMapOptions.tile.selectionStyle": {
    "shortDescription": "Specifies the appearance of tiles in the selected state."
  },
  "dxTreeMapOptions.tile.selectionStyle.border": {
    "shortDescription": "Configures the appearance of the tile borders in the selected state."
  },
  "dxTreeMapOptions.tile.selectionStyle.border.color": {
    "shortDescription": "Colors the tile borders in the selected state."
  },
  "dxTreeMapOptions.tile.selectionStyle.border.width": {
    "shortDescription": "Specifies the width of the tile borders in pixels. Applies to a tile in the selected state."
  },
  "dxTreeMapOptions.tile.selectionStyle.color": {
    "shortDescription": "Colors tiles in the selected state."
  },
  "dxTreeMapOptions.tooltip": {
    "shortDescription": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer."
  },
  "dxTreeMapOptions.tooltip.contentTemplate": {
    "shortDescription": "Specifies a custom template for a tooltip."
  },
  "dxTreeMapOptions.tooltip.customizeTooltip": {
    "shortDescription": "Allows you to change tooltip appearance."
  },
  "dxTreeMapOptions.valueField": {
    "shortDescription": "Specifies the name of the [data source](/api-reference/10%20UI%20Components/dxTreeMap/1%20Configuration/dataSource.md '/Documentation/ApiReference/UI_Components/dxTreeMap/Configuration/#dataSource') field that provides values for tiles."
  },
  "dxTreeMapTooltip": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxTreeView": {
    "shortDescription": "The TreeView UI component is a tree-like representation of textual data."
  },
  "dxTreeView.collapseAll()": {
    "shortDescription": "Collapses all items."
  },
  "dxTreeView.collapseItem(itemData)": {
    "shortDescription": "Collapses an item with a specific key."
  },
  "dxTreeView.collapseItem(itemElement)": {
    "shortDescription": "Collapses an item found using its DOM node."
  },
  "dxTreeView.collapseItem(key)": {
    "shortDescription": "Collapses an item with a specific key."
  },
  "dxTreeView.expandAll()": {
    "shortDescription": "Expands all items. If you [load items on demand](/concepts/05%20UI%20Components/TreeView/32%20Enhance%20Performance%20on%20Large%20Datasets.md '/Documentation/Guide/UI_Components/TreeView/Enhance_Performance_on_Large_Datasets/'), this method expands only the loaded items."
  },
  "dxTreeView.expandItem(itemData)": {
    "shortDescription": "Expands an item found using its data object."
  },
  "dxTreeView.expandItem(itemElement)": {
    "shortDescription": "Expands an item found using its DOM node."
  },
  "dxTreeView.expandItem(key)": {
    "shortDescription": "Expands an item with a specific key."
  },
  "dxTreeView.getNodes()": {
    "shortDescription": "Gets all nodes."
  },
  "dxTreeView.getScrollable()": {
    "shortDescription": "Gets the instance of the UI component's scrollable part."
  },
  "dxTreeView.getSelectedNodeKeys()": {
    "shortDescription": "Gets the keys of selected nodes."
  },
  "dxTreeView.getSelectedNodes()": {
    "shortDescription": "Gets selected nodes."
  },
  "dxTreeView.itemClick": {
    "shortDescription": "Raised when a collection item is clicked or tapped."
  },
  "dxTreeView.itemCollapsed": {
    "shortDescription": "Raised when a tree view item is collapsed."
  },
  "dxTreeView.itemContextMenu": {
    "shortDescription": "Raised when a collection item is right-clicked or pressed."
  },
  "dxTreeView.itemExpanded": {
    "shortDescription": "Raised when a tree view item is expanded."
  },
  "dxTreeView.itemHold": {
    "shortDescription": "Raised when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxTreeView.itemRendered": {
    "shortDescription": "Raised after a collection item is rendered."
  },
  "dxTreeView.itemSelectionChanged": {
    "shortDescription": "Raised when a tree view item is selected or selection is canceled."
  },
  "dxTreeView.scrollToItem(itemData)": {
    "shortDescription": "Scrolls the content to an item found using its data."
  },
  "dxTreeView.scrollToItem(itemElement)": {
    "shortDescription": "Scrolls the content to an item found using its DOM node."
  },
  "dxTreeView.scrollToItem(key)": {
    "shortDescription": "Scrolls the content to an item found using its key."
  },
  "dxTreeView.selectAll()": {
    "shortDescription": "Selects all nodes."
  },
  "dxTreeView.selectAllValueChanged": {
    "shortDescription": "Raised when the \"Select All\" check box value is changed."
  },
  "dxTreeView.selectionChanged": {
    "shortDescription": "Raised when a tree view item is selected or selection is canceled."
  },
  "dxTreeView.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxTreeView.selectItem(itemData)": {
    "shortDescription": "Selects a node found using its data object."
  },
  "dxTreeView.selectItem(itemElement)": {
    "shortDescription": "Selects a TreeView node found using its DOM node."
  },
  "dxTreeView.selectItem(key)": {
    "shortDescription": "Selects a node with a specific key."
  },
  "dxTreeView.unselectAll()": {
    "shortDescription": "Cancels the selection of all nodes."
  },
  "dxTreeView.unselectItem(itemData)": {
    "shortDescription": "Cancels the selection of a node found using its data object."
  },
  "dxTreeView.unselectItem(itemElement)": {
    "shortDescription": "Cancels the selection of a TreeView node found using its DOM node."
  },
  "dxTreeView.unselectItem(key)": {
    "shortDescription": "Cancels the selection of a node with a specific key."
  },
  "dxTreeView.updateDimensions()": {
    "shortDescription": "Updates the tree view scrollbars according to the current size of the UI component content."
  },
  "dxTreeViewItem.expanded": {
    "shortDescription": "Specifies whether or not the tree view item is displayed expanded."
  },
  "dxTreeViewItem.hasItems": {
    "shortDescription": "Specifies whether or not the tree view item has children."
  },
  "dxTreeViewItem.icon": {
    "shortDescription": "Specifies the tree view item's icon."
  },
  "dxTreeViewItem.id": {
    "shortDescription": "Holds the unique key of an item."
  },
  "dxTreeViewItem.items": {
    "shortDescription": "Specifies nested tree view items."
  },
  "dxTreeViewItem.parentId": {
    "shortDescription": "Holds the key of the parent item."
  },
  "dxTreeViewItem.selected": {
    "shortDescription": "Specifies whether the TreeView item should be displayed as selected."
  },
  "dxTreeViewNode": {
    "shortDescription": "A TreeView node."
  },
  "dxTreeViewNode.children": {
    "shortDescription": "Contains all the child nodes of the current node."
  },
  "dxTreeViewNode.disabled": {
    "shortDescription": "Equals to **true** if the node is disabled; otherwise **false**."
  },
  "dxTreeViewNode.expanded": {
    "shortDescription": "Equals **true** if the node is expanded; **false** if collapsed."
  },
  "dxTreeViewNode.itemData": {
    "shortDescription": "Contains the data source object corresponding to the node."
  },
  "dxTreeViewNode.key": {
    "shortDescription": "Contains the key value of the node."
  },
  "dxTreeViewNode.parent": {
    "shortDescription": "Refers to the parent node of the current node."
  },
  "dxTreeViewNode.selected": {
    "shortDescription": "Equals to **true** if the node is selected; **false** if not."
  },
  "dxTreeViewNode.text": {
    "shortDescription": "Contains the text displayed by the node."
  },
  "dxTreeViewOptions.animationEnabled": {
    "shortDescription": "Specifies whether or not to animate item collapsing and expanding."
  },
  "dxTreeViewOptions.collapseIcon": {
    "shortDescription": "Specifies a custom collapse icon."
  },
  "dxTreeViewOptions.createChildren": {
    "shortDescription": "Allows you to load nodes on demand."
  },
  "dxTreeViewOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxTreeViewOptions.dataStructure": {
    "shortDescription": "Notifies the UI component of the used data structure."
  },
  "dxTreeViewOptions.expandAllEnabled": {
    "shortDescription": "Specifies whether or not a user can expand all tree view items by the \"*\" hot key."
  },
  "dxTreeViewOptions.expandedExpr": {
    "shortDescription": "Specifies which data source field specifies whether an item is expanded."
  },
  "dxTreeViewOptions.expandEvent": {
    "shortDescription": "Specifies the event on which to expand/collapse a node."
  },
  "dxTreeViewOptions.expandIcon": {
    "shortDescription": "Specifies a custom expand icon."
  },
  "dxTreeViewOptions.expandNodesRecursive": {
    "shortDescription": "Specifies whether or not all parent nodes of an initially expanded node are displayed expanded."
  },
  "dxTreeViewOptions.hasItemsExpr": {
    "shortDescription": "Specifies the name of the data source item field whose value defines whether or not the corresponding [node](/api-reference/10%20UI%20Components/dxTreeView/4%20Node '/Documentation/ApiReference/UI_Components/dxTreeView/Node/') includes child nodes."
  },
  "dxTreeViewOptions.items": {
    "shortDescription": "An array of items displayed by the UI component."
  },
  "dxTreeViewOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxTreeViewOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxTreeViewOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxTreeViewOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxTreeViewOptions.onItemCollapsed": {
    "shortDescription": "A function that is executed when a tree view item is collapsed."
  },
  "dxTreeViewOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxTreeViewOptions.onItemExpanded": {
    "shortDescription": "A function that is executed when a tree view item is expanded."
  },
  "dxTreeViewOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxTreeViewOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxTreeViewOptions.onItemSelectionChanged": {
    "shortDescription": "A function that is executed when a single TreeView item is selected or selection is canceled."
  },
  "dxTreeViewOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxTreeViewOptions.onSelectAllValueChanged": {
    "shortDescription": "A function that is executed when the \"Select All\" check box value is changed. Applies only if [showCheckBoxesMode](/api-reference/10%20UI%20Components/dxTreeView/1%20Configuration/showCheckBoxesMode.md '/Documentation/ApiReference/UI_Components/dxTreeView/Configuration/#showCheckBoxesMode') is *\"selectAll\"* and [selectionMode](/api-reference/10%20UI%20Components/dxTreeView/1%20Configuration/selectionMode.md '/Documentation/ApiReference/UI_Components/dxTreeView/Configuration/#selectionMode') is *\"multiple\"*."
  },
  "dxTreeViewOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a TreeView item is selected or selection is canceled."
  },
  "dxTreeViewOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxTreeViewOptions.parentIdExpr": {
    "shortDescription": "Specifies the name of the data source item field for holding the parent key of the corresponding [node](/api-reference/10%20UI%20Components/dxTreeView/4%20Node '/Documentation/ApiReference/UI_Components/dxTreeView/Node/')."
  },
  "dxTreeViewOptions.rootValue": {
    "shortDescription": "Specifies the [parent ID](/api-reference/10%20UI%20Components/dxTreeView/1%20Configuration/parentIdExpr.md '/Documentation/ApiReference/UI_Components/dxTreeView/Configuration/#parentIdExpr') value of the root item."
  },
  "dxTreeViewOptions.scrollDirection": {
    "shortDescription": "A string value specifying available scrolling directions."
  },
  "dxTreeViewOptions.selectAllText": {
    "shortDescription": "Specifies the text displayed at the \"Select All\" check box."
  },
  "dxTreeViewOptions.selectByClick": {
    "shortDescription": "Specifies whether an item is selected if a user clicks it."
  },
  "dxTreeViewOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "dxTreeViewOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "dxTreeViewOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxTreeViewOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxTreeViewOptions.selectionMode": {
    "shortDescription": "Specifies item selection mode. Applies only if selection is enabled."
  },
  "dxTreeViewOptions.selectNodesRecursive": {
    "shortDescription": "Specifies whether all child nodes should be selected when their parent node is selected. Applies only if the [selectionMode](/api-reference/10%20UI%20Components/dxTreeView/1%20Configuration/selectionMode.md '/Documentation/ApiReference/UI_Components/dxTreeView/Configuration/#selectionMode') is *\"multiple\"*."
  },
  "dxTreeViewOptions.showCheckBoxesMode": {
    "shortDescription": "Specifies the checkbox display mode."
  },
  "dxTreeViewOptions.useNativeScrolling": {
    "shortDescription": "Specifies whether or not the UI component uses native scrolling."
  },
  "dxTreeViewOptions.virtualModeEnabled": {
    "shortDescription": "Enables the virtual mode in which nodes are loaded on demand. Use it to enhance the performance on large datasets."
  },
  "dxValidationGroup": {
    "shortDescription": "The ValidationGroup is a UI component that allows you to validate several editors simultaneously."
  },
  "dxValidationGroup.beginUpdate()": {
    "shortDescription": "Postpones rendering that can negatively affect performance until the [endUpdate()](/api-reference/10%20UI%20Components/Component/3%20Methods/endUpdate().md '{basewidgetpath}/Methods/#endUpdate') method is called."
  },
  "dxValidationGroup.defaultOptions(rule)": {
    "shortDescription": "Specifies the device-dependent default configuration properties for this component."
  },
  "dxValidationGroup.endUpdate()": {
    "shortDescription": "Refreshes the UI component after a call of the [beginUpdate()](/api-reference/10%20UI%20Components/Component/3%20Methods/beginUpdate().md '{basewidgetpath}/Methods/#beginUpdate') method."
  },
  "dxValidationGroup.reset()": {
    "shortDescription": "Resets the value and validation result of the editors that are included to the current validation group."
  },
  "dxValidationGroup.validate()": {
    "shortDescription": "Validates rules of the [validators](/api-reference/10%20UI%20Components/dxValidator '/Documentation/ApiReference/UI_Components/dxValidator/') that belong to the current validation group."
  },
  "dxValidationGroupOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxValidationGroupOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxValidationGroupOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxValidationGroupOptions.rtlEnabled": {
    "shortDescription": "Switches the UI component to a right-to-left representation."
  },
  "dxValidationGroupResult": {
    "shortDescription": "A group validation result."
  },
  "dxValidationGroupResult.brokenRules": {
    "shortDescription": "An array of the [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that failed."
  },
  "dxValidationGroupResult.complete": {
    "shortDescription": "A promise that is fulfilled when all async rules are validated."
  },
  "dxValidationGroupResult.isValid": {
    "shortDescription": "Indicates whether all the rules checked for the group are satisfied."
  },
  "dxValidationGroupResult.status": {
    "shortDescription": "Indicates the validation status."
  },
  "dxValidationGroupResult.validators": {
    "shortDescription": "[Validator](/api-reference/10%20UI%20Components/dxValidator '/Documentation/ApiReference/UI_Components/dxValidator/') UI components included in the validated group."
  },
  "dxValidationSummary": {
    "shortDescription": "A UI component for displaying the result of checking [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') for editors."
  },
  "dxValidationSummary.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "dxValidationSummary.getDataSource()": {
    "shortDescription": "Gets the [DataSource](/api-reference/30%20Data%20Layer/DataSource '/Documentation/ApiReference/Data_Layer/DataSource/') instance."
  },
  "dxValidationSummary.itemContextMenu": {
    "shortDescription": "Raised when a collection item is right-clicked or pressed."
  },
  "dxValidationSummary.itemHold": {
    "shortDescription": "Raised when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxValidationSummary.itemRendered": {
    "shortDescription": "Raised after a collection item is rendered."
  },
  "dxValidationSummary.refreshValidationGroup()": {
    "shortDescription": "Resubscribes the ValidationSummary to a target [ValidationGroup](/api-reference/10%20UI%20Components/dxValidationGroup '/Documentation/ApiReference/UI_Components/dxValidationGroup/')."
  },
  "dxValidationSummary.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "dxValidationSummary.selectionChanged": {
    "shortDescription": "Raised after selection changes."
  },
  "dxValidationSummary.selectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxValidationSummaryOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "dxValidationSummaryOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "dxValidationSummaryOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "dxValidationSummaryOptions.disabled": {
    "shortDescription": "Specifies whether the UI component responds to user interaction."
  },
  "dxValidationSummaryOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "dxValidationSummaryOptions.height": {
    "shortDescription": "Specifies the UI component's height."
  },
  "dxValidationSummaryOptions.hint": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on the UI component."
  },
  "dxValidationSummaryOptions.itemHoldTimeout": {
    "shortDescription": "The time period in milliseconds before the **onItemHold** event is raised."
  },
  "dxValidationSummaryOptions.keyExpr": {
    "shortDescription": "Specifies the key property that provides key values to access data items. Each key value must be unique."
  },
  "dxValidationSummaryOptions.noDataText": {
    "shortDescription": "Specifies the text or HTML markup displayed by the UI component if the item collection is empty."
  },
  "dxValidationSummaryOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "dxValidationSummaryOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxValidationSummaryOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxValidationSummaryOptions.onItemClick": {
    "shortDescription": "A function that is executed when a collection item is clicked or tapped."
  },
  "dxValidationSummaryOptions.onItemContextMenu": {
    "shortDescription": "A function that is executed when a collection item is right-clicked or pressed."
  },
  "dxValidationSummaryOptions.onItemHold": {
    "shortDescription": "A function that is executed when a collection item has been held for a [specified period](/api-reference/10%20UI%20Components/CollectionWidget/1%20Configuration/itemHoldTimeout.md '{basewidgetpath}/Configuration/#itemHoldTimeout')."
  },
  "dxValidationSummaryOptions.onItemRendered": {
    "shortDescription": "A function that is executed after a collection item is rendered."
  },
  "dxValidationSummaryOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxValidationSummaryOptions.onSelectionChanged": {
    "shortDescription": "A function that is called after selection changes."
  },
  "dxValidationSummaryOptions.onSelectionChanging": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxValidationSummaryOptions.rtlEnabled": {
    "shortDescription": "Switches the UI component to a right-to-left representation."
  },
  "dxValidationSummaryOptions.selectedIndex": {
    "shortDescription": "The index of the currently selected UI component item."
  },
  "dxValidationSummaryOptions.selectedItem": {
    "shortDescription": "The selected item object."
  },
  "dxValidationSummaryOptions.selectedItemKeys": {
    "shortDescription": "Specifies an array of currently selected item keys."
  },
  "dxValidationSummaryOptions.selectedItems": {
    "shortDescription": "An array of currently selected item objects."
  },
  "dxValidationSummaryOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "dxValidationSummaryOptions.validationGroup": {
    "shortDescription": "Specifies the validation group for which summary should be generated."
  },
  "dxValidationSummaryOptions.visible": {
    "shortDescription": "Specifies whether the UI component is visible."
  },
  "dxValidationSummaryOptions.width": {
    "shortDescription": "Specifies the UI component's width."
  },
  "dxValidator": {
    "shortDescription": "A UI component that is used to validate the associated DevExtreme editors against the defined validation rules."
  },
  "dxValidator.beginUpdate()": {
    "shortDescription": "Postpones rendering that can negatively affect performance until the [endUpdate()](/api-reference/10%20UI%20Components/Component/3%20Methods/endUpdate().md '{basewidgetpath}/Methods/#endUpdate') method is called."
  },
  "dxValidator.defaultOptions(rule)": {
    "shortDescription": "Specifies the device-dependent default configuration properties for this component."
  },
  "dxValidator.endUpdate()": {
    "shortDescription": "Refreshes the UI component after a call of the [beginUpdate()](/api-reference/10%20UI%20Components/Component/3%20Methods/beginUpdate().md '{basewidgetpath}/Methods/#beginUpdate') method."
  },
  "dxValidator.focus()": {
    "shortDescription": "Sets focus to the editor associated with the current Validator object."
  },
  "dxValidator.reset()": {
    "shortDescription": "Resets the value and validation result of the editor associated with the current Validator object."
  },
  "dxValidator.validate()": {
    "shortDescription": "Validates the value of the editor that is controlled by the current Validator object against the list of the specified [validation rules](/api-reference/10%20UI%20Components/dxValidator/1%20Configuration/validationRules.md '/Documentation/ApiReference/UI_Components/dxValidator/Configuration/#validationRules')."
  },
  "dxValidator.validated": {
    "shortDescription": "Raised after a value is validated."
  },
  "dxValidatorOptions.adapter": {
    "shortDescription": "An object that specifies what and when to validate, and how to apply the validation result."
  },
  "dxValidatorOptions.adapter.applyValidationResults": {
    "shortDescription": "A function that the Validator UI component calls after validating a specified value."
  },
  "dxValidatorOptions.adapter.bypass": {
    "shortDescription": "A function that returns a Boolean value specifying whether or not to bypass validation."
  },
  "dxValidatorOptions.adapter.focus": {
    "shortDescription": "A function that sets focus to a validated editor when the corresponding [ValidationSummary](/api-reference/10%20UI%20Components/dxValidationSummary '/Documentation/ApiReference/UI_Components/dxValidationSummary/') item is focused."
  },
  "dxValidatorOptions.adapter.getValue": {
    "shortDescription": "A function that returns the value to be validated."
  },
  "dxValidatorOptions.adapter.reset": {
    "shortDescription": "A function that resets the validated values."
  },
  "dxValidatorOptions.adapter.validationRequestsCallbacks": {
    "shortDescription": "Callbacks to be executed on the value validation."
  },
  "dxValidatorOptions.name": {
    "shortDescription": "Specifies the editor name to be used in the validation default messages."
  },
  "dxValidatorOptions.onValidated": {
    "shortDescription": "A function that is executed after a value is validated."
  },
  "dxValidatorOptions.rtlEnabled": {
    "shortDescription": "Switches the UI component to a right-to-left representation."
  },
  "dxValidatorOptions.validationGroup": {
    "shortDescription": "Specifies the validation group the editor will be related to."
  },
  "dxValidatorOptions.validationRules": {
    "shortDescription": "An array of validation rules to be checked for the editor with which the **dxValidator** object is associated."
  },
  "dxValidatorResult": {
    "shortDescription": "A validation result."
  },
  "dxValidatorResult.brokenRule": {
    "shortDescription": "A rule that failed to pass the check. Contains the first item from the [brokenRules](/api-reference/10%20UI%20Components/dxValidator/9%20Validation%20Result/brokenRules.md '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Result/#brokenRules') array."
  },
  "dxValidatorResult.brokenRules": {
    "shortDescription": "An array of the [validationRules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that failed to pass the check."
  },
  "dxValidatorResult.complete": {
    "shortDescription": "A promise that is fulfilled when all async rules are validated."
  },
  "dxValidatorResult.isValid": {
    "shortDescription": "Indicates whether all the checked rules are satisfied."
  },
  "dxValidatorResult.pendingRules": {
    "shortDescription": "An array of [async rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/AsyncRule '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/AsyncRule/') whose promises are not fulfilled or rejected. Contains items only when the [status](/api-reference/10%20UI%20Components/dxValidator/9%20Validation%20Result/status.md '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Result/#status') is *\"pending\"*."
  },
  "dxValidatorResult.status": {
    "shortDescription": "Indicates the validation status."
  },
  "dxValidatorResult.validationRules": {
    "shortDescription": "Validation rules specified for the Validator."
  },
  "dxValidatorResult.value": {
    "shortDescription": "The value being validated."
  },
  "dxVectorMap": {
    "shortDescription": "The VectorMap is a UI component that visualizes geographical locations. This UI component represents a geographical map that contains areas and markers. Areas embody continents and countries. Markers flag specific points on the map, for example, towns, cities or capitals."
  },
  "dxVectorMap.center()": {
    "shortDescription": "Gets the current map center coordinates."
  },
  "dxVectorMap.center(centerCoordinates)": {
    "shortDescription": "Sets the map center coordinates."
  },
  "dxVectorMap.centerChanged": {
    "shortDescription": "Raised each time the center coordinates are changed."
  },
  "dxVectorMap.clearSelection()": {
    "shortDescription": "Deselects all the selected area and markers on a map at once. The areas and markers are displayed in their initial style after."
  },
  "dxVectorMap.click": {
    "shortDescription": "Raised when any location on the map is clicked or tapped."
  },
  "dxVectorMap.convertCoordinates(x, y)": {
    "shortDescription": "Converts client area coordinates into map coordinates.",
    "depNote": "Use the convertToGeo(x, y) method instead."
  },
  "dxVectorMap.convertToGeo(x, y)": {
    "shortDescription": "Converts coordinates from pixels to the [dataSource](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/dataSource.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#dataSource') coordinate system."
  },
  "dxVectorMap.convertToXY(longitude, latitude)": {
    "shortDescription": "Converts coordinates from the [dataSource](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/dataSource.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#dataSource') coordinate system to pixels."
  },
  "dxVectorMap.getLayerByIndex(index)": {
    "shortDescription": "Gets a layer with a specific index."
  },
  "dxVectorMap.getLayerByName(name)": {
    "shortDescription": "Gets a layer with a specific name."
  },
  "dxVectorMap.getLayers()": {
    "shortDescription": "Gets all layers."
  },
  "dxVectorMap.selectionChanged": {
    "shortDescription": "Raised when a layer element is selected or selection is canceled."
  },
  "dxVectorMap.tooltipHidden": {
    "shortDescription": "Raised when a tooltip becomes hidden."
  },
  "dxVectorMap.tooltipShown": {
    "shortDescription": "Raised when a tooltip appears."
  },
  "dxVectorMap.viewport()": {
    "shortDescription": "Gets the current map viewport coordinates."
  },
  "dxVectorMap.viewport(viewportCoordinates)": {
    "shortDescription": "Sets the map viewport coordinates."
  },
  "dxVectorMap.zoomFactor()": {
    "shortDescription": "Gets the current zoom factor value."
  },
  "dxVectorMap.zoomFactor(zoomFactor)": {
    "shortDescription": "Sets the zoom factor value."
  },
  "dxVectorMap.zoomFactorChanged": {
    "shortDescription": "Raised each time the zoom factor is changed."
  },
  "dxVectorMapAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxVectorMapAnnotationConfig.name": {
    "shortDescription": "Specifies the annotation's name."
  },
  "dxVectorMapCommonAnnotationConfig": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxVectorMapCommonAnnotationConfig.coordinates": {
    "shortDescription": "Positions the annotation's center at specified geographic coordinates: [longitude, latitude]."
  },
  "dxVectorMapCommonAnnotationConfig.customizeTooltip": {
    "shortDescription": "Customizes the text and appearance of the annotation's tooltip."
  },
  "dxVectorMapCommonAnnotationConfig.template": {
    "shortDescription": "Specifies a custom template for the annotation. Applies only if the [type](/api-reference/_hidden/BaseWidgetAnnotationConfig/type.md '{basewidgetpath}/Configuration/annotations/#type') is *\"custom\"*."
  },
  "dxVectorMapCommonAnnotationConfig.tooltipTemplate": {
    "shortDescription": "Specifies a custom template for an annotation's tooltip."
  },
  "dxVectorMapLegends": {
    "shortDescription": "Configures map legends."
  },
  "dxVectorMapOptions.annotations": {
    "shortDescription": "Specifies the annotation collection."
  },
  "dxVectorMapOptions.background": {
    "shortDescription": "Specifies the properties for the map background."
  },
  "dxVectorMapOptions.background.borderColor": {
    "shortDescription": "Specifies a color for the background border."
  },
  "dxVectorMapOptions.background.color": {
    "shortDescription": "Specifies a color for the background."
  },
  "dxVectorMapOptions.bounds": {
    "shortDescription": "Specifies the positioning of a map in geographical coordinates."
  },
  "dxVectorMapOptions.center": {
    "shortDescription": "Specifies the geographical coordinates of the center for a map."
  },
  "dxVectorMapOptions.commonAnnotationSettings": {
    "shortDescription": "Specifies settings common for all annotations in the VectorMap."
  },
  "dxVectorMapOptions.controlBar": {
    "shortDescription": "Configures the control bar."
  },
  "dxVectorMapOptions.controlBar.borderColor": {
    "shortDescription": "Specifies a color for the outline of the control bar elements."
  },
  "dxVectorMapOptions.controlBar.color": {
    "shortDescription": "Specifies a color for the inner area of the control bar elements."
  },
  "dxVectorMapOptions.controlBar.enabled": {
    "shortDescription": "Specifies whether or not to display the control bar."
  },
  "dxVectorMapOptions.controlBar.horizontalAlignment": {
    "shortDescription": "Specifies the position of the control bar."
  },
  "dxVectorMapOptions.controlBar.margin": {
    "shortDescription": "Specifies the margin of the control bar in pixels."
  },
  "dxVectorMapOptions.controlBar.opacity": {
    "shortDescription": "Specifies the opacity of the [control bar](/concepts/05%20UI%20Components/VectorMap/10%20Visual%20Elements/30%20Control%20Bar.md '/Documentation/Guide/UI_Components/VectorMap/Visual_Elements/#Control_Bar')."
  },
  "dxVectorMapOptions.controlBar.panVisible": {
    "shortDescription": "Specifies whether the pan control is visible."
  },
  "dxVectorMapOptions.controlBar.verticalAlignment": {
    "shortDescription": "Specifies the position of the control bar."
  },
  "dxVectorMapOptions.controlBar.zoomVisible": {
    "shortDescription": "Specifies whether the zoom bar is visible."
  },
  "dxVectorMapOptions.customizeAnnotation": {
    "shortDescription": "Customizes an individual [annotation](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/commonAnnotationSettings '{basewidgetpath}/Configuration/annotations/')."
  },
  "dxVectorMapOptions.layers": {
    "shortDescription": "Specifies properties for VectorMap UI component layers."
  },
  "dxVectorMapOptions.layers.borderColor": {
    "shortDescription": "Specifies a color for the border of the layer elements."
  },
  "dxVectorMapOptions.layers.borderWidth": {
    "shortDescription": "Specifies the line width (for layers of a **line** type) or width of the layer elements border in pixels."
  },
  "dxVectorMapOptions.layers.color": {
    "shortDescription": "Specifies a color for layer elements."
  },
  "dxVectorMapOptions.layers.colorGroupingField": {
    "shortDescription": "Specifies the field that provides data to be used for coloring of layer elements."
  },
  "dxVectorMapOptions.layers.colorGroups": {
    "shortDescription": "Allows you to paint layer elements with similar attributes in the same color."
  },
  "dxVectorMapOptions.layers.customize": {
    "shortDescription": "A function that customizes each layer element individually."
  },
  "dxVectorMapOptions.layers.dataField": {
    "shortDescription": "Specifies the name of the attribute containing marker data. Setting this property makes sense only if the [layer type](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/type.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#type') is *\"marker\"* and the [elementType](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/elementType.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#elementType') is *\"bubble\"*, *\"pie\"* or *\"image\"*."
  },
  "dxVectorMapOptions.layers.dataSource": {
    "shortDescription": "Specifies a data source for the layer."
  },
  "dxVectorMapOptions.layers.elementType": {
    "shortDescription": "Specifies the type of a marker element. Setting this property makes sense only if the [layer type](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/type.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#type') is *\"marker\"*."
  },
  "dxVectorMapOptions.layers.hoveredBorderColor": {
    "shortDescription": "Specifies a color for the border of the layer element when it is hovered over."
  },
  "dxVectorMapOptions.layers.hoveredBorderWidth": {
    "shortDescription": "Specifies the pixel-measured line width (for layers of a **line** type) or width for the border of the layer element when it is [hovered over](/concepts/05%20UI%20Components/VectorMap/40%20End-User%20Interaction/30%20Hovering/10%20Hovering.md '/Documentation/Guide/UI_Components/VectorMap/End-User_Interaction/#Hovering')."
  },
  "dxVectorMapOptions.layers.hoveredColor": {
    "shortDescription": "Specifies a color for a layer element when it is hovered over."
  },
  "dxVectorMapOptions.layers.hoverEnabled": {
    "shortDescription": "Specifies whether or not to change the appearance of a layer element when it is hovered over."
  },
  "dxVectorMapOptions.layers.label": {
    "shortDescription": "Specifies marker label properties."
  },
  "dxVectorMapOptions.layers.label.dataField": {
    "shortDescription": "The name of the [data source](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/dataSource.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#dataSource') attribute containing marker texts."
  },
  "dxVectorMapOptions.layers.label.enabled": {
    "shortDescription": "Enables marker labels."
  },
  "dxVectorMapOptions.layers.label.font": {
    "shortDescription": "Specifies font properties for marker labels."
  },
  "dxVectorMapOptions.layers.maxSize": {
    "shortDescription": "Specifies the pixel-measured diameter of the marker that represents the biggest value. Setting this property makes sense only if the [layer type](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/type.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#type') is *\"marker\"*."
  },
  "dxVectorMapOptions.layers.minSize": {
    "shortDescription": "Specifies the pixel-measured diameter of the marker that represents the smallest value. Setting this property makes sense only if the [layer type](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/type.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#type') is *\"marker\"*."
  },
  "dxVectorMapOptions.layers.name": {
    "shortDescription": "Specifies the layer name."
  },
  "dxVectorMapOptions.layers.opacity": {
    "shortDescription": "Specifies the layer opacity (from 0 to 1)."
  },
  "dxVectorMapOptions.layers.palette": {
    "shortDescription": "The name of a predefined palette or a custom range of colors to be used as a palette."
  },
  "dxVectorMapOptions.layers.paletteIndex": {
    "shortDescription": "The position of a color in the **palette[]** array. Should not exceed the value of the [paletteSize](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/paletteSize.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#paletteSize') property."
  },
  "dxVectorMapOptions.layers.paletteSize": {
    "shortDescription": "Specifies the number of colors in a palette."
  },
  "dxVectorMapOptions.layers.selectedBorderColor": {
    "shortDescription": "Specifies a color for the border of the layer element when it is [selected](/concepts/05%20UI%20Components/VectorMap/40%20End-User%20Interaction/50%20Selection/10%20Selection.md '/Documentation/Guide/UI_Components/VectorMap/End-User_Interaction/#Selection')."
  },
  "dxVectorMapOptions.layers.selectedBorderWidth": {
    "shortDescription": "Specifies a pixel-measured line width (for layers of a **line** type) or width for the border of the layer element when it is [selected](/concepts/05%20UI%20Components/VectorMap/40%20End-User%20Interaction/50%20Selection/10%20Selection.md '/Documentation/Guide/UI_Components/VectorMap/End-User_Interaction/#Selection')."
  },
  "dxVectorMapOptions.layers.selectedColor": {
    "shortDescription": "Specifies a color for the layer element when it is [selected](/concepts/05%20UI%20Components/VectorMap/40%20End-User%20Interaction/50%20Selection/10%20Selection.md '/Documentation/Guide/UI_Components/VectorMap/End-User_Interaction/#Selection')."
  },
  "dxVectorMapOptions.layers.selectionMode": {
    "shortDescription": "Specifies whether single or multiple map elements can be selected on a vector map."
  },
  "dxVectorMapOptions.layers.size": {
    "shortDescription": "Specifies the size of markers. Setting this property makes sense only if the [layer type](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/type.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#type') is *\"marker\"* and the [elementType](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/elementType.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#elementType') is *\"dot\"*, *\"pie\"* or *\"image\"*."
  },
  "dxVectorMapOptions.layers.sizeGroupingField": {
    "shortDescription": "Specifies the field that provides data to be used for sizing [bubble](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/elementType.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#elementType') markers. Setting this property makes sense only if the [layer type](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/type.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#type') is *\"marker\"* and the [elementType](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/elementType.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#elementType') is *\"bubble\"*."
  },
  "dxVectorMapOptions.layers.sizeGroups": {
    "shortDescription": "Allows you to display [bubbles](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/elementType.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#elementType') with similar attributes in the same size. Setting this property makes sense only if the [layer type](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/type.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#type') is *\"marker\"* and the [elementType](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers/elementType.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/#elementType') is *\"bubble\"*."
  },
  "dxVectorMapOptions.layers.type": {
    "shortDescription": "Specifies layer type."
  },
  "dxVectorMapOptions.legends": {
    "shortDescription": "Configures map legends."
  },
  "dxVectorMapOptions.legends.customizeHint": {
    "shortDescription": "Specifies text for a hint that appears when a user hovers the mouse pointer over the text of a legend item."
  },
  "dxVectorMapOptions.legends.customizeItems": {
    "shortDescription": "Allows you to change the order and visibility of legend items."
  },
  "dxVectorMapOptions.legends.customizeText": {
    "shortDescription": "Specifies text for legend items."
  },
  "dxVectorMapOptions.legends.font": {
    "shortDescription": "Specifies the legend items' font properties."
  },
  "dxVectorMapOptions.legends.markerColor": {
    "shortDescription": "Specifies the color of item markers in the legend. The specified color applied only when the legend uses *'size'* [source](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/legends/source '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/legends/#source')."
  },
  "dxVectorMapOptions.legends.markerShape": {
    "shortDescription": "Specifies the shape of item markers."
  },
  "dxVectorMapOptions.legends.markerSize": {
    "shortDescription": "Specifies the marker's size in a legend item in pixels."
  },
  "dxVectorMapOptions.legends.markerTemplate": {
    "shortDescription": "Specifies an SVG element that serves as a custom legend item marker."
  },
  "dxVectorMapOptions.legends.source": {
    "shortDescription": "Specifies the source of data for the legend."
  },
  "dxVectorMapOptions.legends.source.grouping": {
    "shortDescription": "Specifies the type of the legend grouping."
  },
  "dxVectorMapOptions.legends.source.layer": {
    "shortDescription": "Specifies a layer to which the legend belongs."
  },
  "dxVectorMapOptions.margin": {
    "shortDescription": "Generates space around the UI component."
  },
  "dxVectorMapOptions.maxZoomFactor": {
    "shortDescription": "Specifies a map's maximum zoom factor."
  },
  "dxVectorMapOptions.onCenterChanged": {
    "shortDescription": "A function that is executed each time the center coordinates are changed."
  },
  "dxVectorMapOptions.onClick": {
    "shortDescription": "A function that is executed when any location on the map is clicked or tapped."
  },
  "dxVectorMapOptions.onDisposing": {
    "shortDescription": "A function that is executed before the UI component is [disposed of](/api-reference/10%20UI%20Components/DOMComponent/3%20Methods/dispose().md '{basewidgetpath}/Methods/#dispose')."
  },
  "dxVectorMapOptions.onDrawn": {
    "shortDescription": "A function that is executed when the UI component's rendering has finished."
  },
  "dxVectorMapOptions.onExported": {
    "shortDescription": "A function that is executed after the UI component is exported."
  },
  "dxVectorMapOptions.onExporting": {
    "shortDescription": "A function that is executed before the UI component is exported."
  },
  "dxVectorMapOptions.onFileSaving": {
    "shortDescription": "A function that is executed before a file with exported UI component is saved to the user's local storage."
  },
  "dxVectorMapOptions.onIncidentOccurred": {
    "shortDescription": "A function that is executed when an error or warning occurs."
  },
  "dxVectorMapOptions.onInitialized": {
    "shortDescription": "A function used in JavaScript frameworks to save the UI component instance."
  },
  "dxVectorMapOptions.onOptionChanged": {
    "shortDescription": "A function that is executed after a UI component property is changed."
  },
  "dxVectorMapOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed when a layer element is selected or selection is canceled."
  },
  "dxVectorMapOptions.onTooltipHidden": {
    "shortDescription": "A function that is executed when a tooltip becomes hidden."
  },
  "dxVectorMapOptions.onTooltipShown": {
    "shortDescription": "A function that is executed when a tooltip appears."
  },
  "dxVectorMapOptions.onZoomFactorChanged": {
    "shortDescription": "A function that is executed each time the zoom factor is changed."
  },
  "dxVectorMapOptions.panningEnabled": {
    "shortDescription": "Disables the [panning](/concepts/05%20UI%20Components/VectorMap/40%20End-User%20Interaction/10%20Panning '/Documentation/Guide/UI_Components/VectorMap/End-User_Interaction/#Panning') capability."
  },
  "dxVectorMapOptions.projection": {
    "shortDescription": "Specifies the map projection."
  },
  "dxVectorMapOptions.tooltip": {
    "shortDescription": "Configures tooltips."
  },
  "dxVectorMapOptions.tooltip.contentTemplate": {
    "shortDescription": "Specifies a custom template for a tooltip."
  },
  "dxVectorMapOptions.tooltip.customizeTooltip": {
    "shortDescription": "Specifies text and appearance of a set of tooltips."
  },
  "dxVectorMapOptions.tooltip.format": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "dxVectorMapOptions.touchEnabled": {
    "shortDescription": "Specifies whether the map should respond to touch gestures."
  },
  "dxVectorMapOptions.wheelEnabled": {
    "shortDescription": "Specifies whether or not the map should respond when a user rolls the mouse wheel."
  },
  "dxVectorMapOptions.zoomFactor": {
    "shortDescription": "Specifies a number that is used to zoom a map initially."
  },
  "dxVectorMapOptions.zoomingEnabled": {
    "shortDescription": "Disables the [zooming](/concepts/05%20UI%20Components/VectorMap/40%20End-User%20Interaction/20%20Zooming/10%20Zooming.md '/Documentation/Guide/UI_Components/VectorMap/End-User_Interaction/#Zooming') capability."
  },
  "dxVectorMapTooltip": {
    "shortDescription": "Configures tooltips."
  },
  "EditingBase": {
    "shortDescription": "Overriden."
  },
  "EditingTextsBase": {
    "shortDescription": "Contains properties that specify texts for editing-related UI elements."
  },
  "Editor": {
    "shortDescription": "A base class for editors."
  },
  "Editor.clear()": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/Editor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the default value."
  },
  "Editor.reset(value)": {
    "shortDescription": "Resets the [value](/api-reference/10%20UI%20Components/Editor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') property to the value passed as an argument."
  },
  "Editor.valueChanged": {
    "shortDescription": "Raised after the UI component's [value](/api-reference/10%20UI%20Components/Editor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "EditorOptions.isDirty": {
    "shortDescription": "Specifies whether the component's current value differs from the initial value."
  },
  "EditorOptions.isValid": {
    "shortDescription": "Specifies or indicates whether the editor's value is valid."
  },
  "EditorOptions.name": {
    "shortDescription": "The value to be assigned to the `name` attribute of the underlying HTML element."
  },
  "EditorOptions.onValueChanged": {
    "shortDescription": "A function that is executed after the UI component's [value](/api-reference/10%20UI%20Components/Editor/1%20Configuration/value.md '{basewidgetpath}/Configuration/#value') is changed."
  },
  "EditorOptions.readOnly": {
    "shortDescription": "Specifies whether the editor is read-only."
  },
  "EditorOptions.stylingMode": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "EditorOptions.validationError": {
    "shortDescription": "Information on the broken [validation rule](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/'). Contains the first item from the [validationErrors](/api-reference/10%20UI%20Components/Editor/1%20Configuration/validationErrors.md '{basewidgetpath}/Configuration/#validationErrors') array."
  },
  "EditorOptions.validationErrors": {
    "shortDescription": "An array of the [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that failed."
  },
  "EditorOptions.validationMessageMode": {
    "shortDescription": "Specifies how the message about the [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that are not satisfied by this editor's value is displayed."
  },
  "EditorOptions.validationMessagePosition": {
    "shortDescription": "Specifies the position of a validation message relative to the component. The validation message describes the [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that this component's value does not satisfy."
  },
  "EditorOptions.validationStatus": {
    "shortDescription": "Indicates or specifies the current validation status."
  },
  "EditorOptions.value": {
    "shortDescription": "Specifies the UI component's value."
  },
  "EdmLiteral": {
    "shortDescription": "The **EdmLiteral** is an object for working with primitive data types from the OData's <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview/#AbstractTypeSystem\" target=\"_blank\">Abstract Type System</a> that are not supported in JavaScript."
  },
  "EdmLiteral.ctor(value)": {
    "shortDescription": "Creates an **EdmLiteral** instance with a new value."
  },
  "EdmLiteral.valueOf()": {
    "shortDescription": "Gets the **EdmLiteral**'s value converted to a string."
  },
  "EmailRule": {
    "shortDescription": "A validation rule that requires that the validated field match the Email pattern."
  },
  "EmailRule.ignoreEmptyValue": {
    "shortDescription": "If set to **true**, empty values are valid."
  },
  "EmailRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "EmailRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"email\"* to use the **EmailRule**."
  },
  "EndpointSelector": {
    "shortDescription": "The **EndpointSelector** is an object for managing OData endpoints in your application."
  },
  "EndpointSelector.ctor(options)": {
    "shortDescription": ""
  },
  "EndpointSelector.urlFor(key)": {
    "shortDescription": "Gets an endpoint with a specific key."
  },
  "Enums": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Enums.AggregatedPointsPosition": {
    "shortDescription": "Specifies the start position of the aggregated series points in the aggregation interval."
  },
  "Enums.AllDayPanelMode": {
    "shortDescription": "Specifies the display mode for the **All day** panel."
  },
  "Enums.AnimationEaseMode": {
    "shortDescription": "Specifies the animation easing mode."
  },
  "Enums.AnimationType": {
    "shortDescription": "Specifies the animation type."
  },
  "Enums.AnnotationType": {
    "shortDescription": "Specifies whether the annotation displays text, an image, or a template."
  },
  "Enums.ApplyChangesMode": {
    "shortDescription": "Specifies when to apply changes made in the field chooser to the PivotGrid."
  },
  "Enums.ApplyFilterMode": {
    "shortDescription": "Specifies when to apply a filter."
  },
  "Enums.ApplyValueMode": {
    "shortDescription": "Specifies the way an end-user applies the selected value."
  },
  "Enums.ArgumentAxisHoverMode": {
    "shortDescription": "Specifies chart elements to be highlighted when a user points to an axis label."
  },
  "Enums.AutoZoomMode": {
    "shortDescription": "Specifies how the Diagram UI component automatically zooms the work area."
  },
  "Enums.AxisScale": {
    "shortDescription": "Specifies the type of the scale."
  },
  "Enums.AxisScaleType": {
    "shortDescription": "Specifies the type of the axis."
  },
  "Enums.BackgroundImageLocation": {
    "shortDescription": "Specifies a location for the image in the background of a range selector."
  },
  "Enums.BoxDirection": {
    "shortDescription": "Specifies the direction of item positioning in the UI component."
  },
  "Enums.ButtonStyle": {
    "shortDescription": "Specifies how the button is styled."
  },
  "Enums.ButtonType": {
    "shortDescription": "Specifies the button type."
  },
  "Enums.CalendarSelectionMode": {
    "shortDescription": "Specifies one of three selection modes: single, multiple, or range."
  },
  "Enums.CalendarZoomLevel": {
    "shortDescription": "Specifies the current calendar zoom level."
  },
  "Enums.CellAppointmentsLimit": {
    "shortDescription": "Specifies the limit of full-sized appointments displayed per cell. Applies to all views except *\"agenda\"*."
  },
  "Enums.ChartAxisScale": {
    "shortDescription": "Specifies the type of the value axis."
  },
  "Enums.ChartBubbleSeriesAggregationMethod": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "Enums.ChartFinancialSeriesAggregationMethod": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "Enums.ChartLabelDisplayMode": {
    "shortDescription": "Specifies how to rotate or stagger horizontal axis labels."
  },
  "Enums.ChartRangeSeriesAggregationMethod": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "Enums.ChartsAxisLabelOverlap": {
    "shortDescription": "Decides how to arrange axis labels when there is not enough space to display all of them."
  },
  "Enums.ChartsDataType": {
    "shortDescription": "Specifies the type of axis values."
  },
  "Enums.ChartSeriesAggregationMethod": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "Enums.ChartSingleValueSeriesAggregationMethod": {
    "shortDescription": "Specifies how to aggregate series points."
  },
  "Enums.ChartsLabelOverlap": {
    "shortDescription": "Specifies how the chart must behave when [series point labels](/concepts/05%20UI%20Components/Chart/15%20Point%20Labels/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Point_Labels/Overview/') overlap."
  },
  "Enums.ChartTooltipLocation": {
    "shortDescription": "Specifies whether the tooltip must be located in the center of a series point or on its edge."
  },
  "Enums.ChartZoomAndPanMode": {
    "shortDescription": "Specifies whether users are allowed to zoom and/or pan the argument and value axis."
  },
  "Enums.CircularGaugeElementOrientation": {
    "shortDescription": "Specifies the orientation of scale ticks."
  },
  "Enums.CircularGaugeLabelOverlap": {
    "shortDescription": "Specifies which label to hide in case of overlapping."
  },
  "Enums.CollisionResolution": {
    "shortDescription": "Specifies how to resolve horizontal or vertical collisions."
  },
  "Enums.CollisionResolutionCombination": {
    "shortDescription": "Specifies how to resolve collisions - when the overlay element exceeds the [boundary](/api-reference/50%20Common/Object%20Structures/positionConfig/boundary.md '/Documentation/ApiReference/Common/Object_Structures/PositionConfig/#boundary') element."
  },
  "Enums.ColumnChooserMode": {
    "shortDescription": "Specifies how a user manages columns using the column chooser."
  },
  "Enums.ColumnResizeMode": {
    "shortDescription": "Specifies how the UI component resizes columns."
  },
  "Enums.Command": {
    "shortDescription": "Specifies the Diagram command's identifier."
  },
  "Enums.ComparisonOperator": {
    "shortDescription": "Specifies the operator to be used for comparing the validated value with the [target](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/CompareRule/comparisonTarget.md '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/CompareRule/#comparisonTarget')."
  },
  "Enums.ConnectorLineEnd": {
    "shortDescription": "Specifies the default tip of a connector's start/end point."
  },
  "Enums.ConnectorLineType": {
    "shortDescription": "Specifies the default type of a connector."
  },
  "Enums.ConnectorPosition": {
    "shortDescription": "The position of the connector in the processed point."
  },
  "Enums.ContextSubmenuDirection": {
    "shortDescription": "Specifies the submenu direction."
  },
  "Enums.CrosswiseDistribution": {
    "shortDescription": "Specifies how UI component items are aligned cross-wise."
  },
  "Enums.DashStyle": {
    "shortDescription": "Sets a dash style for the chart elements."
  },
  "Enums.DataChangeType": {
    "shortDescription": "Data change type."
  },
  "Enums.DataGridCommandColumnType": {
    "shortDescription": "Specifies the [command column](/concepts/05%20UI%20Components/DataGrid/15%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/DataGrid/Columns/Column_Types/Command_Columns/') that this object customizes."
  },
  "Enums.DataGridExportFormat": {
    "shortDescription": "Specifies the availability and captions of data export buttons."
  },
  "Enums.DataGridPredefinedColumnButton": {
    "shortDescription": "The name used to identify a built-in button."
  },
  "Enums.DataGridPredefinedToolbarItem": {
    "shortDescription": "A name used to identify the toolbar item."
  },
  "Enums.DataGridScrollMode": {
    "shortDescription": "Specifies the scrolling mode."
  },
  "Enums.DataLayoutType": {
    "shortDescription": "Specifies an auto-layout algorithm that the UI component uses to build a diagram."
  },
  "Enums.DataRenderMode": {
    "shortDescription": "Specifies the rendering mode for columns and rows."
  },
  "Enums.DataStructure": {
    "shortDescription": "Specifies the data structure."
  },
  "Enums.DataType": {
    "shortDescription": "Specifies a data type for a column/field value."
  },
  "Enums.DatePickerType": {
    "shortDescription": "Specifies the type of the date/time picker."
  },
  "Enums.DateType": {
    "shortDescription": "A format used to display date/time information."
  },
  "Enums.DiagramExportFormat": {
    "shortDescription": "Exports the diagram to an image format."
  },
  "Enums.Direction": {
    "shortDescription": "Specifies the animation direction for the \"slideIn\" and \"slideOut\" animation types."
  },
  "Enums.DiscreteAxisDivisionMode": {
    "shortDescription": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
  },
  "Enums.DisplayMode": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Enums.Distribution": {
    "shortDescription": "Specifies how UI component items are aligned along the main direction."
  },
  "Enums.DragDirection": {
    "shortDescription": "Specifies the directions in which an item/row can be dragged."
  },
  "Enums.DragHighlight": {
    "shortDescription": "Specifies how to highlight the item/row's drop position."
  },
  "Enums.DropDownPredefinedButton": {
    "shortDescription": "Specifies a custom button for an input text field."
  },
  "Enums.EditorStyle": {
    "shortDescription": "Specifies how the UI component's text field is styled."
  },
  "Enums.EnterKeyAction": {
    "shortDescription": "Specifies whether the Enter key switches the cell or row to the edit state or moves focus in the **enterKeyDirection**."
  },
  "Enums.EnterKeyDirection": {
    "shortDescription": "Specifies the direction in which to move focus when a user presses Enter."
  },
  "Enums.EventKeyModifier": {
    "shortDescription": "Specifies the key that enables panning when [dragToZoom](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/zoomAndPan/dragToZoom.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/zoomAndPan/#dragToZoom') is **true**."
  },
  "Enums.EventName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Enums.eventTypes": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Enums.ExportFormat": {
    "shortDescription": "Specifies a set of export formats."
  },
  "Enums.FieldChooserLayout": {
    "shortDescription": "Specifies the field chooser layout."
  },
  "Enums.FileManagerItemViewMode": {
    "shortDescription": "Specifies the file system representation mode."
  },
  "Enums.FileManagerPredefinedContextMenuItem": {
    "shortDescription": "Configures context menu items' settings."
  },
  "Enums.FileManagerPredefinedToolbarItem": {
    "shortDescription": "Configures toolbar items' settings."
  },
  "Enums.FileManagerViewArea": {
    "shortDescription": "Specifies the view area."
  },
  "Enums.FileUploadMode": {
    "shortDescription": "Specifies how the UI component uploads files."
  },
  "Enums.FilterBuilderOperation": {
    "shortDescription": "Specifies a set of available filter operations."
  },
  "Enums.FilterOperation": {
    "shortDescription": "Specifies available filter operations."
  },
  "Enums.FilterType": {
    "shortDescription": "Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values."
  },
  "Enums.FinancialChartReductionLevel": {
    "shortDescription": "Specifies whether high, low, open or close prices of points should be compared."
  },
  "Enums.FirstDayOfWeek": {
    "shortDescription": "Specifies the first day of a week."
  },
  "Enums.FixedPosition": {
    "shortDescription": "Specifies a position type for fixed columns."
  },
  "Enums.FloatingActionButtonDirection": {
    "shortDescription": "Specifies the direction in which to open the speed dial menu."
  },
  "Enums.Format": {
    "shortDescription": "Specifies a predefined format."
  },
  "Enums.FormItemComponent": {
    "shortDescription": "Specifies which editor UI component is used to display and edit the form item value."
  },
  "Enums.FormItemType": {
    "shortDescription": "Specifies the item's type."
  },
  "Enums.FormLabelMode": {
    "shortDescription": "Specifies a display mode for [item labels](/api-reference/10%20UI%20Components/dxForm/5%20Item%20Types/SimpleItem/label '/Documentation/ApiReference/UI_Components/dxForm/Item_Types/SimpleItem/label/')."
  },
  "Enums.FunnelAlgorithm": {
    "shortDescription": "Specifies the algorithm for building the funnel."
  },
  "Enums.GanttPdfExportDateRange": {
    "shortDescription": "Specifies the date range for which to export tasks."
  },
  "Enums.GanttPdfExportMode": {
    "shortDescription": "Specifies which part of the component to export (chart area, tree list area, or the entire component)."
  },
  "Enums.GanttPredefinedContextMenuItem": {
    "shortDescription": "Configures context menu item settings."
  },
  "Enums.GanttPredefinedToolbarItem": {
    "shortDescription": "Configures toolbar items' settings."
  },
  "Enums.GanttRenderScaleType": {
    "shortDescription": "Specifies a scale type to render."
  },
  "Enums.GanttScaleType": {
    "shortDescription": "Specifies the zoom level of tasks in the Gantt chart."
  },
  "Enums.GanttTaskTitlePosition": {
    "shortDescription": "Specifies a task's title position."
  },
  "Enums.GaugeIndicatorType": {
    "shortDescription": "Specifies the gauge indicator type."
  },
  "Enums.GridsEditMode": {
    "shortDescription": "Specifies how a user edits data."
  },
  "Enums.GridsEditRefreshMode": {
    "shortDescription": "Specifies operations that are performed after saving changes."
  },
  "Enums.GroupExpandMode": {
    "shortDescription": "Specifies the event on which a group will be expanded/collapsed."
  },
  "Enums.GroupingInterval": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Enums.GroupOperation": {
    "shortDescription": "Specifies a set of available group operations."
  },
  "Enums.HatchDirection": {
    "shortDescription": "Specifies the direction of hatching lines."
  },
  "Enums.HeaderFilterGroupInterval": {
    "shortDescription": "Specifies how the header filter combines values into groups."
  },
  "Enums.HorizontalAlignment": {
    "shortDescription": "Specifies a position in the horizontal direction."
  },
  "Enums.HorizontalEdge": {
    "shortDescription": "Specifies the position of a component's element relative to the component in the horizontal direction."
  },
  "Enums.HtmlEditorFormat": {
    "shortDescription": "Specifies a format of the selected content."
  },
  "Enums.HtmlEditorImageUploadMode": {
    "shortDescription": "Specifies how the HtmlEditor UI component uploads files."
  },
  "Enums.HtmlEditorImageUploadTab": {
    "shortDescription": "Specifies the tab's name."
  },
  "Enums.HtmlEditorPredefinedContextMenuItem": {
    "shortDescription": "Configures context menu items."
  },
  "Enums.HtmlEditorPredefinedToolbarItem": {
    "shortDescription": "Configures toolbar items."
  },
  "Enums.HttpMethod": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Enums.ItemDeleteMode": {
    "shortDescription": "Specifies the way a user can delete items from the list."
  },
  "Enums.ItemType": {
    "shortDescription": "Returns the type of the item."
  },
  "Enums.LabelLocation": {
    "shortDescription": "Specifies the location of a label against the editor."
  },
  "Enums.LabelMode": {
    "shortDescription": "Specifies the label's display mode."
  },
  "Enums.LabelOverlap": {
    "shortDescription": "Decides how to arrange scale/axis labels when there is not enough space to keep all of them."
  },
  "Enums.LabelPosition": {
    "shortDescription": "Specifies a label position relative to the chart."
  },
  "Enums.LegendHoverMode": {
    "shortDescription": "Specifies what series elements to highlight when a corresponding item in the legend is hovered over."
  },
  "Enums.LegendMarkerState": {
    "shortDescription": "The marker's state."
  },
  "Enums.ListMenuMode": {
    "shortDescription": "Specifies whether an item context menu is shown when a user holds or swipes an item."
  },
  "Enums.LocateInMenuMode": {
    "shortDescription": "Specifies when to display an item in the toolbar's overflow menu."
  },
  "Enums.MapProvider": {
    "shortDescription": "The name of the current map data provider."
  },
  "Enums.MapType": {
    "shortDescription": "The type of a map to display."
  },
  "Enums.MaskMode": {
    "shortDescription": "Specifies when the UI component shows the mask."
  },
  "Enums.Mode": {
    "shortDescription": "Specifies an 'auto' mode."
  },
  "Enums.ModelOperation": {
    "shortDescription": "Specifies the edit operation."
  },
  "Enums.NewRowPosition": {
    "shortDescription": "Specifies a position for a new row."
  },
  "Enums.NumberBoxPredefinedButton": {
    "shortDescription": "Specifies a custom button for the input text field."
  },
  "Enums.NumberBoxType": {
    "shortDescription": "Specifies the value to be passed to the <a href=\"http://www.w3schools.com/tags/att_input_type.asp\" target=\"_blank\">type</a> attribute of the underlying `<input>` element."
  },
  "Enums.OpenedStateMode": {
    "shortDescription": "Specifies how the drawer interacts with the view in the opened state."
  },
  "Enums.Orientation": {
    "shortDescription": "Specifies whether the UI component is oriented horizontally or vertically."
  },
  "Enums.PageLoadMode": {
    "shortDescription": "Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the \"next\" button is clicked."
  },
  "Enums.PageOrientation": {
    "shortDescription": "Specifies the page orientation."
  },
  "Enums.PagerPageSize": {
    "shortDescription": "Specifies the available page sizes in the page size selector."
  },
  "Enums.Palette": {
    "shortDescription": "Sets the palette to be used for colorizing chart elements."
  },
  "Enums.PaletteColorSet": {
    "shortDescription": "Returns a subset of palette colors."
  },
  "Enums.PaletteExtensionMode": {
    "shortDescription": "Specifies how to extend the palette when it contains less colors than the number of chart points/series."
  },
  "Enums.PanelLocation": {
    "shortDescription": "Specifies the drawer's position in relation to the view."
  },
  "Enums.PanelVisibility": {
    "shortDescription": "Specifies the panel's visibility."
  },
  "Enums.PermutedUnionLength": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Enums.PieChartAnnotationLocation": {
    "shortDescription": "Specifies an annotation's position on the surface of a specific [argument](/api-reference/_hidden/dxPieChartCommonAnnotationConfig/argument.md '/Documentation/ApiReference/UI_Components/dxPieChart/Configuration/commonAnnotationSettings/#argument')."
  },
  "Enums.PieChartLegendHoverMode": {
    "shortDescription": "Specifies what chart elements to highlight when a corresponding item in the legend is hovered over."
  },
  "Enums.PieChartSegmentDirection": {
    "shortDescription": "Specifies the direction that the pie chart segments will occupy."
  },
  "Enums.PieChartSeriesInteractionMode": {
    "shortDescription": "Specifies the chart elements to highlight when a series is hovered over."
  },
  "Enums.PieChartType": {
    "shortDescription": "Specifies the type of the pie chart series."
  },
  "Enums.PivotGridArea": {
    "shortDescription": "Specifies the field's area."
  },
  "Enums.PivotGridDataFieldArea": {
    "shortDescription": "Specifies the area to which data field headers must belong."
  },
  "Enums.PivotGridDataType": {
    "shortDescription": "Specifies field values for a specific data type."
  },
  "Enums.PivotGridGroupInterval": {
    "shortDescription": "Specifies how the field's values are combined into groups for the [headers](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers')."
  },
  "Enums.PivotGridRowHeaderLayout": {
    "shortDescription": "Specifies the layout of items in the [row header](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers')."
  },
  "Enums.PivotGridRunningTotalMode": {
    "shortDescription": "Specifies whether to calculate the running total by rows or by columns."
  },
  "Enums.PivotGridSortBy": {
    "shortDescription": "Specifies how to sort the field's values in the [headers](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers')."
  },
  "Enums.PivotGridStoreType": {
    "shortDescription": "Specifies the **PivotGridDataSource**'s storage type."
  },
  "Enums.PivotGridSummaryDisplayMode": {
    "shortDescription": "Specifies a predefined post-processing function."
  },
  "Enums.PivotGridTotalDisplayMode": {
    "shortDescription": "Specifies where to show the total rows or columns."
  },
  "Enums.PointInteractionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user interacts with a series point."
  },
  "Enums.PointSymbol": {
    "shortDescription": "Specifies which symbol should represent series points in scatter, line- and area-like series."
  },
  "Enums.PolarChartSeriesType": {
    "shortDescription": "Sets a series type."
  },
  "Enums.Position": {
    "shortDescription": "Specifies the position of the component's element."
  },
  "Enums.PositionAlignment": {
    "shortDescription": "Positions the UI component."
  },
  "Enums.RecurrenceEditMode": {
    "shortDescription": "Specifies the edit mode for recurring appointments."
  },
  "Enums.RelativePosition": {
    "shortDescription": "Specifies the position of a chart element on the plot."
  },
  "Enums.RequestEditOperationReason": {
    "shortDescription": "Specifies the reason to request edit operation."
  },
  "Enums.ResizeHandle": {
    "shortDescription": "Specifies which borders of the UI component element are used as a handle."
  },
  "Enums.RevealMode": {
    "shortDescription": "Specifies the drawer's reveal mode."
  },
  "Enums.RouteMode": {
    "shortDescription": "Specifies a transportation mode to be used in the displayed route."
  },
  "Enums.SankeyColorMode": {
    "shortDescription": "Specifies how to color links."
  },
  "Enums.ScaleBreakLineStyle": {
    "shortDescription": "Specifies the scale breaks' line style."
  },
  "Enums.ScrollbarMode": {
    "shortDescription": "Specifies when the UI component shows the scrollbar."
  },
  "Enums.ScrollDirection": {
    "shortDescription": "Specifies the available scrolling directions."
  },
  "Enums.ScrollMode": {
    "shortDescription": "Specifies the scrolling mode."
  },
  "Enums.SearchMode": {
    "shortDescription": "Specifies a comparison operation used to search UI component items."
  },
  "Enums.SearchOperation": {
    "shortDescription": "Specifies the comparison operation used in searching."
  },
  "Enums.SelectAllMode": {
    "shortDescription": "Specifies the mode in which all items are selected."
  },
  "Enums.SelectedFilterOperation": {
    "shortDescription": "Specifies a filter operation that applies when users use the [filter row](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterRow '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/filterRow/') to filter the column."
  },
  "Enums.SelectionColumnDisplayMode": {
    "shortDescription": "Specifies when to display the selection column and row selection checkboxes."
  },
  "Enums.SelectionSensitivity": {
    "shortDescription": "Specifies sensitivity modes."
  },
  "Enums.SeriesHoverMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user points to a series."
  },
  "Enums.SeriesSelectionMode": {
    "shortDescription": "Specifies series elements to be highlighted when a user selects a series."
  },
  "Enums.SeriesType": {
    "shortDescription": "Sets the series type."
  },
  "Enums.ShapeCategory": {
    "shortDescription": "Specifies the category of shapes."
  },
  "Enums.ShapeType": {
    "shortDescription": "The type of the processed shape."
  },
  "Enums.ShiftLabelOverlap": {
    "shortDescription": "Specifies how a chart should behave when point/bar/item labels overlap."
  },
  "Enums.ShowTextMode": {
    "shortDescription": "Specifies when to display the text for the UI component item."
  },
  "Enums.SimplifiedSearchMode": {
    "shortDescription": "Specifies a comparison operation used to search UI component items."
  },
  "Enums.SingleMultipleAllOrNone": {
    "shortDescription": "Specifies whether the UI component enables an end-user to select only a single item, multiple items, all, or none."
  },
  "Enums.SingleMultipleOrNone": {
    "shortDescription": "Specifies whether the UI component enables an end-user to select only a single item, multiple items, or none."
  },
  "Enums.SingleOrMultiple": {
    "shortDescription": "Specifies whether the UI component enables an end-user to select only a single item or multiple items."
  },
  "Enums.SingleOrNone": {
    "shortDescription": "Specifies whether the UI component enables an end-user to select only a single item or none."
  },
  "Enums.SliderValueChangeMode": {
    "shortDescription": "Specifies when to change the component's value."
  },
  "Enums.SmallValuesGroupingMode": {
    "shortDescription": "Specifies the segment grouping mode."
  },
  "Enums.SortOrder": {
    "shortDescription": "Specifies the sort order of column, header, field, or group summary values."
  },
  "Enums.SparklineType": {
    "shortDescription": "Specifies the sparkline type."
  },
  "Enums.StartEditAction": {
    "shortDescription": "Specifies whether a single or double click should switch a cell to the editing state."
  },
  "Enums.StateStoreType": {
    "shortDescription": "Specifies the type of storage where the state is saved."
  },
  "Enums.StoreType": {
    "shortDescription": "Specifies the storage type the **DataSource** uses."
  },
  "Enums.SubmenuDirection": {
    "shortDescription": "Specifies the direction at which the submenus are displayed."
  },
  "Enums.SubmenuShowMode": {
    "shortDescription": "Specifies modes of submenu showing and hiding."
  },
  "Enums.SummaryType": {
    "shortDescription": "Specifies how to aggregate data for the group summary item, total summary item, or the field's data."
  },
  "Enums.TabsIconPosition": {
    "shortDescription": "Specifies icon position inside the tab."
  },
  "Enums.TabsStyle": {
    "shortDescription": "Specifies tab styling mode."
  },
  "Enums.TextBoxPredefinedButton": {
    "shortDescription": "Specifies the predefined button for a textbox."
  },
  "Enums.TextBoxType": {
    "shortDescription": "Specifies the text box type."
  },
  "Enums.TextEditorButtonLocation": {
    "shortDescription": "Specifies whether to place the button before or after the input text field."
  },
  "Enums.TextOverflow": {
    "shortDescription": "Specifies how to arrange chart text elements that overflow their containers: hide, truncated them with ellipsis, or leave them as they are."
  },
  "Enums.Theme": {
    "shortDescription": "Sets the name of the theme the UI component uses."
  },
  "Enums.TimeInterval": {
    "shortDescription": "Specifies various time intervals."
  },
  "Enums.ToastType": {
    "shortDescription": "Specifies the Toast UI component type."
  },
  "Enums.ToolbarItemComponent": {
    "shortDescription": "Specifies the UI component that presents a toolbar item."
  },
  "Enums.ToolbarItemLocation": {
    "shortDescription": "Specifies a location for the item on the toolbar."
  },
  "Enums.ToolbarLocation": {
    "shortDescription": "Specifies whether the item is displayed on a top or bottom toolbar."
  },
  "Enums.ToolboxDisplayMode": {
    "shortDescription": "Specifies how shapes are displayed in the toolbox."
  },
  "Enums.TooltipShowMode": {
    "shortDescription": "Specifies when the UI component shows a tooltip."
  },
  "Enums.TreeListCommandColumnType": {
    "shortDescription": "Specifies the [command column](/concepts/05%20UI%20Components/TreeList/10%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/TreeList/Columns/Column_Types/Command_Columns/') that this object customizes."
  },
  "Enums.TreeListFilterMode": {
    "shortDescription": "Specifies the filter and search parameters."
  },
  "Enums.TreeListPredefinedColumnButton": {
    "shortDescription": "Specifies buttons in the edit column or create a custom [command column](/concepts/05%20UI%20Components/TreeList/10%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/TreeList/Columns/Column_Types/Command_Columns/')."
  },
  "Enums.TreeListPredefinedToolbarItem": {
    "shortDescription": "Specifies buttons in the toolbar."
  },
  "Enums.TreeMapColorizerType": {
    "shortDescription": "Specifies the colorizing algorithm."
  },
  "Enums.TreeMapLayoutAlgorithm": {
    "shortDescription": "Specifies the layout algorithm."
  },
  "Enums.TreeMapLayoutDirection": {
    "shortDescription": "Specifies the direction in which the items will be laid out."
  },
  "Enums.TreeViewCheckBoxMode": {
    "shortDescription": "Specifies the checkbox display mode."
  },
  "Enums.TreeViewExpandEvent": {
    "shortDescription": "Specifies the event on which to expand/collapse a node."
  },
  "Enums.Units": {
    "shortDescription": "Specifies the measurement unit for size properties."
  },
  "Enums.UploadHttpMethod": {
    "shortDescription": "Specifies the method for the upload request."
  },
  "Enums.ValidationMessageMode": {
    "shortDescription": "Specifies how the message about the [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') that are not satisfied by this editor's value is displayed."
  },
  "Enums.ValidationRuleType": {
    "shortDescription": "Specifies the validation rule type."
  },
  "Enums.ValidationStatus": {
    "shortDescription": "Specifies the validation status."
  },
  "Enums.ValueAxisVisualRangeUpdateMode": {
    "shortDescription": "Specifies how the axis's [visual range](/api-reference/10%20UI%20Components/dxPolarChart/1%20Configuration/valueAxis/visualRange '/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/valueAxis/visualRange/') should behave when the PolarChart data is updated."
  },
  "Enums.ValueChangedCallMode": {
    "shortDescription": "Specifies when to call the [onValueChanged](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/onValueChanged.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/#onValueChanged') function."
  },
  "Enums.ValueErrorBarDisplayMode": {
    "shortDescription": "Specifies whether error bars must be displayed in full or partially."
  },
  "Enums.ValueErrorBarType": {
    "shortDescription": "Specifies how error bar values must be calculated."
  },
  "Enums.VectorMapLayerType": {
    "shortDescription": "Specifies layer type."
  },
  "Enums.VectorMapMarkerShape": {
    "shortDescription": "Specifies the shape of item markers."
  },
  "Enums.VectorMapMarkerType": {
    "shortDescription": "Specifies the type of a marker element."
  },
  "Enums.VectorMapProjection": {
    "shortDescription": "Specifies the map projection."
  },
  "Enums.VerticalAlignment": {
    "shortDescription": "Specifies a position in the vertical direction."
  },
  "Enums.VerticalEdge": {
    "shortDescription": "Specifies the position of a component's element relative to the component in the vertical direction."
  },
  "Enums.ViewType": {
    "shortDescription": "Specifies the type of view"
  },
  "Enums.VisualRangeUpdateMode": {
    "shortDescription": "Specifies how the selected or visual range should behave when data is updated."
  },
  "Enums.WeekNumberRule": {
    "shortDescription": "Specifies a [week number](/api-reference/10%20UI%20Components/dxCalendar/1%20Configuration/showWeekNumbers.md '/Documentation/ApiReference/UI_Components/dxCalendar/Configuration/#showWeekNumbers') calculation rule."
  },
  "Enums.WordWrap": {
    "shortDescription": "Specifies how to wrap texts that do not fit into a single line."
  },
  "Enums.ZoomPanAction": {
    "shortDescription": "Specifies zoom or pan mode."
  },
  "ErrorsCore": {
    "shortDescription": "This section lists core errors and warnings that may occur in DevExtreme applications."
  },
  "ErrorsCore.E0001": {
    "shortDescription": "An internal error that occurs when a method has no implementation."
  },
  "ErrorsCore.E0002": {
    "shortDescription": "An internal error that occurs when a member name collision is detected."
  },
  "ErrorsCore.E0003": {
    "shortDescription": "An internal error that occurs when you instantiate a class without using the \"new\" keyword."
  },
  "ErrorsCore.E0004": {
    "shortDescription": "An internal error that occurs when a component's NAME property is not specified."
  },
  "ErrorsCore.E0005": {
    "shortDescription": "Occurs when the device on which the current application is running is not in the list of known devices."
  },
  "ErrorsCore.E0006": {
    "shortDescription": "Occurs when requesting a Url by the key that is not defined within the [EndpointSelector](/api-reference/30%20Data%20Layer/EndpointSelector '/Documentation/ApiReference/Data_Layer/EndpointSelector/')'s configuration object."
  },
  "ErrorsCore.E0007": {
    "shortDescription": "An internal error that occurs when the \"invalidate\" method is called outside the update transaction."
  },
  "ErrorsCore.E0008": {
    "shortDescription": "An internal error that occurs when an action cannot be created because the type of the passed property name is not `string`."
  },
  "ErrorsCore.E0009": {
    "shortDescription": "An internal error that occurs when a component is not initialized for this element."
  },
  "ErrorsCore.E0010": {
    "shortDescription": "Occurs when the \"from\"/\"to\" configuration property of a slide animation is not a plain object."
  },
  "ErrorsCore.E0011": {
    "shortDescription": "Occurs when an unknown animation type is requested."
  },
  "ErrorsCore.E0012": {
    "shortDescription": "Occurs when using an old version of the jQuery library."
  },
  "ErrorsCore.E0013": {
    "shortDescription": "Occurs when using an old version of the Knockout library."
  },
  "ErrorsCore.E0014": {
    "shortDescription": "An internal error that occurs when the 'release' method is called for an unlocked Lock object."
  },
  "ErrorsCore.E0015": {
    "shortDescription": "An internal error that occurs when a queued task returns an unexpected result."
  },
  "ErrorsCore.E0017": {
    "shortDescription": "An internal error that occurs when a namespace for an event is not defined."
  },
  "ErrorsCore.E0018": {
    "shortDescription": "Occurs when a module with the [Popup](/api-reference/10%20UI%20Components/dxPopup '/Documentation/ApiReference/UI_Components/dxPopup/') UI component is not linked."
  },
  "ErrorsCore.E0020": {
    "shortDescription": "Occurs when an unsupported template engine is set."
  },
  "ErrorsCore.E0021": {
    "shortDescription": "Occurs when an unknown theme is set."
  },
  "ErrorsCore.E0022": {
    "shortDescription": "Occurs when the LINK[rel=dx-theme] tags go before DevExtreme scripts."
  },
  "ErrorsCore.E0023": {
    "shortDescription": "Occurs when a name is not specified for a [dxTemplate](/api-reference/10%20UI%20Components/Markup%20Components/dxTemplate '/Documentation/ApiReference/UI_Components/Markup_Components/dxTemplate/') markup component."
  },
  "ErrorsCore.E0024": {
    "shortDescription": "Occurs if a DevExtreme bundle is linked more than once on a single page."
  },
  "ErrorsCore.E0025": {
    "shortDescription": "Occurs when an invalid argument is passed to a method."
  },
  "ErrorsCore.E0100": {
    "shortDescription": "Occurs when an unknown validation rule type is used."
  },
  "ErrorsCore.E0101": {
    "shortDescription": "Occurs when either the **min** or **max** property is not specified for the ['range'](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/RangeRule '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/RangeRule/') rule."
  },
  "ErrorsCore.E0102": {
    "shortDescription": "Occurs when the **comparisonTarget** property is not specified for the ['compare'](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/CompareRule '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/CompareRule/') rule."
  },
  "ErrorsCore.E0103": {
    "shortDescription": "Occurs if an [AsyncRule](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/AsyncRule '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/AsyncRule/')'s [validationCallback](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules/AsyncRule/validationCallback.md '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/AsyncRule/#validationCallback') does not return a promise."
  },
  "ErrorsCore.E0110": {
    "shortDescription": "Occurs when an unknown or unregistered validation group is validated using the [DevExtreme.validationEngine.validateGroup(group)](/api-reference/50%20Common/utils/validationEngine/validateGroup(group).md '/Documentation/ApiReference/Common/utils/validationEngine/#validateGroupgroup') method."
  },
  "ErrorsCore.E0120": {
    "shortDescription": "Occurs when a default adapter cannot be initialized for the target editor."
  },
  "ErrorsCore.E0121": {
    "shortDescription": "Occurs in drop-down lists when the **customItem** field of the **onCustomItemCreating** function's parameter is not set."
  },
  "ErrorsCore.W0000": {
    "shortDescription": "Appears when a deprecated component is detected in an application."
  },
  "ErrorsCore.W0001": {
    "shortDescription": "Appears when a deprecated property is detected in an application."
  },
  "ErrorsCore.W0002": {
    "shortDescription": "Appears when a deprecated method is detected in an application."
  },
  "ErrorsCore.W0003": {
    "shortDescription": "Appears when a deprecated field is detected in an application."
  },
  "ErrorsCore.W0004": {
    "shortDescription": "Appears when the timeout that was set to load a theme is over."
  },
  "ErrorsCore.W0005": {
    "shortDescription": "Appears when a deprecated event is detected in an application."
  },
  "ErrorsCore.W0006": {
    "shortDescription": "Appears when a <a href=\"http://tools.ietf.org/html/rfc2445#section-4.3.10\" target=\"_blank\">recurrence rule</a> is invalid."
  },
  "ErrorsCore.W0007": {
    "shortDescription": "Appears when the <a href=\"https://cdnjs.com/libraries/globalize/0.1.1\" target=\"_blank\">Globalize culture</a> script is not referenced on the application page."
  },
  "ErrorsCore.W0008": {
    "shortDescription": "Appears if an array passed to the [views](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/views '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#views') property of the [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') UI component contains an invalid view name."
  },
  "ErrorsCore.W0009": {
    "shortDescription": "Occurs if the [timeZone](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/timeZone.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#timeZone') property of the [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') UI component holds an invalid value."
  },
  "ErrorsCore.W0010": {
    "shortDescription": "Occurs if the application uses a deprecated theme."
  },
  "ErrorsCore.W0011": {
    "shortDescription": "Occurs if number parsing is invoked without a defined parser."
  },
  "ErrorsCore.W0012": {
    "shortDescription": "Occurs if date parsing is invoked without a defined parser."
  },
  "ErrorsCore.W0013": {
    "shortDescription": "Occurs if one of the deprecated files (dx.web.de.js, dx.mobile.de.js, dx.all.de.js, etc.) is used. Use the dx.messages.xx.js file instead."
  },
  "ErrorsCore.W0014": {
    "shortDescription": "Occurs if a property is set to a deprecated value type. Set the property to the type of value suggested in the warning message."
  },
  "ErrorsCore.W0015": {
    "shortDescription": "Occurs if a function returns a value instead of assigning it to the parameter field."
  },
  "ErrorsCore.W0016": {
    "shortDescription": "Occurs if a deprecated value is assigned to a property."
  },
  "ErrorsCore.W0017": {
    "shortDescription": "Occurs if a component's **width**, **height**, or similar properties have a value of the `function` type."
  },
  "ErrorsCore.W0018": {
    "shortDescription": "Occurs if a component's **position** property has a value of the `function` type."
  },
  "ErrorsCore.W0019": {
    "shortDescription": "Appears when a valid DevExtreme license key cannot be found."
  },
  "ErrorsCore.W0020": {
    "shortDescription": "Appears when a DevExtreme license key does not match the version of DevExtreme used within a project."
  },
  "ErrorsCore.W0021": {
    "shortDescription": "Appears when the license key verification fails."
  },
  "ErrorsCore.W0022": {
    "shortDescription": "Appears if the version of DevExtreme used within a project is marked as pre-release software (pre-release software is not suitable for production use as it may contain deficiencies/bugs)."
  },
  "ErrorsCore.W0023": {
    "shortDescription": "Appears if the `devextreme` package version does not match other DevExpress product versions used in the application."
  },
  "ErrorsData": {
    "shortDescription": "This section lists errors and warnings that may occur when using the DevExtreme Data Library."
  },
  "ErrorsData.E4000": {
    "shortDescription": "Signals that a data-related error occurred in external code with which the DevExtreme data works."
  },
  "ErrorsData.E4001": {
    "shortDescription": "Occurs when the an unknown aggregating function is specified."
  },
  "ErrorsData.E4002": {
    "shortDescription": "Occurs when the unsupported OData version in specified for the ODataStore or ODataContext object."
  },
  "ErrorsData.E4003": {
    "shortDescription": "Occurs when an unknown filter operation is used."
  },
  "ErrorsData.E4004": {
    "shortDescription": "Occurs when the [thenby()](/api-reference/30%20Data%20Layer/Query/3%20Methods/thenBy(getter).md '/Documentation/ApiReference/Data_Layer/Query/Methods/#thenBygetter') method is called before the [sortby()](/api-reference/30%20Data%20Layer/Query/3%20Methods/sortBy(getter).md '/Documentation/ApiReference/Data_Layer/Query/Methods/#sortBygetter') method."
  },
  "ErrorsData.E4005": {
    "shortDescription": "Occurs when calling a key-dependent method of a store with an unspecified key property."
  },
  "ErrorsData.E4006": {
    "shortDescription": "Occurs when the value that is set to the [data](/api-reference/30%20Data%20Layer/ArrayStore/1%20Configuration/data.md '/Documentation/ApiReference/Data_Layer/ArrayStore/Configuration/#data') configuration property of the **ArrayStore** object is not an array."
  },
  "ErrorsData.E4007": {
    "shortDescription": "Occurs when an auto-generated key is required for a Data Store with a compound key expression."
  },
  "ErrorsData.E4008": {
    "shortDescription": "Occurs when items with duplicated keys are inserted."
  },
  "ErrorsData.E4009": {
    "shortDescription": "Occurs in a store when its [byKey(key)](/api-reference/30%20Data%20Layer/ArrayStore/3%20Methods/byKey(key).md '/Documentation/ApiReference/Data_Layer/ArrayStore/Methods/#byKeykey') function does not return a value."
  },
  "ErrorsData.E4010": {
    "shortDescription": "Occurs when creating the [Query](/api-reference/30%20Data%20Layer/Query '/Documentation/ApiReference/Data_Layer/Query/') object by using the **createQuery** method of a CustomStore."
  },
  "ErrorsData.E4011": {
    "shortDescription": "Occurs when an unimplemented CustomStore method is called."
  },
  "ErrorsData.E4012": {
    "shortDescription": "Occurs when a method implemented for a Custom Store returns an unexpected result."
  },
  "ErrorsData.E4013": {
    "shortDescription": "Occurs when the [name](/api-reference/30%20Data%20Layer/LocalStore/1%20Configuration/name.md '/Documentation/ApiReference/Data_Layer/LocalStore/Configuration/#name') property is not specified for a [LocalStore](/api-reference/30%20Data%20Layer/LocalStore '/Documentation/ApiReference/Data_Layer/LocalStore/') instance."
  },
  "ErrorsData.E4014": {
    "shortDescription": "Occurs when an unknown key type is detected."
  },
  "ErrorsData.E4015": {
    "shortDescription": "Occurs when calling the [objectLink(entityAlias, key)](/api-reference/30%20Data%20Layer/ODataContext/3%20Methods/objectLink(entityAlias_key).md '/Documentation/ApiReference/Data_Layer/ODataContext/Methods/#objectLinkentityAlias_key') method and passing an entity alias that is not registered for the given [ODataCOntext](/api-reference/30%20Data%20Layer/ODataContext '/Documentation/ApiReference/Data_Layer/ODataContext/') object."
  },
  "ErrorsData.E4016": {
    "shortDescription": "Occurs when the [compileSetter(expr)](/api-reference/30%20Data%20Layer/Utils/compileSetter(expr).md '/Documentation/ApiReference/Data_Layer/Utils/#compileSetterexpr') method is called with **this** passed as a parameter."
  },
  "ErrorsData.E4017": {
    "shortDescription": "Occurs when calling the [update(key,values)](/concepts/70%20Data%20Binding/5%20Data%20Layer/3%20Data%20Modification/1%20Update.md '/Documentation/Guide/Data_Binding/Data_Layer/#Data_Modification/Update') method to modify a key(s)."
  },
  "ErrorsData.E4018": {
    "shortDescription": "Occurs when the server returns a non-numeric value after the [totalCount](/api-reference/30%20Data%20Layer/Store/3%20Methods/totalCount(options).md '/Documentation/ApiReference/Data_Layer/ODataStore/Methods/#totalCountoptions') method of an ODataStore instance is called."
  },
  "ErrorsData.E4019": {
    "shortDescription": "Occurs if a [filter expression](/concepts/70%20Data%20Binding/5%20Data%20Layer/2%20Reading%20Data/15%20Filtering/1%20Group%20Filter%20Operations.md '/Documentation/Guide/Data_Binding/Data_Layer/#Reading_Data/Filtering/Group_Filter_Operations') contains different group operators within a single group."
  },
  "ErrorsData.E4020": {
    "shortDescription": "Occurs if the [store.type](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/store/type.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/store/#type') property of a DataSource instance holds an unknown store type."
  },
  "ErrorsData.E4021": {
    "shortDescription": "Occurs if the total count of data records (**totalCount**) was not obtained when loading data."
  },
  "ErrorsData.E4022": {
    "shortDescription": "Occurs if the count of first-level groups (**groupCount**) was not obtained when loading data."
  },
  "ErrorsData.E4023": {
    "shortDescription": "Occurs in the [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/') if the received data cannot be parsed into XML."
  },
  "ErrorsData.E4024": {
    "shortDescription": "Occurs in the [ODataStore](/api-reference/30%20Data%20Layer/ODataStore '/Documentation/ApiReference/Data_Layer/ODataStore/') when a string function (*\"startswith\"*, *\"endswith\"*, *\"contains\"*, *\"notcontains\"*) is used to search or filter a non-string data field."
  },
  "ErrorsData.W4000": {
    "shortDescription": "Occurs when data returned from a server has an incorrect structure."
  },
  "ErrorsData.W4001": {
    "shortDescription": "Occurs in the [ODataStore](/api-reference/30%20Data%20Layer/ODataStore '/Documentation/ApiReference/Data_Layer/ODataStore/') when a single field is assigned both to the [keyType](/api-reference/30%20Data%20Layer/ODataStore/1%20Configuration/keyType.md '/Documentation/ApiReference/Data_Layer/ODataStore/Configuration/#keyType') and [fieldTypes](/api-reference/30%20Data%20Layer/ODataStore/1%20Configuration/fieldTypes.md '/Documentation/ApiReference/Data_Layer/ODataStore/Configuration/#fieldTypes') properties. Remove the field's name from one of the properties."
  },
  "ErrorsData.W4002": {
    "shortDescription": "Produced by the [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/') when an error occurs on loading data for certain cells. For details on the error, refer to the XMLA specification."
  },
  "ErrorsUIWidgets": {
    "shortDescription": "This section lists errors and warnings that may occur in UI components."
  },
  "ErrorsUIWidgets.E1001": {
    "shortDescription": "A [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') internal error."
  },
  "ErrorsUIWidgets.E1002": {
    "shortDescription": "A [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') internal error."
  },
  "ErrorsUIWidgets.E1003": {
    "shortDescription": "A [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') internal error."
  },
  "ErrorsUIWidgets.E1004": {
    "shortDescription": "A [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') internal error."
  },
  "ErrorsUIWidgets.E1005": {
    "shortDescription": "Occurs if a public method is already registered."
  },
  "ErrorsUIWidgets.E1006": {
    "shortDescription": "A [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') internal error."
  },
  "ErrorsUIWidgets.E1007": {
    "shortDescription": "Occurs in [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') if the browser does not support local storage or session storage."
  },
  "ErrorsUIWidgets.E1010": {
    "shortDescription": "Occurs if a custom template for the text field of an editor UI component misses the [TextBox](/api-reference/10%20UI%20Components/dxTextBox '/Documentation/ApiReference/UI_Components/dxTextBox/')."
  },
  "ErrorsUIWidgets.E1011": {
    "shortDescription": "Occurs if an item of the [List](/api-reference/10%20UI%20Components/dxList '/Documentation/ApiReference/UI_Components/dxList/') UI component is deleted, while the [remove(key)](/api-reference/30%20Data%20Layer/Store/3%20Methods/remove(key).md '/Documentation/ApiReference/Data_Layer/CustomStore/Methods/#removekey') method of the [CustomStore](/api-reference/30%20Data%20Layer/CustomStore '/Documentation/ApiReference/Data_Layer/CustomStore/') used to access data is not implemented."
  },
  "ErrorsUIWidgets.E1012": {
    "shortDescription": "Occurs in the [List](/api-reference/10%20UI%20Components/dxList '/Documentation/ApiReference/UI_Components/dxList/') UI component if the specified value of the [itemDeleteMode](/api-reference/10%20UI%20Components/dxList/1%20Configuration/itemDeleteMode.md '/Documentation/ApiReference/UI_Components/dxList/Configuration/#itemDeleteMode') or [menuMode](/api-reference/10%20UI%20Components/dxList/1%20Configuration/menuMode.md '/Documentation/ApiReference/UI_Components/dxList/Configuration/#menuMode') property is not supported."
  },
  "ErrorsUIWidgets.E1016": {
    "shortDescription": "Occurs in the [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') UI component if the data source specified for a lookup column is not valid."
  },
  "ErrorsUIWidgets.E1018": {
    "shortDescription": "Occurs in the [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') UI component if the [collapseAll(groupIndex)](/api-reference/10%20UI%20Components/dxDataGrid/3%20Methods/collapseAll(groupIndex).md '/Documentation/ApiReference/UI_Components/dxDataGrid/Methods/#collapseAllgroupIndex') method is called, provided that the UI component uses a remote data source."
  },
  "ErrorsUIWidgets.E1019": {
    "shortDescription": "Occurs if a **searchMode** property holds an invalid value."
  },
  "ErrorsUIWidgets.E1020": {
    "shortDescription": "A [DateBox](/api-reference/10%20UI%20Components/dxDateBox '/Documentation/ApiReference/UI_Components/dxDateBox/') internal error."
  },
  "ErrorsUIWidgets.E1021": {
    "shortDescription": "Occurs in the [Map](/api-reference/10%20UI%20Components/dxMap '/Documentation/ApiReference/UI_Components/dxMap/') UI component if you try to remove a route or marker that does not exist."
  },
  "ErrorsUIWidgets.E1022": {
    "shortDescription": "Occurs in the [Map](/api-reference/10%20UI%20Components/dxMap '/Documentation/ApiReference/UI_Components/dxMap/') UI component if an object passed to the [markers](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/markers '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#markers') property is not an array."
  },
  "ErrorsUIWidgets.E1023": {
    "shortDescription": "Occurs in the [Map](/api-reference/10%20UI%20Components/dxMap '/Documentation/ApiReference/UI_Components/dxMap/') UI component if an object passed to the [routes](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/routes '/Documentation/ApiReference/UI_Components/dxMap/Configuration/#routes') property is not an array."
  },
  "ErrorsUIWidgets.E1025": {
    "shortDescription": "Occurs in the [ResponsiveBox](/api-reference/10%20UI%20Components/dxResponsiveBox '/Documentation/ApiReference/UI_Components/dxResponsiveBox/') UI component if the specified layout cannot be divided into rows and columns."
  },
  "ErrorsUIWidgets.E1026": {
    "shortDescription": "Occurs in the [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') UI component if the **summaryType** field of an item is set to \"custom\", provided that the [calculateCustomSummary](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/calculateCustomSummary.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/#calculateCustomSummary') property value is not defined."
  },
  "ErrorsUIWidgets.E1031": {
    "shortDescription": "A [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') internal error."
  },
  "ErrorsUIWidgets.E1032": {
    "shortDescription": "Occurs when an unspecified or an unknown start date is detected in an appointment object of the [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') UI component."
  },
  "ErrorsUIWidgets.E1033": {
    "shortDescription": "A [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') internal error."
  },
  "ErrorsUIWidgets.E1034": {
    "shortDescription": "The current browser does not implement an API required for saving files."
  },
  "ErrorsUIWidgets.E1035": {
    "shortDescription": "Occurs if the editor cannot be created for a [Form](/api-reference/10%20UI%20Components/dxForm '/Documentation/ApiReference/UI_Components/dxForm/') item because of an internal error."
  },
  "ErrorsUIWidgets.E1037": {
    "shortDescription": "Occurs if the server returns grouped data that does not match the required format."
  },
  "ErrorsUIWidgets.E1038": {
    "shortDescription": "Occurs when the DataGrid UI component loads or saves a state if the browser does not support local storages for locally opened web pages."
  },
  "ErrorsUIWidgets.E1039": {
    "shortDescription": "A [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') internal error."
  },
  "ErrorsUIWidgets.E1040": {
    "shortDescription": "Occurs in the [TreeView](/api-reference/10%20UI%20Components/dxTreeView '/Documentation/ApiReference/UI_Components/dxTreeView/') UI component when the key field value is not unique within the data array."
  },
  "ErrorsUIWidgets.E1041": {
    "shortDescription": "Occurs if the script specified in the error message is referenced after the DevExtreme scripts or is not referenced at all."
  },
  "ErrorsUIWidgets.E1042": {
    "shortDescription": "Occurs in the DataGrid or TreeList UI component if the key field is not set."
  },
  "ErrorsUIWidgets.E1043": {
    "shortDescription": "Occurs when the **key** property of the [Store](/concepts/70%20Data%20Binding/5%20Data%20Layer/1%20Creating%20DataSource/3%20What%20Are%20Stores.md '/Documentation/Guide/Data_Binding/Data_Layer/#Creating_DataSource/What_Are_Stores') has an incorrect value."
  },
  "ErrorsUIWidgets.E1044": {
    "shortDescription": "Occurs in the TreeList UI component when the key field specified in the [keyExpr](/api-reference/10%20UI%20Components/dxTreeList/1%20Configuration/keyExpr.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#keyExpr') property differs from the one specified in the [Store](/concepts/70%20Data%20Binding/5%20Data%20Layer/1%20Creating%20DataSource/3%20What%20Are%20Stores.md '/Documentation/Guide/Data_Binding/Data_Layer/#Creating_DataSource/What_Are_Stores')."
  },
  "ErrorsUIWidgets.E1045": {
    "shortDescription": "Occurs in the TreeList UI component if editing takes place without the **key** property specified in the [Store](/concepts/70%20Data%20Binding/5%20Data%20Layer/1%20Creating%20DataSource/3%20What%20Are%20Stores.md '/Documentation/Guide/Data_Binding/Data_Layer/#Creating_DataSource/What_Are_Stores')."
  },
  "ErrorsUIWidgets.E1046": {
    "shortDescription": "Occurs in the DataGrid, TreeList, and Gantt UI components if the key field is not found in at least one data object."
  },
  "ErrorsUIWidgets.E1047": {
    "shortDescription": "Occurs in the FilterBuilder UI component if the [filter expression](/api-reference/10%20UI%20Components/dxFilterBuilder/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxFilterBuilder/Configuration/#value') contains a data field that is not defined in the [fields](/api-reference/10%20UI%20Components/dxFilterBuilder/1%20Configuration/fields '/Documentation/ApiReference/UI_Components/dxFilterBuilder/Configuration/#fields') array."
  },
  "ErrorsUIWidgets.E1048": {
    "shortDescription": "Occurs in the FilterBuilder UI component if a condition in the [filter expression](/api-reference/10%20UI%20Components/dxFilterBuilder/1%20Configuration/value.md '/Documentation/ApiReference/UI_Components/dxFilterBuilder/Configuration/#value') contains an operation unavailable for the used field."
  },
  "ErrorsUIWidgets.E1049": {
    "shortDescription": "Occurs in the TreeList or DataGrid when [filterSyncEnabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterSyncEnabled.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#filterSyncEnabled') is **true** and the **columns[]**.[dataField](/api-reference/_hidden/GridBaseColumn/dataField.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#dataField') or **columns[]**.[name](/api-reference/_hidden/GridBaseColumn/name.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#name') property is not specified in at least one column that allows filter operations."
  },
  "ErrorsUIWidgets.E1050": {
    "shortDescription": "Occurs in the DataGrid or TreeList when trying to check the [validationRules](/api-reference/_hidden/GridBaseColumn/validationRules.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#validationRules') of a column that has a third-party editor in its [editCellTemplate](/api-reference/_hidden/dxDataGridColumn/editCellTemplate.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#editCellTemplate')."
  },
  "ErrorsUIWidgets.E1052": {
    "shortDescription": "Occurs if the **dataSource** property is not specified in the UI component."
  },
  "ErrorsUIWidgets.E1053": {
    "shortDescription": "Occurs in a text editor when its [buttons[]](/Documentation/ApiReference/UI_Components/dxTextBox/Configuration/buttons/) property is set to an invalid value."
  },
  "ErrorsUIWidgets.E1054": {
    "shortDescription": "Occurs in a text editor when at least one of its [buttons](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/buttons '/Documentation/ApiReference/UI_Components/dxTextBox/Configuration/buttons/') does not have a [name](/api-reference/_hidden/TextEditorButton/name.md '/Documentation/ApiReference/UI_Components/dxTextBox/Configuration/buttons/#name')."
  },
  "ErrorsUIWidgets.E1055": {
    "shortDescription": "Occurs in a text editor when at least one of its [buttons](/api-reference/10%20UI%20Components/dxTextEditor/1%20Configuration/buttons '/Documentation/ApiReference/UI_Components/dxTextBox/Configuration/buttons/') has an invalid or non-unique value assigned to the [name](/api-reference/_hidden/TextEditorButton/name.md '/Documentation/ApiReference/UI_Components/dxTextBox/Configuration/buttons/#name') property."
  },
  "ErrorsUIWidgets.E1056": {
    "shortDescription": "Occurs in a text editor when it does not support the button type that you included in the **buttons[]** array."
  },
  "ErrorsUIWidgets.E1058": {
    "shortDescription": "Occurs in [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') when [startDayHour](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/startDayHour.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#startDayHour') is set to a time that is later than [endDayHour](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/endDayHour.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#endDayHour') or at least one of these property values is not an integer."
  },
  "ErrorsUIWidgets.E1059": {
    "shortDescription": "Occurs in a DataGrid or TreeList when at least one of its columns has a non-unique value assigned to the [name](/api-reference/_hidden/GridBaseColumn/name.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#name') property."
  },
  "ErrorsUIWidgets.E1060": {
    "shortDescription": "Occurs in a DataGrid or TreeList when at least one of its editable columns does not have a [name](/api-reference/_hidden/GridBaseColumn/name.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/#name')."
  },
  "ErrorsUIWidgets.E1061": {
    "shortDescription": "Occurs in [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') when [offset](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/offset.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#offset') is set to invalid value."
  },
  "ErrorsUIWidgets.E1062": {
    "shortDescription": "Occurs in [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') when [cellDuration](/api-reference/10%20UI%20Components/dxScheduler/1%20Configuration/cellDuration.md '/Documentation/ApiReference/UI_Components/dxScheduler/Configuration/#cellDuration') is set to invalid value."
  },
  "ErrorsUIWidgets.E2001": {
    "shortDescription": "Occurs when data of an unsupported type was provided to a UI component."
  },
  "ErrorsUIWidgets.E2002": {
    "shortDescription": "Occurs when axis type and data type are incompatible."
  },
  "ErrorsUIWidgets.E2003": {
    "shortDescription": "Occurs when one of the data source fields has an unsupported type."
  },
  "ErrorsUIWidgets.E2004": {
    "shortDescription": "Occurs when values in a data source field have different types that cannot be cast to one type."
  },
  "ErrorsUIWidgets.E2005": {
    "shortDescription": "Occurs in the Funnel UI component when the specified value field is absent in the data source or all its values are negative."
  },
  "ErrorsUIWidgets.E2006": {
    "shortDescription": "Occurs in the Sankey UI component when data objects are looped."
  },
  "ErrorsUIWidgets.E2007": {
    "shortDescription": "Occurs in the Sankey UI component if any of the required fields are not found in at least one data object."
  },
  "ErrorsUIWidgets.E2008": {
    "shortDescription": "Occurs in the Sankey UI component if the **source** or **target** field has an incorrect data type in at least one data object."
  },
  "ErrorsUIWidgets.E2009": {
    "shortDescription": "Occurs in the Sankey UI component if the **weight** field has an incorrect data type or value in at least one data object."
  },
  "ErrorsUIWidgets.E2101": {
    "shortDescription": "Occurs when **series**.**type** property of Chart or PieChart has an unknown value."
  },
  "ErrorsUIWidgets.E2102": {
    "shortDescription": "Occurs in Chart when two or more value axes on a single pane have the same name."
  },
  "ErrorsUIWidgets.E2103": {
    "shortDescription": "Occurs if an incorrect value was assigned to a property that accepts callback functions only."
  },
  "ErrorsUIWidgets.E2104": {
    "shortDescription": "Occurs if the **logarithmBase** property of Chart or RangeSelector was set to an invalid value."
  },
  "ErrorsUIWidgets.E2105": {
    "shortDescription": "Occurs if an invalid value was specified for a strip or constant line."
  },
  "ErrorsUIWidgets.E2202": {
    "shortDescription": "Occurs when the [startValue](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/startValue.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#startValue') or [endValue](/api-reference/10%20UI%20Components/dxRangeSelector/1%20Configuration/scale/endValue.md '/Documentation/ApiReference/UI_Components/dxRangeSelector/Configuration/scale/#endValue') property of the RangeSelector's scale is not valid."
  },
  "ErrorsUIWidgets.E2203": {
    "shortDescription": "Occurs in the [RangeSelector](/api-reference/10%20UI%20Components/dxRangeSelector '/Documentation/ApiReference/UI_Components/dxRangeSelector/') UI component when the selected range is invalid."
  },
  "ErrorsUIWidgets.W1001": {
    "shortDescription": "Occurs in the [Map](/api-reference/10%20UI%20Components/dxMap '/Documentation/ApiReference/UI_Components/dxMap/') UI component if the [apiKey](/api-reference/10%20UI%20Components/dxMap/1%20Configuration/apiKey '/Documentation/ApiReference/UI_Components/dxMap/Configuration/apiKey/') property value is changed after the UI component is created."
  },
  "ErrorsUIWidgets.W1002": {
    "shortDescription": "Occurs when you are trying to access an item that does not exist."
  },
  "ErrorsUIWidgets.W1003": {
    "shortDescription": "Occurs in the [List](/api-reference/10%20UI%20Components/dxList '/Documentation/ApiReference/UI_Components/dxList/') UI component if you try to select an item relating to a group that does not exist."
  },
  "ErrorsUIWidgets.W1004": {
    "shortDescription": "Occurs in the [List](/api-reference/10%20UI%20Components/dxList '/Documentation/ApiReference/UI_Components/dxList/') UI component if you try to select an item that does not exist within the specified group."
  },
  "ErrorsUIWidgets.W1005": {
    "shortDescription": "Occurs when data is loaded twice when applying initial filter settings."
  },
  "ErrorsUIWidgets.W1006": {
    "shortDescription": "An error occurred while communicating with the map service. See the map service documentation."
  },
  "ErrorsUIWidgets.W1007": {
    "shortDescription": "Occurs in the [TreeView](/api-reference/10%20UI%20Components/dxTreeView '/Documentation/ApiReference/UI_Components/dxTreeView/') if a node refers to a parent node that does not exist."
  },
  "ErrorsUIWidgets.W1008": {
    "shortDescription": "Occurs in the [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') UI component if you try to scroll to a date outside the current view."
  },
  "ErrorsUIWidgets.W1009": {
    "shortDescription": "Occurs in the List UI component when you try to search through data specified using the [items](/api-reference/10%20UI%20Components/dxList/1%20Configuration/items '/Documentation/ApiReference/UI_Components/dxList/Configuration/items/') property."
  },
  "ErrorsUIWidgets.W1010": {
    "shortDescription": "Occurs when trying to select all the items in a grouped [List](/concepts/05%20UI%20Components/List/00%20Getting%20Started%20with%20List '/Documentation/Guide/UI_Components/List/Getting_Started_with_List') with the [selectAllMode](/api-reference/10%20UI%20Components/dxList/1%20Configuration/selectAllMode.md '/Documentation/ApiReference/UI_Components/dxList/Configuration/#selectAllMode') set to *\"allPages\"*."
  },
  "ErrorsUIWidgets.W1011": {
    "shortDescription": "Occurs in the DataGrid UI component if the [keyExpr](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/keyExpr.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#keyExpr') property is specified and the data is not a JavaScript array."
  },
  "ErrorsUIWidgets.W1013": {
    "shortDescription": "Occurs if you specify the deprecated **message** field in the object passed to the [custom(options)](/api-reference/50%20Common/utils/ui/dialog/custom(options).md '/Documentation/ApiReference/Common/utils/ui/dialog/#customoptions') method."
  },
  "ErrorsUIWidgets.W1014": {
    "shortDescription": "Occurs when a page contains more [SpeedDialAction](/api-reference/10%20UI%20Components/dxSpeedDialAction '/Documentation/ApiReference/UI_Components/dxSpeedDialAction/') UI components than specified in the [maxSpeedDialActionCount](/api-reference/50%20Common/Object%20Structures/GlobalConfig/floatingActionButtonConfig/maxSpeedDialActionCount.md '/Documentation/ApiReference/Common/Object_Structures/GlobalConfig/floatingActionButtonConfig/#maxSpeedDialActionCount') property."
  },
  "ErrorsUIWidgets.W1016": {
    "shortDescription": "Occurs if you specify the deprecated **formatName** and **formatValues** properties in the [items](/api-reference/_hidden/dxHtmlEditorToolbar/items '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Configuration/toolbar/items/') array within the [HtmlEditor](/api-reference/10%20UI%20Components/dxHtmlEditor '/Documentation/ApiReference/UI_Components/dxHtmlEditor')'s [toolbar](/api-reference/10%20UI%20Components/dxHtmlEditor/1%20Configuration/toolbar '/Documentation/ApiReference/UI_Components/dxHtmlEditor/Configuration/toolbar/') property."
  },
  "ErrorsUIWidgets.W1017": {
    "shortDescription": "Occurs in the DataGrid and TreeList UI components when the **key** property is not specified for a lookup column's [dataSource](/api-reference/_hidden/GridBaseColumn/lookup/dataSource.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/lookup/#dataSource')."
  },
  "ErrorsUIWidgets.W1018": {
    "shortDescription": "Occurs in the DataGrid when infinite scrolling is used and **selection**.[allowSelectAll](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/selection/allowSelectAll.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/selection/#allowSelectAll') is set to **true**."
  },
  "ErrorsUIWidgets.W1019": {
    "shortDescription": "Occurs if the maximum filter query length exceeds the value specified in the [maxFilterQueryLength](/api-reference/10%20UI%20Components/dxTagBox/1%20Configuration/maxFilterQueryLength.md '/Documentation/ApiReference/UI_Components/dxTagBox/Configuration/#maxFilterQueryLength') property of the [TagBox](/api-reference/10%20UI%20Components/dxTagBox '/Documentation/ApiReference/UI_Components/dxTagBox/')."
  },
  "ErrorsUIWidgets.W1020": {
    "shortDescription": "Occurs if the [shading](/api-reference/10%20UI%20Components/dxPopover/1%20Configuration/shading.md '/Documentation/ApiReference/UI_Components/dxPopover/Configuration/#shading') property is **true** and a [hideEvent](/api-reference/10%20UI%20Components/dxPopover/1%20Configuration/hideEvent '/Documentation/ApiReference/UI_Components/dxPopover/Configuration/hideEvent/') is specified."
  },
  "ErrorsUIWidgets.W1021": {
    "shortDescription": "Occurs in the [Popup](/api-reference/10%20UI%20Components/dxPopup '/Documentation/ApiReference/UI_Components/dxPopup/'), [Popover](/api-reference/10%20UI%20Components/dxPopover '/Documentation/ApiReference/UI_Components/dxPopover/'), [Tooltip](/api-reference/10%20UI%20Components/dxTooltip '/Documentation/ApiReference/UI_Components/dxTooltip/'), and [LoadPanel](/api-reference/10%20UI%20Components/dxLoadPanel '/Documentation/ApiReference/UI_Components/dxLoadPanel/') if the [container](/api-reference/10%20UI%20Components/dxPopup/1%20Configuration/container.md '/Documentation/ApiReference/UI_Components/dxPopup/Configuration/#container') property is set to an invalid value or DOM element that does not exist."
  },
  "ErrorsUIWidgets.W1022": {
    "shortDescription": "Occurs in the UI component if you try to parse incorrect JSON data."
  },
  "ErrorsUIWidgets.W1023": {
    "shortDescription": "Occurs in the Agenda view of the Scheduler component if you specify appointments without keys."
  },
  "ErrorsUIWidgets.W1024": {
    "shortDescription": "Occurs if the [client-side export](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/export '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/export/') is enabled but the [onExporting](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/onExporting.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#onExporting') function is not implemented."
  },
  "ErrorsUIWidgets.W1025": {
    "shortDescription": "Occurs if you use virtual or infinite [scrolling mode](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/scrolling/mode.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/scrolling/#mode') and do not specify the component's [height](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/height.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/#height')."
  },
  "ErrorsUIWidgets.W2002": {
    "shortDescription": "Appears when none of the data source objects contain a valid argument or value field."
  },
  "ErrorsUIWidgets.W2003": {
    "shortDescription": "Appears when the specified tick intervals lead Chart or RangeSelector to generating an excessive number of ticks."
  },
  "ErrorsUIWidgets.W2101": {
    "shortDescription": "Appears if the [pane](/concepts/05%20UI%20Components/Chart/40%20Panes/00%20Overview.md '/Documentation/Guide/UI_Components/Chart/Panes/Overview/') specified by the [defaultPane](/api-reference/10%20UI%20Components/dxChart/1%20Configuration/defaultPane.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/#defaultPane') property does not exist."
  },
  "ErrorsUIWidgets.W2102": {
    "shortDescription": "Appears if a value axis specified for a series does not exist."
  },
  "ErrorsUIWidgets.W2103": {
    "shortDescription": "Appears when a chart hides its title due to the layout being adapted."
  },
  "ErrorsUIWidgets.W2104": {
    "shortDescription": "Appears when a chart hides its legend due to the layout being adapted."
  },
  "ErrorsUIWidgets.W2105": {
    "shortDescription": "Appears when a chart hides one of its axis titles due to the layout being adapted."
  },
  "ErrorsUIWidgets.W2106": {
    "shortDescription": "Appears when a chart hides labels of one of the axes due to the layout being adapted."
  },
  "ErrorsUIWidgets.W2107": {
    "shortDescription": "Appears if the export menu was hidden due to the container's size being too small."
  },
  "ErrorsUIWidgets.W2108": {
    "shortDescription": "Occurs if the browser does not support exporting images to the specified format."
  },
  "ErrorsUIWidgets.W2301": {
    "shortDescription": "Occurs if the distance between the start and end scale values in a gauge equals zero."
  },
  "event": {
    "shortDescription": "",
    "depNote": null
  },
  "EventInfo": {
    "shortDescription": "A type that contains fields common for all events (`component`, `element`, `model`)."
  },
  "EventInfo.component": {
    "shortDescription": "The UI component's instance."
  },
  "EventInfo.element": {
    "shortDescription": "The UI component's container."
  },
  "EventInfo.model": {
    "shortDescription": "Model data. Available only if you use Knockout."
  },
  "EventObject": {
    "shortDescription": "Describes **EventObject**, a counterpart of the <a href=\"http://api.jquery.com/category/events/event-object/\" target=\"_blank\">jQuery.Event</a> to be used without jQuery."
  },
  "EventObject.currentTarget": {
    "shortDescription": "The DOM element within the current event propagation stage."
  },
  "EventObject.data": {
    "shortDescription": "Data passed to the event handler."
  },
  "EventObject.delegateTarget": {
    "shortDescription": "The DOM element to which the currently-called event handler was attached."
  },
  "EventObject.isDefaultPrevented()": {
    "shortDescription": "Checks if the [preventDefault()](/api-reference/50%20Common/Object%20Structures/EventObject/3%20Methods/preventDefault().md '/Documentation/ApiReference/Common/Object_Structures/EventObject/Methods/#preventDefault') method was called on this event object."
  },
  "EventObject.isImmediatePropagationStopped()": {
    "shortDescription": "Checks if the [stopImmediatePropagation()](/api-reference/50%20Common/Object%20Structures/EventObject/3%20Methods/stopImmediatePropagation().md '/Documentation/ApiReference/Common/Object_Structures/EventObject/Methods/#stopImmediatePropagation') method was called on this event object."
  },
  "EventObject.isPropagationStopped()": {
    "shortDescription": "Checks if the [stopPropagation()](/api-reference/50%20Common/Object%20Structures/EventObject/3%20Methods/stopPropagation().md '/Documentation/ApiReference/Common/Object_Structures/EventObject/Methods/#stopPropagation') method was called on this event object."
  },
  "EventObject.preventDefault()": {
    "shortDescription": "Prevents the event's default action from triggering."
  },
  "EventObject.stopImmediatePropagation()": {
    "shortDescription": "Stops the event's propagation up the DOM tree, preventing the rest of the handlers from being executed."
  },
  "EventObject.stopPropagation()": {
    "shortDescription": "Stops the event's propagation up the DOM tree, keeping parent handlers unnotified of the event."
  },
  "EventObject.target": {
    "shortDescription": "The DOM element that initiated the event."
  },
  "events": {
    "shortDescription": "This namespace provides methods for controlling events without using jQuery."
  },
  "events.Event": {
    "shortDescription": ""
  },
  "events.off(element)": {
    "shortDescription": "Detaches all handlers from the specified elements."
  },
  "events.off(element, eventName)": {
    "shortDescription": "Detaches all handlers of the specified event from the specified elements."
  },
  "events.off(element, eventName, handler)": {
    "shortDescription": "Detaches an event handler from the specified elements."
  },
  "events.off(element, eventName, selector)": {
    "shortDescription": "Detaches all event handlers of the specified type attached using the [on(element, eventName, selector, data, handler)](/api-reference/50%20Common/utils/events/on(element_eventName_selector_data_handler).md '/Documentation/ApiReference/Common/utils/events/#onelement_eventName_selector_data_handler') or [on(element, eventName, selector, handler)](/api-reference/50%20Common/utils/events/on(element_eventName_selector_handler).md '/Documentation/ApiReference/Common/utils/events/#onelement_eventName_selector_handler') method."
  },
  "events.off(element, eventName, selector, handler)": {
    "shortDescription": "Detaches the specified event handler attached using the [on(element, eventName, selector, data, handler)](/api-reference/50%20Common/utils/events/on(element_eventName_selector_data_handler).md '/Documentation/ApiReference/Common/utils/events/#onelement_eventName_selector_data_handler') or [on(element, eventName, selector, handler)](/api-reference/50%20Common/utils/events/on(element_eventName_selector_handler).md '/Documentation/ApiReference/Common/utils/events/#onelement_eventName_selector_handler') method."
  },
  "events.on(element, eventName, data, handler)": {
    "shortDescription": "Attaches an event handler to the specified elements. Allows you to pass custom data to the handler."
  },
  "events.on(element, eventName, handler)": {
    "shortDescription": "Attaches an event handler to the specified elements."
  },
  "events.on(element, eventName, selector, data, handler)": {
    "shortDescription": "Attaches an event handler to the specified elements' descendants. Allows you to pass custom data to the handler."
  },
  "events.on(element, eventName, selector, handler)": {
    "shortDescription": "Attaches an event handler to the specified elements' descendants."
  },
  "events.one(element, eventName, data, handler)": {
    "shortDescription": "Attaches an event handler that is executed only once to the specified elements. Allows you to pass custom data to the handler."
  },
  "events.one(element, eventName, handler)": {
    "shortDescription": "Attaches an event handler that is executed only once to the specified elements."
  },
  "events.one(element, eventName, selector, data, handler)": {
    "shortDescription": "Attaches an event handler that is executed only once to the specified elements' descendants. Allows you to pass custom data to the handler."
  },
  "events.one(element, eventName, selector, handler)": {
    "shortDescription": "Attaches an event handler that is executed only once to the specified elements' descendants."
  },
  "events.trigger(element, event)": {
    "shortDescription": "Triggers an event for the specified elements."
  },
  "events.trigger(element, event, extraParameters)": {
    "shortDescription": "Triggers an event for the specified elements. Allows you to pass custom parameters to event handlers."
  },
  "events.triggerHandler(element, event)": {
    "shortDescription": ""
  },
  "events.triggerHandler(element, event, extraParameters)": {
    "shortDescription": ""
  },
  "eventsHandler": {
    "shortDescription": ""
  },
  "ExcelDataGridCell": {
    "shortDescription": "A [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') cell to be exported to Excel."
  },
  "ExcelDataGridCell.column": {
    "shortDescription": "The configuration of the cell's column."
  },
  "ExcelDataGridCell.data": {
    "shortDescription": "The [data object](/api-reference/10%20UI%20Components/dxDataGrid/6%20Row/data.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Row/#data') of the cell's row."
  },
  "ExcelDataGridCell.groupIndex": {
    "shortDescription": "The [group index](/concepts/05%20UI%20Components/DataGrid/45%20Grouping/20%20API/05%20Group%20Index%20and%20Key.md '/Documentation/Guide/UI_Components/DataGrid/Grouping/#API/Group_Index_and_Key') of the cell's row. Available when the [rowType](/api-reference/10%20UI%20Components/dxDataGrid/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Row/#rowType') is *\"group\"*."
  },
  "ExcelDataGridCell.groupSummaryItems": {
    "shortDescription": "Information about [group summary items](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/groupItems '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/groupItems/') the cell represents."
  },
  "ExcelDataGridCell.groupSummaryItems.name": {
    "shortDescription": "The group summary item's [identifier](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/groupItems/name.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/groupItems/#name')."
  },
  "ExcelDataGridCell.groupSummaryItems.value": {
    "shortDescription": "The group summary item's raw value."
  },
  "ExcelDataGridCell.rowType": {
    "shortDescription": "The [type](/api-reference/10%20UI%20Components/dxDataGrid/6%20Row/rowType.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Row/#rowType') of the cell's row."
  },
  "ExcelDataGridCell.totalSummaryItemName": {
    "shortDescription": "The [identifier](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/summary/totalItems/name.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/summary/totalItems/#name') of the total summary item that the cell represents."
  },
  "ExcelDataGridCell.value": {
    "shortDescription": "The cell's raw value."
  },
  "ExcelExportBaseProps": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ExcelExportBaseProps.encodeExecutableContent": {
    "shortDescription": "Specifies if the CSV export routine saves potentially dangerous content as plain text data."
  },
  "ExcelExportBaseProps.keepColumnWidths": {
    "shortDescription": "Specifies whether Excel columns should have the same width as their source UI component's columns."
  },
  "ExcelExportBaseProps.loadPanel": {
    "shortDescription": "Configures the load panel."
  },
  "ExcelExportBaseProps.topLeftCell": {
    "shortDescription": "A cell used as a start position for export."
  },
  "ExcelExportBaseProps.worksheet": {
    "shortDescription": "An Excel worksheet to which the grid should be exported."
  },
  "ExcelExportDataGridProps": {
    "shortDescription": "Properties that can be passed to the [exportDataGrid(options)](/api-reference/50%20Common/utils/excelExporter/exportDataGrid(options).md '/Documentation/ApiReference/Common/Utils/excelExporter/#exportDataGridoptions') method from the [excelExporter](/api-reference/50%20Common/utils/excelExporter '/Documentation/ApiReference/Common/Utils/excelExporter/') module."
  },
  "ExcelExportDataGridProps.autoFilterEnabled": {
    "shortDescription": "Specifies whether to enable <a href=\"https://support.office.com/en-us/article/quick-start-filter-data-by-using-an-autofilter-08647e19-11d1-42f6-b376-27b932e186e0\">Excel filtering</a> in the document."
  },
  "ExcelExportDataGridProps.component": {
    "shortDescription": "A DataGrid instance. This setting is required."
  },
  "ExcelExportDataGridProps.customizeCell": {
    "shortDescription": "Customizes an Excel cell after creation."
  },
  "ExcelExportDataGridProps.selectedRowsOnly": {
    "shortDescription": "Specifies whether to export only [selected](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/selection '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/selection/') rows."
  },
  "excelExporter": {
    "shortDescription": "An object that serves as a namespace for the methods that export DevExtreme UI components to Excel."
  },
  "excelExporter.exportDataGrid(options)": {
    "shortDescription": "Exports grid data to Excel."
  },
  "excelExporter.exportPivotGrid(options)": {
    "shortDescription": "Exports pivot grid data to Excel."
  },
  "ExcelExportPivotGridProps": {
    "shortDescription": "Properties that can be passed to the [exportPivotGrid(options)](/api-reference/50%20Common/utils/excelExporter/exportPivotGrid(options).md '/Documentation/ApiReference/Common/Utils/excelExporter/#exportPivotGridoptions') method from the [excelExporter](/api-reference/50%20Common/utils/excelExporter '/Documentation/ApiReference/Common/Utils/excelExporter/') module."
  },
  "ExcelExportPivotGridProps.component": {
    "shortDescription": "A PivotGrid instance. This setting is required."
  },
  "ExcelExportPivotGridProps.customizeCell": {
    "shortDescription": "Customizes an Excel cell after creation."
  },
  "ExcelExportPivotGridProps.exportColumnFieldHeaders": {
    "shortDescription": "Specifies whether to export headers of the column fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "ExcelExportPivotGridProps.exportDataFieldHeaders": {
    "shortDescription": "Specifies whether to export headers of the data fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "ExcelExportPivotGridProps.exportFilterFieldHeaders": {
    "shortDescription": "Specifies whether to export headers of the filter fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "ExcelExportPivotGridProps.exportRowFieldHeaders": {
    "shortDescription": "Specifies whether to export headers of the row fields on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "ExcelExportPivotGridProps.mergeColumnFieldValues": {
    "shortDescription": "Specifies whether to merge neighbouring cells in the column field if they have the same values."
  },
  "ExcelExportPivotGridProps.mergeRowFieldValues": {
    "shortDescription": "Specifies whether to merge neighbouring cells in the row field if they have the same values."
  },
  "ExcelPivotGridCell": {
    "shortDescription": "A [PivotGrid](/api-reference/10%20UI%20Components/dxPivotGrid '/Documentation/ApiReference/UI_Components/dxPivotGrid/') cell to be exported to Excel."
  },
  "ExcelPivotGridCell.area": {
    "shortDescription": "The [area](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/area.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#area') to which the cell belongs."
  },
  "ExcelPivotGridCell.columnIndex": {
    "shortDescription": "A zero-based index that indicates the position of the cell's column."
  },
  "ExcelPivotGridCell.headerType": {
    "shortDescription": "The header type. Available if the cell belongs to the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "ExcelPivotGridCell.rowIndex": {
    "shortDescription": "A zero-based index that indicates the position of the cell's row."
  },
  "Export": {
    "shortDescription": "Configures client-side exporting."
  },
  "ExportInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ExportInfo.fileName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ExportInfo.format": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ExportLoadPanel": {
    "shortDescription": "Configures the load panel."
  },
  "ExportLoadPanel.enabled": {
    "shortDescription": "Specifies whether the load panel is enabled."
  },
  "ExportLoadPanel.height": {
    "shortDescription": "Specifies the height of the load panel in pixels."
  },
  "ExportLoadPanel.indicatorSrc": {
    "shortDescription": "Specifies a URL pointing to an image to be used as a loading indicator."
  },
  "ExportLoadPanel.shading": {
    "shortDescription": "Specifies whether to shade the UI component when the load panel is shown."
  },
  "ExportLoadPanel.shadingColor": {
    "shortDescription": "Specifies the shading color. Applies only if [shading](/api-reference/_hidden/ExportLoadPanel/shading.md '{currentpath}/#shading') is **true**."
  },
  "ExportLoadPanel.showIndicator": {
    "shortDescription": "Specifies whether to show the loading indicator."
  },
  "ExportLoadPanel.showPane": {
    "shortDescription": "Specifies whether to show the pane of the load panel."
  },
  "ExportLoadPanel.text": {
    "shortDescription": "Specifies text displayed on the load panel."
  },
  "ExportLoadPanel.width": {
    "shortDescription": "Specifies the width of the load panel in pixels."
  },
  "ExportTexts": {
    "shortDescription": "Configures the texts of export commands, buttons, and hints."
  },
  "FileSavingEventInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FileSavingEventInfo.component": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FileSavingEventInfo.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FileSavingEventInfo.element": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FileSavingEventInfo.fileName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FileSavingEventInfo.format": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FileSystemError": {
    "shortDescription": "An object that contains information about the error."
  },
  "FileSystemError.errorCode": {
    "shortDescription": "The error code."
  },
  "FileSystemError.errorText": {
    "shortDescription": "The error message."
  },
  "FileSystemError.fileSystemItem": {
    "shortDescription": "The processed file or directory."
  },
  "FileSystemItem": {
    "shortDescription": "An object that provides information about a file system item (file or directory) in the [FileManager](/api-reference/10%20UI%20Components/dxFileManager '/Documentation/ApiReference/UI_Components/dxFileManager/') UI component."
  },
  "FileSystemItem.dataItem": {
    "shortDescription": "The file system data object that stores information about the file system item (name, size, modification date, etc.)."
  },
  "FileSystemItem.dateModified": {
    "shortDescription": "A timestamp that indicates when the file system item was last modified."
  },
  "FileSystemItem.getFileExtension()": {
    "shortDescription": "Gets a file's extension."
  },
  "FileSystemItem.hasSubDirectories": {
    "shortDescription": "Specifies whether a directory has subdirectories."
  },
  "FileSystemItem.isDirectory": {
    "shortDescription": "Specifies whether the file system item is a directory."
  },
  "FileSystemItem.key": {
    "shortDescription": "The file system item's key."
  },
  "FileSystemItem.name": {
    "shortDescription": "The file system item's name."
  },
  "FileSystemItem.path": {
    "shortDescription": "The file system item's path."
  },
  "FileSystemItem.pathKeys": {
    "shortDescription": "The file system item's path specified in keys."
  },
  "FileSystemItem.size": {
    "shortDescription": "The file system item's size (in bytes)."
  },
  "FileSystemItem.thumbnail": {
    "shortDescription": "An icon (URL) to be used as the file system item's thumbnail."
  },
  "FileSystemProviderBase": {
    "shortDescription": "Contains base provider settings."
  },
  "FileSystemProviderBase.abortFileUpload()": {
    "shortDescription": "Cancels the file upload."
  },
  "FileSystemProviderBase.copyItems()": {
    "shortDescription": "Copies files or directories."
  },
  "FileSystemProviderBase.createDirectory()": {
    "shortDescription": "Creates a directory."
  },
  "FileSystemProviderBase.deleteItems()": {
    "shortDescription": "Deletes files or directories."
  },
  "FileSystemProviderBase.downloadItems()": {
    "shortDescription": "Downloads files."
  },
  "FileSystemProviderBase.getItems()": {
    "shortDescription": "Gets file system items."
  },
  "FileSystemProviderBase.getItemsContent()": {
    "shortDescription": "Gets items content."
  },
  "FileSystemProviderBase.moveItems()": {
    "shortDescription": "Moves files and directories."
  },
  "FileSystemProviderBase.renameItem()": {
    "shortDescription": "Renames a file or directory."
  },
  "FileSystemProviderBase.uploadFileChunk()": {
    "shortDescription": "Uploads a file in chunks."
  },
  "FileSystemProviderBaseOptions.dateModifiedExpr": {
    "shortDescription": "Specifies which data field provides timestamps that indicate when a file was last modified."
  },
  "FileSystemProviderBaseOptions.isDirectoryExpr": {
    "shortDescription": "Specifies which data field provides information about whether a file system item is a directory."
  },
  "FileSystemProviderBaseOptions.keyExpr": {
    "shortDescription": "Specifies the data field that provides keys."
  },
  "FileSystemProviderBaseOptions.nameExpr": {
    "shortDescription": "Specifies which data field provides file and directory names."
  },
  "FileSystemProviderBaseOptions.sizeExpr": {
    "shortDescription": "Specifies which data field provides file sizes."
  },
  "FileSystemProviderBaseOptions.thumbnailExpr": {
    "shortDescription": "Specifies which data field provides icons to be used as thumbnails."
  },
  "FilterDescriptor": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FilterPanel": {
    "shortDescription": "Configures the filter panel."
  },
  "FilterPanelTexts": {
    "shortDescription": "Specifies texts for the filter panel's elements."
  },
  "FilterRow": {
    "shortDescription": "Configures the filter row."
  },
  "FilterRowOperationDescriptions": {
    "shortDescription": "Specifies descriptions for filter operations on the filter list."
  },
  "Font": {
    "shortDescription": "Font properties."
  },
  "Font.color": {
    "shortDescription": "Specifies font color."
  },
  "Font.family": {
    "shortDescription": "Specifies font family."
  },
  "Font.opacity": {
    "shortDescription": "Specifies font opacity."
  },
  "Font.size": {
    "shortDescription": "Specifies font size."
  },
  "Font.weight": {
    "shortDescription": "Specifies font weight. Accepts values from 100 to 900 in increments of 100. Higher values increase boldness."
  },
  "Format": {
    "shortDescription": "Formats values."
  },
  "Format.currency": {
    "shortDescription": "Specifies a 3-letter <a href=\"http://www.currency-iso.org/en/home/tables/table-a1.html\" target=\"_blank\">ISO 4217</a> code for currency. Applies only if the [type](/api-reference/50%20Common/Object%20Structures/format/type.md '/Documentation/ApiReference/Common/Object_Structures/Format/#type') is *\"currency\"*."
  },
  "Format.formatter": {
    "shortDescription": "A function that converts numeric or date-time values to a string."
  },
  "Format.parser": {
    "shortDescription": "Parses string values into numeric or date-time values. Should be used with [formatter](/api-reference/50%20Common/Object%20Structures/format/formatter.md '/Documentation/ApiReference/Common/Object_Structures/format/#formatter') or one of the [predefined formats](/api-reference/50%20Common/Object%20Structures/format/type.md '/Documentation/ApiReference/Common/Object_Structures/format/#type')."
  },
  "Format.precision": {
    "shortDescription": "Specifies a precision for values of numeric or currency [format types](/api-reference/50%20Common/Object%20Structures/format/type.md '/Documentation/ApiReference/Common/Object_Structures/format/#type')."
  },
  "Format.type": {
    "shortDescription": "Specifies a predefined format. Does not apply if you have specified the [formatter](/api-reference/50%20Common/Object%20Structures/format/formatter.md '/Documentation/ApiReference/Common/Object_Structures/Format/#formatter') function."
  },
  "Format.useCurrencyAccountingStyle": {
    "shortDescription": "Specifies whether to apply the accounting style to formatted numbers of the `currency` [type](/api-reference/50%20Common/Object%20Structures/format/type.md '/Documentation/ApiReference/Common/Object_Structures/format/#type')."
  },
  "FunnelItemInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FunnelItemInfo.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "FunnelLegendItem": {
    "shortDescription": "An object that provides information about a legend item in the [Funnel](/api-reference/10%20UI%20Components/dxFunnel '/Documentation/ApiReference/UI_Components/dxFunnel/') UI component."
  },
  "FunnelLegendItem.item": {
    "shortDescription": "The funnel item that the legend item represents."
  },
  "fx": {
    "shortDescription": "An object that serves as a namespace for the methods that are used to animate UI elements."
  },
  "fx.animate(element, config)": {
    "shortDescription": "Animates an element."
  },
  "fx.isAnimating(element)": {
    "shortDescription": "Checks whether an element is being animated."
  },
  "fx.stop(element, jumpToEnd)": {
    "shortDescription": "Stops an element's animation."
  },
  "GaugeIndicator": {
    "shortDescription": "A base object for gauge value and subvalue indicators. Includes the properties of indicators of all types."
  },
  "GaugeIndicator.type": {
    "shortDescription": "Specifies the type of gauge indicators."
  },
  "GlobalConfig": {
    "shortDescription": "Specifies settings that affect all DevExtreme UI components."
  },
  "GlobalConfig.decimalSeparator": {
    "shortDescription": "A decimal separator. No longer applies.",
    "depNote": null
  },
  "GlobalConfig.defaultCurrency": {
    "shortDescription": "The default currency. Accepts a 3-letter <a href=\"https://www.currency-iso.org/en/home/tables/table-a1.html\" target=\"_blank\">ISO 4217</a> code."
  },
  "GlobalConfig.defaultUseCurrencyAccountingStyle": {
    "shortDescription": "Specifies whether to apply the accounting style to formatted numbers of the `currency` [type](/api-reference/50%20Common/Object%20Structures/format/type.md '/Documentation/ApiReference/Common/Object_Structures/format/#type')."
  },
  "GlobalConfig.editorStylingMode": {
    "shortDescription": "Specifies how editors' text fields are styled in your application."
  },
  "GlobalConfig.floatingActionButtonConfig": {
    "shortDescription": "Configures a Floating Action Button (FAB) that emits a stack of [related actions](/api-reference/10%20UI%20Components/dxSpeedDialAction '/Documentation/ApiReference/UI_Components/dxSpeedDialAction/') (speed dial)."
  },
  "GlobalConfig.floatingActionButtonConfig.closeIcon": {
    "shortDescription": "Specifies the icon the FAB displays when the speed dial is opened."
  },
  "GlobalConfig.floatingActionButtonConfig.direction": {
    "shortDescription": "Specifies the direction in which to open the speed dial menu."
  },
  "GlobalConfig.floatingActionButtonConfig.icon": {
    "shortDescription": "Specifies the icon the FAB displays when the speed dial is closed."
  },
  "GlobalConfig.floatingActionButtonConfig.label": {
    "shortDescription": "Specifies the text label displayed inside the FAB."
  },
  "GlobalConfig.floatingActionButtonConfig.maxSpeedDialActionCount": {
    "shortDescription": "Limits the number of [speed dial actions](/api-reference/10%20UI%20Components/dxSpeedDialAction '/Documentation/ApiReference/UI_Components/dxSpeedDialAction/')."
  },
  "GlobalConfig.floatingActionButtonConfig.position": {
    "shortDescription": "Positions the FAB on the screen."
  },
  "GlobalConfig.floatingActionButtonConfig.shading": {
    "shortDescription": "If **true**, the background should be shaded when the speed dial menu is open."
  },
  "GlobalConfig.forceIsoDateParsing": {
    "shortDescription": "Specifies whether dates are parsed and serialized according to the ISO 8601 standard in all browsers."
  },
  "GlobalConfig.licenseKey": {
    "shortDescription": "A license key."
  },
  "GlobalConfig.oDataFilterToLower": {
    "shortDescription": "Specifies whether to convert string values to lowercase in filter and search requests to OData services. Applies to the following operations: *\"startswith\"*, *\"endswith\"*, *\"contains\"*, and *\"notcontains\"*."
  },
  "GlobalConfig.rtlEnabled": {
    "shortDescription": "Specifies whether the UI components support a right-to-left representation. Available for individual UI components as well."
  },
  "GlobalConfig.serverDecimalSeparator": {
    "shortDescription": "The decimal separator that is used when submitting a value to the server."
  },
  "GlobalConfig.thousandsSeparator": {
    "shortDescription": "A group separator. No longer applies.",
    "depNote": null
  },
  "GlobalConfig.useJQuery": {
    "shortDescription": "Specifies whether DevExtreme UI components use jQuery."
  },
  "GradientColor": {
    "shortDescription": "Specifies colors on which gradient is based."
  },
  "GradientColor.color": {
    "shortDescription": "Specifies one of the gradient colors."
  },
  "GradientColor.offset": {
    "shortDescription": "Specifies the starting point of a color."
  },
  "GridBase": {
    "shortDescription": "The base class for UI components."
  },
  "GridBase.adaptiveDetailRowPreparing": {
    "shortDescription": "Raised before an adaptive detail row is rendered."
  },
  "GridBase.beginCustomLoading(messageText)": {
    "shortDescription": "Shows the [load panel](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/loadPanel '{basewidgetpath}/Configuration/loadPanel/')."
  },
  "GridBase.byKey(key)": {
    "shortDescription": "Gets a data object with a specific key."
  },
  "GridBase.cancelEditData()": {
    "shortDescription": "Discards changes that a user made to data."
  },
  "GridBase.cellValue(rowIndex, dataField)": {
    "shortDescription": "Gets the value of a cell with a specific row index and a data field, column caption or name."
  },
  "GridBase.cellValue(rowIndex, dataField, value)": {
    "shortDescription": "Sets a new value to a cell with a specific row index and a data field, column caption or name."
  },
  "GridBase.cellValue(rowIndex, visibleColumnIndex)": {
    "shortDescription": "Gets the value of a cell with specific row and column indexes."
  },
  "GridBase.cellValue(rowIndex, visibleColumnIndex, value)": {
    "shortDescription": "Sets a new value to a cell with specific row and column indexes."
  },
  "GridBase.clearFilter()": {
    "shortDescription": "Clears all filters applied to UI component rows."
  },
  "GridBase.clearFilter(filterName)": {
    "shortDescription": "Clears all row filters of a specific type."
  },
  "GridBase.clearSelection()": {
    "shortDescription": "Clears selection of all rows on all pages."
  },
  "GridBase.clearSorting()": {
    "shortDescription": "Clears sorting settings of all columns at once."
  },
  "GridBase.closeEditCell()": {
    "shortDescription": "Switches the cell being edited back to the normal state. Takes effect only if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *batch* or *cell* and [showEditorAlways](/api-reference/_hidden/GridBaseColumn/showEditorAlways.md '{basewidgetpath}/Configuration/columns/#showEditorAlways') is **false**."
  },
  "GridBase.collapseAdaptiveDetailRow()": {
    "shortDescription": "Collapses the currently expanded adaptive detail row (if there is one)."
  },
  "GridBase.columnCount()": {
    "shortDescription": "Gets the data column count. Includes visible and hidden columns, excludes command columns."
  },
  "GridBase.columnOption(id)": {
    "shortDescription": "Gets all properties of a column with a specific identifier."
  },
  "GridBase.columnOption(id, optionName)": {
    "shortDescription": "Gets the value of a single column property."
  },
  "GridBase.columnOption(id, optionName, optionValue)": {
    "shortDescription": "Updates the value of a single column property."
  },
  "GridBase.columnOption(id, options)": {
    "shortDescription": "Updates the values of several column properties."
  },
  "GridBase.dataErrorOccurred": {
    "shortDescription": "Raised when an error occurs in the data source."
  },
  "GridBase.deleteColumn(id)": {
    "shortDescription": "Removes a column."
  },
  "GridBase.deleteRow(rowIndex)": {
    "shortDescription": "Removes a row with a specific index."
  },
  "GridBase.deselectAll()": {
    "shortDescription": "Clears the selection of all rows on all pages or the currently rendered page only."
  },
  "GridBase.deselectRows(keys)": {
    "shortDescription": "Cancels the selection of rows with specific keys."
  },
  "GridBase.editCanceled": {
    "shortDescription": "Raised after row changes are discarded."
  },
  "GridBase.editCanceling": {
    "shortDescription": "Raised when the edit operation is canceled, but row changes are not yet discarded."
  },
  "GridBase.editCell(rowIndex, dataField)": {
    "shortDescription": "Switches a cell with a specific row index and a data field to the editing state. Takes effect only if the [editing mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"batch\"* or *\"cell\"*."
  },
  "GridBase.editCell(rowIndex, visibleColumnIndex)": {
    "shortDescription": "Switches a cell with specific row and column indexes to the editing state. Takes effect only if the [editing mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"batch\"* or *\"cell\"*."
  },
  "GridBase.editRow(rowIndex)": {
    "shortDescription": "Switches a row with a specific index to the editing state. Takes effect only if the [editing mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"row\"*, *\"popup\"* or *\"form\"*."
  },
  "GridBase.endCustomLoading()": {
    "shortDescription": "Hides the [load panel](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/loadPanel '{basewidgetpath}/Configuration/loadPanel/')."
  },
  "GridBase.expandAdaptiveDetailRow(key)": {
    "shortDescription": "Expands an adaptive detail row."
  },
  "GridBase.filter()": {
    "shortDescription": "Gets a filter expression applied to the UI component's data source using the [filter(filterExpr)](/api-reference/10%20UI%20Components/GridBase/3%20Methods/filter(filterExpr).md '{basewidgetpath}/Methods/#filterfilterExpr') method and the **DataSource**'s [filter](/api-reference/30%20Data%20Layer/DataSource/1%20Configuration/filter.md '/Documentation/ApiReference/Data_Layer/DataSource/Configuration/#filter') property."
  },
  "GridBase.filter(filterExpr)": {
    "shortDescription": "Applies a filter to the [dataSource](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/dataSource.md '{basewidgetpath}/Configuration/#dataSource')."
  },
  "GridBase.focus(element)": {
    "shortDescription": "Sets focus on a specific cell."
  },
  "GridBase.getCellElement(rowIndex, dataField)": {
    "shortDescription": "Gets a cell with a specific row index and a data field, column caption or name."
  },
  "GridBase.getCellElement(rowIndex, visibleColumnIndex)": {
    "shortDescription": "Gets a cell with specific row and column indexes."
  },
  "GridBase.getCombinedFilter()": {
    "shortDescription": "Gets the total filter that combines all the filters applied."
  },
  "GridBase.getCombinedFilter(returnDataField)": {
    "shortDescription": "Gets the total filter that combines all the filters applied."
  },
  "GridBase.getKeyByRowIndex(rowIndex)": {
    "shortDescription": "Gets the key of a row with a specific index."
  },
  "GridBase.getRowElement(rowIndex)": {
    "shortDescription": "Gets the container of a row with a specific index."
  },
  "GridBase.getRowIndexByKey(key)": {
    "shortDescription": "Gets the index of a row with a specific key."
  },
  "GridBase.getScrollable()": {
    "shortDescription": "Gets the instance of the UI component's scrollable part."
  },
  "GridBase.getVisibleColumnIndex(id)": {
    "shortDescription": "Gets the index of a visible column."
  },
  "GridBase.hasEditData()": {
    "shortDescription": "Checks whether the UI component has unsaved changes."
  },
  "GridBase.hideColumnChooser()": {
    "shortDescription": "Hides the [column chooser](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columnChooser '{basewidgetpath}/Configuration/columnChooser/')."
  },
  "GridBase.initNewRow": {
    "shortDescription": "Raised before a new row is added to the UI component."
  },
  "GridBase.isAdaptiveDetailRowExpanded(key)": {
    "shortDescription": "Checks whether an adaptive detail row is expanded or collapsed."
  },
  "GridBase.isRowFocused(key)": {
    "shortDescription": "Checks whether a row with a specific key is focused."
  },
  "GridBase.isRowSelected(key)": {
    "shortDescription": "Checks whether a row with a specific key is selected."
  },
  "GridBase.keyDown": {
    "shortDescription": "Raised when the UI component is in focus and a key has been pressed down."
  },
  "GridBase.keyOf(obj)": {
    "shortDescription": "Gets a data object's key."
  },
  "GridBase.navigateToRow(key)": {
    "shortDescription": "Navigates to a row with the specified key."
  },
  "GridBase.pageCount()": {
    "shortDescription": "Gets the total page count."
  },
  "GridBase.pageIndex()": {
    "shortDescription": "Gets the current page index."
  },
  "GridBase.pageIndex(newIndex)": {
    "shortDescription": "Switches the UI component to a specific page using a zero-based index."
  },
  "GridBase.pageSize()": {
    "shortDescription": "Gets the current [page size](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/paging/pageSize.md '{basewidgetpath}/Configuration/paging/#pageSize')."
  },
  "GridBase.pageSize(value)": {
    "shortDescription": "Sets the [page size](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/paging/pageSize.md '{basewidgetpath}/Configuration/paging/#pageSize')."
  },
  "GridBase.refresh()": {
    "shortDescription": "Reloads data and repaints data rows."
  },
  "GridBase.refresh(changesOnly)": {
    "shortDescription": "Reloads data and repaints all or only updated data rows."
  },
  "GridBase.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "GridBase.repaintRows(rowIndexes)": {
    "shortDescription": "Repaints specific rows."
  },
  "GridBase.rowCollapsed": {
    "shortDescription": "Raised after a row is collapsed."
  },
  "GridBase.rowCollapsing": {
    "shortDescription": "Raised before a row is collapsed."
  },
  "GridBase.rowExpanded": {
    "shortDescription": "Raised after a row is expanded."
  },
  "GridBase.rowExpanding": {
    "shortDescription": "Raised before a row is expanded."
  },
  "GridBase.rowInserted": {
    "shortDescription": "Raised after a new row has been inserted into the data source."
  },
  "GridBase.rowInserting": {
    "shortDescription": "Raised before a new row is inserted into the data source."
  },
  "GridBase.rowRemoved": {
    "shortDescription": "Raised after a row has been removed from the data source."
  },
  "GridBase.rowRemoving": {
    "shortDescription": "Raised before a row is removed from the data source."
  },
  "GridBase.rowUpdated": {
    "shortDescription": "Raised after a row has been updated in the data source."
  },
  "GridBase.rowUpdating": {
    "shortDescription": "Raised before a row is updated in the data source."
  },
  "GridBase.rowValidating": {
    "shortDescription": "Raised after cells in a row are validated against [validation rules](/api-reference/_hidden/GridBaseColumn/validationRules.md '{basewidgetpath}/Configuration/columns/#validationRules')."
  },
  "GridBase.saved": {
    "shortDescription": "Raised after row changes are saved."
  },
  "GridBase.saveEditData()": {
    "shortDescription": "Saves changes that a user made to data."
  },
  "GridBase.saving": {
    "shortDescription": "Raised before pending row changes are saved."
  },
  "GridBase.searchByText(text)": {
    "shortDescription": "Seeks a search string in the columns whose [allowSearch](/api-reference/_hidden/GridBaseColumn/allowSearch.md '{basewidgetpath}/Configuration/columns/#allowSearch') property is **true**."
  },
  "GridBase.selectAll()": {
    "shortDescription": "Selects all rows."
  },
  "GridBase.selectionChanged": {
    "shortDescription": "Raised after selecting a row or clearing its selection."
  },
  "GridBase.selectRows(keys, preserve)": {
    "shortDescription": "Selects rows with specific keys."
  },
  "GridBase.selectRowsByIndexes(indexes)": {
    "shortDescription": "Selects rows with specific indexes."
  },
  "GridBase.showColumnChooser()": {
    "shortDescription": "Shows the [column chooser](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columnChooser '{basewidgetpath}/Configuration/columnChooser/')."
  },
  "GridBase.startSelectionWithCheckboxes()": {
    "shortDescription": ""
  },
  "GridBase.state()": {
    "shortDescription": "Gets the current UI component state."
  },
  "GridBase.state(state)": {
    "shortDescription": "Sets the UI component state."
  },
  "GridBase.stopSelectionWithCheckboxes()": {
    "shortDescription": ""
  },
  "GridBase.toolbarPreparing": {
    "shortDescription": "Raised before the toolbar is created."
  },
  "GridBase.undeleteRow(rowIndex)": {
    "shortDescription": "Recovers a row deleted in *batch* [editing mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode')."
  },
  "GridBase.updateDimensions()": {
    "shortDescription": "Updates the UI component's content after resizing."
  },
  "GridBaseColumn.alignment": {
    "shortDescription": "Aligns the content of the column."
  },
  "GridBaseColumn.allowEditing": {
    "shortDescription": "Specifies whether a user can edit values in the column at runtime. By default, inherits the value of the **editing**.[allowUpdating](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing/allowUpdating.md '{basewidgetpath}/Configuration/editing/#allowUpdating') property."
  },
  "GridBaseColumn.allowFiltering": {
    "shortDescription": "Specifies whether data can be filtered by this column. Applies only if [filterRow](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterRow '{basewidgetpath}/Configuration/filterRow/').**visible** is **true**."
  },
  "GridBaseColumn.allowFixing": {
    "shortDescription": "Specifies whether a user can fix the column at runtime. Applies only if **columnFixing**.[enabled](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columnFixing/enabled.md '{basewidgetpath}/Configuration/columnFixing/#enabled') is **true**."
  },
  "GridBaseColumn.allowHeaderFiltering": {
    "shortDescription": "Specifies whether the header filter can be used to filter data by this column. Applies only if [headerFilter](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/headerFilter '{basewidgetpath}/Configuration/headerFilter/').**visible** is **true**. By default, inherits the value of the [allowFiltering](/api-reference/_hidden/GridBaseColumn/allowFiltering.md '{basewidgetpath}/Configuration/columns/#allowFiltering') property."
  },
  "GridBaseColumn.allowHiding": {
    "shortDescription": "Specifies whether a user can hide the column using the column chooser at runtime. Applies only if **columnChooser**.[enabled](/api-reference/40%20Common%20Types/15%20grids/ColumnChooser/enabled.md '{basewidgetpath}/Configuration/columnChooser/#enabled') is **true**."
  },
  "GridBaseColumn.allowReordering": {
    "shortDescription": "Specifies whether users can reorder this column. Overrides the [allowColumnReordering](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/allowColumnReordering.md '{basewidgetpath}/Configuration/#allowColumnReordering') property value."
  },
  "GridBaseColumn.allowResizing": {
    "shortDescription": "Specifies whether a user can resize the column at runtime. Applies only if [allowColumnResizing](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/allowColumnResizing.md '{basewidgetpath}/Configuration/#allowColumnResizing') is **true**."
  },
  "GridBaseColumn.allowSearch": {
    "shortDescription": "Specifies whether this column can be searched. Applies only if [searchPanel](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/searchPanel '{basewidgetpath}/Configuration/searchPanel/').**visible** is **true**. Inherits the value of the [allowFiltering](/api-reference/_hidden/GridBaseColumn/allowFiltering.md '{basewidgetpath}/Configuration/columns/#allowFiltering') property by default."
  },
  "GridBaseColumn.allowSorting": {
    "shortDescription": "Specifies whether a user can sort rows by this column at runtime. Applies only if **sorting**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/sorting/mode.md '{basewidgetpath}/Configuration/sorting/#mode') differs from *\"none\"*."
  },
  "GridBaseColumn.calculateCellValue": {
    "shortDescription": "Calculates custom cell values. Use this function to create an unbound data column."
  },
  "GridBaseColumn.calculateDisplayValue": {
    "shortDescription": "Calculates custom display values for column cells. Requires specifying the [dataField](/api-reference/_hidden/GridBaseColumn/dataField.md '{basewidgetpath}/Configuration/columns/#dataField') or [calculateCellValue](/api-reference/_hidden/GridBaseColumn/calculateCellValue.md '{basewidgetpath}/Configuration/columns/#calculateCellValue') property. Used in [lookup optimization](/concepts/05%20UI%20Components/DataGrid/10%20Enhance%20Performance%20on%20Large%20Datasets/020%20Lookup%20Optimization.md '/Documentation/Guide/UI_Components/DataGrid/Enhance_Performance_on_Large_Datasets/#Lookup_Optimization')."
  },
  "GridBaseColumn.calculateFilterExpression": {
    "shortDescription": "Specifies the column's custom rules to filter data."
  },
  "GridBaseColumn.calculateSortValue": {
    "shortDescription": "Calculates custom values used to sort this column."
  },
  "GridBaseColumn.caption": {
    "shortDescription": "Specifies a caption for the column."
  },
  "GridBaseColumn.cssClass": {
    "shortDescription": "Specifies a <a href=\"http://www.w3schools.com/cssref/sel_class.asp\" target=\"_blank\">CSS class</a> to be applied to the column."
  },
  "GridBaseColumn.customizeText": {
    "shortDescription": "Customizes the text displayed in column cells."
  },
  "GridBaseColumn.dataField": {
    "shortDescription": "Binds the column to a field of the [dataSource](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/dataSource.md '{basewidgetpath}/Configuration/#dataSource')."
  },
  "GridBaseColumn.dataType": {
    "shortDescription": "Casts column values to a specific data type."
  },
  "GridBaseColumn.editorOptions": {
    "shortDescription": "Configures the default UI component used for [editing](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing '{basewidgetpath}/Configuration/editing/') and filtering in the [filter row](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterRow '{basewidgetpath}/Configuration/filterRow/')."
  },
  "GridBaseColumn.encodeHtml": {
    "shortDescription": "Specifies whether HTML tags are displayed as plain text or applied to the values of the column."
  },
  "GridBaseColumn.falseText": {
    "shortDescription": "In a [boolean](/api-reference/_hidden/GridBaseColumn/dataType.md '{basewidgetpath}/Configuration/columns/#dataType') column, replaces all **false** items with a specified text. Applies only if [showEditorAlways](/api-reference/_hidden/GridBaseColumn/showEditorAlways.md '{basewidgetpath}/Configuration/columns/#showEditorAlways') property is **false**."
  },
  "GridBaseColumn.filterOperations": {
    "shortDescription": "Specifies available filter operations. Applies if [allowFiltering](/api-reference/_hidden/GridBaseColumn/allowFiltering.md '{basewidgetpath}/Configuration/columns/#allowFiltering') is **true** and the [filterRow](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterRow '{basewidgetpath}/Configuration/filterRow/') and/or [filterPanel](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterPanel '{basewidgetpath}/Configuration/filterPanel/') are visible."
  },
  "GridBaseColumn.filterType": {
    "shortDescription": "Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values. Applies only if [headerFilter](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/headerFilter '{basewidgetpath}/Configuration/headerFilter/').**visible** and [allowHeaderFiltering](/api-reference/_hidden/GridBaseColumn/allowHeaderFiltering.md '{basewidgetpath}/Configuration/columns/#allowHeaderFiltering') are **true**."
  },
  "GridBaseColumn.filterValue": {
    "shortDescription": "Specifies the value to display in the [filter row](/concepts/05%20UI%20Components/DataGrid/30%20Filtering%20and%20Searching/1%20Filter%20Row.md '/Documentation/Guide/UI_Components/{WidgetName}/Filtering_and_Searching/#Filter_Row')."
  },
  "GridBaseColumn.filterValues": {
    "shortDescription": "Sets the values in the [header filter](/concepts/05%20UI%20Components/DataGrid/30%20Filtering%20and%20Searching/2%20Header%20Filter.md '/Documentation/Guide/UI_Components/{WidgetName}/Filtering_and_Searching/#Header_Filter')."
  },
  "GridBaseColumn.fixed": {
    "shortDescription": "Fixes the column."
  },
  "GridBaseColumn.fixedPosition": {
    "shortDescription": "Specifies the column position. Applies only if **columns[]**.[fixed](/api-reference/_hidden/GridBaseColumn/fixed.md '{basewidgetpath}/Configuration/columns/#fixed') is **true**."
  },
  "GridBaseColumn.format": {
    "shortDescription": "Formats a value before it is displayed in a column cell."
  },
  "GridBaseColumn.formItem": {
    "shortDescription": "Configures the form item that the column produces in the editing state. Applies only if **editing**.[mode](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"form\"* or *\"popup\"*."
  },
  "GridBaseColumn.headerFilter": {
    "shortDescription": "Specifies data settings for the header filter."
  },
  "GridBaseColumn.headerFilter.allowSearch": {
    "shortDescription": "Specifies whether searching is enabled in the header filter.",
    "depNote": "Use DataGrid [search.enabled](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/enabled.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/headerFilter/search/#enabled'), TreeList [search.enabled](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/enabled.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/columns/headerFilter/search/#enabled'), or Gantt [search.enabled](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/enabled.md '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/columns/headerFilter/search/#enabled') instead."
  },
  "GridBaseColumn.headerFilter.allowSelectAll": {
    "shortDescription": "Specifies whether a \"Select All\" option is available to users."
  },
  "GridBaseColumn.headerFilter.dataSource": {
    "shortDescription": "Specifies the header filter's data source."
  },
  "GridBaseColumn.headerFilter.groupInterval": {
    "shortDescription": "Specifies how the header filter combines values into groups. Does not apply if you [specify a custom header filter data source](/concepts/05%20UI%20Components/DataGrid/99%20How%20To/Customize%20Header%20Filter%20Data%20Source/10%20Specify%20a%20Custom%20Data%20Source.md '/Documentation/Guide/UI_Components/DataGrid/How_To/Customize_Header_Filter_Data_Source/#Specify_a_Custom_Data_Source')."
  },
  "GridBaseColumn.headerFilter.height": {
    "shortDescription": "Specifies the height of the popup menu containing filtering values."
  },
  "GridBaseColumn.headerFilter.search": {
    "shortDescription": "Configures the header filter's search functionality."
  },
  "GridBaseColumn.headerFilter.searchMode": {
    "shortDescription": "Specifies a comparison operation used to search header filter values.",
    "depNote": "Use DataGrid [search.mode](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/mode.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columns/headerFilter/search/#mode'), TreeList [search.mode](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/mode.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/columns/headerFilter/search/#mode'), or Gantt [search.mode](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/mode.md '/Documentation/ApiReference/UI_Components/dxGantt/Configuration/columns/headerFilter/search/#mode') instead."
  },
  "GridBaseColumn.headerFilter.width": {
    "shortDescription": "Specifies the width of the popup menu containing filtering values."
  },
  "GridBaseColumn.hidingPriority": {
    "shortDescription": "Specifies the order in which columns are hidden when the UI component adapts to the screen or container size. Ignored if [allowColumnResizing](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/allowColumnResizing.md '{basewidgetpath}/Configuration/#allowColumnResizing') is `true` and [columnResizingMode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columnResizingMode.md '{basewidgetpath}/Configuration/#columnResizingMode') is *\"widget\"*."
  },
  "GridBaseColumn.isBand": {
    "shortDescription": "Specifies whether the column organizes other columns into bands."
  },
  "GridBaseColumn.lookup": {
    "shortDescription": "Specifies properties of a lookup column."
  },
  "GridBaseColumn.lookup.allowClearing": {
    "shortDescription": "Specifies whether to display the Clear button in lookup column cells while they are being edited."
  },
  "GridBaseColumn.lookup.calculateCellValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "GridBaseColumn.lookup.dataSource": {
    "shortDescription": "Specifies the data source for the lookup column."
  },
  "GridBaseColumn.lookup.displayExpr": {
    "shortDescription": "Specifies the data source field whose values must be displayed."
  },
  "GridBaseColumn.lookup.valueExpr": {
    "shortDescription": "Specifies the data field whose values should be replaced with values from the [displayExpr](/api-reference/_hidden/GridBaseColumn/lookup/displayExpr.md '{basewidgetpath}/Configuration/columns/lookup/#displayExpr') field."
  },
  "GridBaseColumn.minWidth": {
    "shortDescription": "Specifies the minimum width of the column."
  },
  "GridBaseColumn.name": {
    "shortDescription": "Specifies the column's unique identifier. If not set in code, this value is inherited from the [dataField](/api-reference/_hidden/GridBaseColumn/dataField.md '{basewidgetpath}/Configuration/columns/#dataField')."
  },
  "GridBaseColumn.ownerBand": {
    "shortDescription": "Specifies the band column that owns the current column. Accepts the index of the band column in the **columns** array."
  },
  "GridBaseColumn.renderAsync": {
    "shortDescription": "Specifies whether to render the column after other columns and elements. Use if column cells have a complex [template](/api-reference/_hidden/dxDataGridColumn/cellTemplate.md '{basewidgetpath}/Configuration/columns/#cellTemplate'). Requires the [width](/api-reference/_hidden/GridBaseColumn/width.md '{basewidgetpath}/Configuration/columns/#width') property specified."
  },
  "GridBaseColumn.selectedFilterOperation": {
    "shortDescription": "Specifies a filter operation that applies when users use the [filter row](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterRow '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/filterRow/') to filter the column."
  },
  "GridBaseColumn.setCellValue": {
    "shortDescription": "Specifies a function to be invoked after the user has edited a cell value, but before it is saved in the data source."
  },
  "GridBaseColumn.showEditorAlways": {
    "shortDescription": "Specifies whether the column displays its values in editors."
  },
  "GridBaseColumn.showInColumnChooser": {
    "shortDescription": "Specifies whether the [column chooser](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columnChooser '{basewidgetpath}/Configuration/columnChooser/') can contain the column header."
  },
  "GridBaseColumn.sortIndex": {
    "shortDescription": "Specifies the index according to which columns participate in sorting."
  },
  "GridBaseColumn.sortingMethod": {
    "shortDescription": "Specifies a custom comparison function for sorting. Applies only when sorting is performed on the client."
  },
  "GridBaseColumn.sortOrder": {
    "shortDescription": "Specifies the sort order of column values."
  },
  "GridBaseColumn.trueText": {
    "shortDescription": "In a [boolean](/api-reference/_hidden/GridBaseColumn/dataType.md '{basewidgetpath}/Configuration/columns/#dataType') column, replaces all **true** items with a specified text. Applies only if [showEditorAlways](/api-reference/_hidden/GridBaseColumn/showEditorAlways.md '{basewidgetpath}/Configuration/columns/#showEditorAlways') property is **false**."
  },
  "GridBaseColumn.validationRules": {
    "shortDescription": "Specifies [validation rules](/api-reference/10%20UI%20Components/dxValidator/8%20Validation%20Rules '/Documentation/ApiReference/UI_Components/dxValidator/Validation_Rules/') to be checked when cell values are updated."
  },
  "GridBaseColumn.visible": {
    "shortDescription": "Specifies whether the column is visible, that is, occupies space in the table."
  },
  "GridBaseColumn.visibleIndex": {
    "shortDescription": "Specifies the position of the column regarding other columns in the resulting UI component."
  },
  "GridBaseColumn.width": {
    "shortDescription": "Specifies the column's width in pixels or as a percentage. Ignored if it is less than [minWidth](/api-reference/_hidden/GridBaseColumn/minWidth.md '{basewidgetpath}/Configuration/columns/#minWidth')."
  },
  "GridBaseColumnButton": {
    "shortDescription": "Allows you to customize buttons in the edit column or create a custom [command column](/concepts/05%20Widgets/DataGrid/15%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/{WidgetName}/Columns/Column_Types/Command_Columns/'). Applies only if the column's [type](/api-reference/_hidden/dxDataGridColumn/type.md '/Documentation/ApiReference/UI_Components/dx{WidgetName}/Configuration/columns/#type') is *\"buttons\"*."
  },
  "GridBaseColumnButton.cssClass": {
    "shortDescription": "Specifies a CSS class to be applied to the button."
  },
  "GridBaseColumnButton.hint": {
    "shortDescription": "Specifies the text for the hint that appears when the button is hovered over or long-pressed."
  },
  "GridBaseColumnButton.icon": {
    "shortDescription": "Specifies the button's icon."
  },
  "GridBaseColumnButton.text": {
    "shortDescription": "Specifies the button's text. Applies only if the button's [icon](/api-reference/_hidden/GridBaseColumn/buttons/icon.md '{basewidgetpath}/Configuration/columns/buttons/#icon') is not specified."
  },
  "GridBaseOptions.allowColumnReordering": {
    "shortDescription": "Specifies whether a user can reorder columns."
  },
  "GridBaseOptions.allowColumnResizing": {
    "shortDescription": "Specifies whether a user can resize columns."
  },
  "GridBaseOptions.autoNavigateToFocusedRow": {
    "shortDescription": "Automatically scrolls the component to the focused row when the [focusedRowKey](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/focusedRowKey.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/#focusedRowKey') is changed."
  },
  "GridBaseOptions.cacheEnabled": {
    "shortDescription": "Specifies whether data should be cached."
  },
  "GridBaseOptions.cellHintEnabled": {
    "shortDescription": "Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content."
  },
  "GridBaseOptions.columnAutoWidth": {
    "shortDescription": "Specifies whether columns should adjust their widths to the content."
  },
  "GridBaseOptions.columnChooser": {
    "shortDescription": "Configures the column chooser."
  },
  "GridBaseOptions.columnChooser.allowSearch": {
    "shortDescription": "Specifies whether searching is enabled in the column chooser.",
    "depNote": "Use DataGrid [search.enabled](/api-reference/40%20Common%20Types/15%20grids/ColumnChooserSearchConfig/enabled.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columnChooser/search/#enabled') or TreeList [search.enabled](/api-reference/40%20Common%20Types/15%20grids/ColumnChooserSearchConfig/enabled.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/columnChooser/search/#enabled') instead."
  },
  "GridBaseOptions.columnChooser.container": {
    "shortDescription": "Specifies a container in which the column chooser should be rendered."
  },
  "GridBaseOptions.columnChooser.emptyPanelText": {
    "shortDescription": "Specifies text displayed by the column chooser when it is empty."
  },
  "GridBaseOptions.columnChooser.enabled": {
    "shortDescription": "Specifies whether a user can open the column chooser."
  },
  "GridBaseOptions.columnChooser.height": {
    "shortDescription": "Specifies the height of the column chooser."
  },
  "GridBaseOptions.columnChooser.mode": {
    "shortDescription": "Specifies how a user manages columns using the column chooser."
  },
  "GridBaseOptions.columnChooser.position": {
    "shortDescription": "Configures the column chooser's position."
  },
  "GridBaseOptions.columnChooser.search": {
    "shortDescription": "Configures the column chooser's search functionality."
  },
  "GridBaseOptions.columnChooser.searchTimeout": {
    "shortDescription": "Specifies a delay in milliseconds between when a user finishes typing in the column chooser's search panel, and when the search is executed.",
    "depNote": "Use DataGrid [search.timeout](/api-reference/40%20Common%20Types/15%20grids/ColumnChooserSearchConfig/timeout.md '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/columnChooser/search/#timeout') or TreeList [search.timeout](/api-reference/40%20Common%20Types/15%20grids/ColumnChooserSearchConfig/timeout.md '/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/columnChooser/search/#timeout') instead."
  },
  "GridBaseOptions.columnChooser.selection": {
    "shortDescription": "Configures column selection functionality within the column chooser."
  },
  "GridBaseOptions.columnChooser.sortOrder": {
    "shortDescription": "Specifies the sort order of column headers."
  },
  "GridBaseOptions.columnChooser.title": {
    "shortDescription": "Specifies the title of the column chooser."
  },
  "GridBaseOptions.columnChooser.width": {
    "shortDescription": "Specifies the width of the column chooser."
  },
  "GridBaseOptions.columnFixing": {
    "shortDescription": "Configures column fixing."
  },
  "GridBaseOptions.columnFixing.enabled": {
    "shortDescription": "Enables column fixing."
  },
  "GridBaseOptions.columnFixing.icons": {
    "shortDescription": "Contains properties that specify icons for column fixing commands in the context menu of a column header."
  },
  "GridBaseOptions.columnFixing.icons.fix": {
    "shortDescription": "Specifies an icon for the context menu item that fixes a column."
  },
  "GridBaseOptions.columnFixing.icons.leftPosition": {
    "shortDescription": "Specifies an icon for the context menu subitem that fixes a column to the left edge of the UI component."
  },
  "GridBaseOptions.columnFixing.icons.rightPosition": {
    "shortDescription": "Specifies an icon for the context menu subitem that fixes a column to the right edge of the UI component."
  },
  "GridBaseOptions.columnFixing.icons.stickyPosition": {
    "shortDescription": "Specifies an icon for the context menu subitem that enables sticky column behavior."
  },
  "GridBaseOptions.columnFixing.icons.unfix": {
    "shortDescription": "Specifies an icon for the context menu item that unfixes a column."
  },
  "GridBaseOptions.columnFixing.texts": {
    "shortDescription": "Contains properties that specify texts for column fixing commands in the context menu of a column header."
  },
  "GridBaseOptions.columnFixing.texts.fix": {
    "shortDescription": "Specifies text for the context menu item that fixes a column."
  },
  "GridBaseOptions.columnFixing.texts.leftPosition": {
    "shortDescription": "Specifies text for the context menu subitem that fixes a column to the left edge of the UI component."
  },
  "GridBaseOptions.columnFixing.texts.rightPosition": {
    "shortDescription": "Specifies text for the context menu subitem that fixes a column to the right edge of the UI component."
  },
  "GridBaseOptions.columnFixing.texts.stickyPosition": {
    "shortDescription": "Specifies text for the context menu subitem that enables sticky column behavior."
  },
  "GridBaseOptions.columnFixing.texts.unfix": {
    "shortDescription": "Specifies text for the context menu item that unfixes a column."
  },
  "GridBaseOptions.columnHidingEnabled": {
    "shortDescription": "Specifies whether the UI component should hide columns to adapt to the screen or container size. Ignored if [allowColumnResizing](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/allowColumnResizing.md '{basewidgetpath}/Configuration/#allowColumnResizing') is **true** and [columnResizingMode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columnResizingMode.md '{basewidgetpath}/Configuration/#columnResizingMode') is *\"widget\"*."
  },
  "GridBaseOptions.columnMinWidth": {
    "shortDescription": "Specifies the minimum width of columns."
  },
  "GridBaseOptions.columnResizingMode": {
    "shortDescription": "Specifies how the UI component resizes columns. Applies only if [allowColumnResizing](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/allowColumnResizing.md '{basewidgetpath}/Configuration/#allowColumnResizing') is **true**."
  },
  "GridBaseOptions.columns": {
    "shortDescription": "Overridden."
  },
  "GridBaseOptions.columnWidth": {
    "shortDescription": "Specifies the width for all [data columns](/concepts/05%20UI%20Components/DataGrid/15%20Columns/10%20Column%20Types/1%20Data%20Columns.md '/Documentation/Guide/UI_Components/{WidgetName}/Columns/Column_Types/Data_Columns/'). Has a lower priority than the **column**.[width](/api-reference/_hidden/GridBaseColumn/width.md '{basewidgetpath}/Configuration/columns/#width') property."
  },
  "GridBaseOptions.dataSource": {
    "shortDescription": "Binds the UI component to data."
  },
  "GridBaseOptions.dateSerializationFormat": {
    "shortDescription": "Specifies the format in which date-time values should be sent to the server."
  },
  "GridBaseOptions.editing": {
    "shortDescription": "Overriden."
  },
  "GridBaseOptions.editing.changes": {
    "shortDescription": "An array of pending row changes."
  },
  "GridBaseOptions.editing.confirmDelete": {
    "shortDescription": "Specifies if confirmation is required when a user deletes a row."
  },
  "GridBaseOptions.editing.editColumnName": {
    "shortDescription": "The [name](/api-reference/_hidden/GridBaseColumn/name.md '{basewidgetpath}/Configuration/columns/#name') of a column being edited. Applies only if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"cell\"* or *\"batch\"*."
  },
  "GridBaseOptions.editing.editRowKey": {
    "shortDescription": "The key(s) of a row being edited."
  },
  "GridBaseOptions.editing.form": {
    "shortDescription": "Configures the form. Used only if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"form\"* or *\"popup\"*."
  },
  "GridBaseOptions.editing.mode": {
    "shortDescription": "Specifies how a user edits data."
  },
  "GridBaseOptions.editing.popup": {
    "shortDescription": "Configures the popup. Used only if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"popup\"*."
  },
  "GridBaseOptions.editing.refreshMode": {
    "shortDescription": "Specifies operations that are performed after saving changes."
  },
  "GridBaseOptions.editing.selectTextOnEditStart": {
    "shortDescription": "Specifies whether to select text in a cell when a user starts editing."
  },
  "GridBaseOptions.editing.startEditAction": {
    "shortDescription": "Specifies whether a single or double click should switch a cell to the editing state. Applies if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"cell\"* or *\"batch\"*."
  },
  "GridBaseOptions.editing.texts": {
    "shortDescription": "Contains properties that specify texts for editing-related UI elements."
  },
  "GridBaseOptions.editing.texts.addRow": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on the global *\"Add\"* button. Applies only if **editing**.[allowAdding](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing/allowAdding.md '{basewidgetpath}/Configuration/editing/#allowAdding') is **true**."
  },
  "GridBaseOptions.editing.texts.cancelAllChanges": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on the *\"Discard\"* button. Applies only if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"batch\"*."
  },
  "GridBaseOptions.editing.texts.cancelRowChanges": {
    "shortDescription": "Specifies text for a button that cancels changes in a row. Applies only if **editing**.[allowUpdating](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing/allowUpdating.md '{basewidgetpath}/Configuration/editing/#allowUpdating') is **true** and **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"row\"*, *\"popup\"* or *\"form\"*."
  },
  "GridBaseOptions.editing.texts.confirmDeleteMessage": {
    "shortDescription": "Specifies a message that prompts a user to confirm deletion."
  },
  "GridBaseOptions.editing.texts.confirmDeleteTitle": {
    "shortDescription": "Specifies a title for the window that asks a user to confirm deletion."
  },
  "GridBaseOptions.editing.texts.deleteRow": {
    "shortDescription": "Specifies text for buttons that delete rows. Applies only if [allowDeleting](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing/allowDeleting.md '{basewidgetpath}/Configuration/editing/#allowDeleting') is **true**."
  },
  "GridBaseOptions.editing.texts.editRow": {
    "shortDescription": "Specifies text for buttons that switch rows into the editing state. Applies only if [allowUpdating](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing/allowUpdating.md '{basewidgetpath}/Configuration/editing/#allowUpdating') is **true**."
  },
  "GridBaseOptions.editing.texts.saveAllChanges": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on the global *\"Save\"* button. Applies only if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"batch\"*."
  },
  "GridBaseOptions.editing.texts.saveRowChanges": {
    "shortDescription": "Specifies text for a button that saves changes made in a row. Applies only if  [allowUpdating](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing/allowUpdating.md '{basewidgetpath}/Configuration/editing/#allowUpdating') is **true** and **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"row\"*, *\"popup\"* or *\"form\"*."
  },
  "GridBaseOptions.editing.texts.undeleteRow": {
    "shortDescription": "Specifies text for buttons that recover deleted rows. Applies only if [allowDeleting](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/editing/allowDeleting.md '{basewidgetpath}/Configuration/editing/#allowDeleting') is **true** and **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"batch\"*."
  },
  "GridBaseOptions.editing.texts.validationCancelChanges": {
    "shortDescription": "Specifies text for a hint appearing when a user pauses on the button that cancels changes in a cell. Applies only if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"cell\"* and [data validation](/api-reference/_hidden/GridBaseColumn/validationRules.md '{basewidgetpath}/Configuration/columns/#validationRules/') is enabled."
  },
  "GridBaseOptions.editing.useIcons": {
    "shortDescription": "Specifies whether the [edit column](/concepts/05%20UI%20Components/DataGrid/15%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/{WidgetName}/Columns/Column_Types/Command_Columns/') uses icons instead of links."
  },
  "GridBaseOptions.errorRowEnabled": {
    "shortDescription": "Indicates whether to show the error row."
  },
  "GridBaseOptions.filterBuilder": {
    "shortDescription": "Configures the integrated filter builder."
  },
  "GridBaseOptions.filterBuilderPopup": {
    "shortDescription": "Configures the popup in which the integrated [filter builder](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterBuilder.md '{basewidgetpath}/Configuration/#filterBuilder') is shown."
  },
  "GridBaseOptions.filterPanel": {
    "shortDescription": "Configures the filter panel."
  },
  "GridBaseOptions.filterPanel.customizeText": {
    "shortDescription": "Customizes the [filter expression's](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterValue.md '{basewidgetpath}/Configuration/#filterValue') text representation."
  },
  "GridBaseOptions.filterPanel.filterEnabled": {
    "shortDescription": "Specifies whether the [filter expression](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterValue.md '{basewidgetpath}/Configuration/#filterValue') is applied."
  },
  "GridBaseOptions.filterPanel.texts": {
    "shortDescription": "Specifies texts for the filter panel's elements."
  },
  "GridBaseOptions.filterPanel.texts.clearFilter": {
    "shortDescription": "The text of the *\"Clear\"* link."
  },
  "GridBaseOptions.filterPanel.texts.createFilter": {
    "shortDescription": "The text of the *\"Create Filter\"* link."
  },
  "GridBaseOptions.filterPanel.texts.filterEnabledHint": {
    "shortDescription": "The hint of the checkbox that applies the filter."
  },
  "GridBaseOptions.filterPanel.visible": {
    "shortDescription": "Specifies whether the filter panel is visible."
  },
  "GridBaseOptions.filterRow": {
    "shortDescription": "Configures the filter row."
  },
  "GridBaseOptions.filterRow.applyFilter": {
    "shortDescription": "Specifies when to apply a filter."
  },
  "GridBaseOptions.filterRow.applyFilterText": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on a button that applies the filter."
  },
  "GridBaseOptions.filterRow.betweenEndText": {
    "shortDescription": "Specifies a placeholder for the editor that specifies the end of a range when a user selects the *\"between\"* filter operation."
  },
  "GridBaseOptions.filterRow.betweenStartText": {
    "shortDescription": "Specifies a placeholder for the editor that specifies the start of a range when a user selects the *\"between\"* filter operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions": {
    "shortDescription": "Specifies descriptions for filter operations on the filter list."
  },
  "GridBaseOptions.filterRow.operationDescriptions.between": {
    "shortDescription": "A description for the *\"between\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.contains": {
    "shortDescription": "A description for the *\"contains\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.endsWith": {
    "shortDescription": "A description for the *\"endswith\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.equal": {
    "shortDescription": "A description for the *\"=\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.greaterThan": {
    "shortDescription": "A description for the *\">\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.greaterThanOrEqual": {
    "shortDescription": "A description for the *\">=\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.lessThan": {
    "shortDescription": "A description for the *\"<\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.lessThanOrEqual": {
    "shortDescription": "A description for the *\"<=\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.notContains": {
    "shortDescription": "A description for the *\"notcontains\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.notEqual": {
    "shortDescription": "A description for the *\"<>\"* operation."
  },
  "GridBaseOptions.filterRow.operationDescriptions.startsWith": {
    "shortDescription": "A description for the *\"startswith\"* operation."
  },
  "GridBaseOptions.filterRow.resetOperationText": {
    "shortDescription": "Specifies text for the reset operation on the filter list."
  },
  "GridBaseOptions.filterRow.showAllText": {
    "shortDescription": "Specifies text for the item that clears the applied filter. Used only when a cell of the filter row contains a select box."
  },
  "GridBaseOptions.filterRow.showOperationChooser": {
    "shortDescription": "Specifies whether icons that open the filter lists are visible."
  },
  "GridBaseOptions.filterRow.visible": {
    "shortDescription": "Specifies whether the filter row is visible."
  },
  "GridBaseOptions.filterSyncEnabled": {
    "shortDescription": "Specifies whether to synchronize the [filter row](/concepts/05%20UI%20Components/DataGrid/30%20Filtering%20and%20Searching/1%20Filter%20Row.md '/Documentation/Guide/UI_Components/{WidgetName}/Filtering_and_Searching/#Filter_Row'), [header filter](/concepts/05%20UI%20Components/DataGrid/30%20Filtering%20and%20Searching/2%20Header%20Filter.md '/Documentation/Guide/UI_Components/{WidgetName}/Filtering_and_Searching/#Header_Filter'), and [filter builder](/concepts/05%20UI%20Components/DataGrid/30%20Filtering%20and%20Searching/4%20Filter%20Panel%20with%20Filter%20Builder.md '/Documentation/Guide/UI_Components/{WidgetName}/Filtering_and_Searching/#Filter_Panel_with_Filter_Builder'). The synchronized filter expression is stored in the [filterValue](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterValue.md '{basewidgetpath}/Configuration/#filterValue') property."
  },
  "GridBaseOptions.filterValue": {
    "shortDescription": "Specifies a filter expression."
  },
  "GridBaseOptions.focusedColumnIndex": {
    "shortDescription": "The index of the column that contains the focused data cell. This index is taken from the [columns](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columns '{basewidgetpath}/Configuration/columns/') array."
  },
  "GridBaseOptions.focusedRowEnabled": {
    "shortDescription": "Specifies whether the focused row feature is enabled."
  },
  "GridBaseOptions.focusedRowIndex": {
    "shortDescription": "Specifies or indicates the focused data row's index."
  },
  "GridBaseOptions.focusedRowKey": {
    "shortDescription": "Specifies initially or currently focused grid row's key."
  },
  "GridBaseOptions.focusStateEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "GridBaseOptions.headerFilter": {
    "shortDescription": "Configures the header filter feature."
  },
  "GridBaseOptions.headerFilter.allowSearch": {
    "shortDescription": "Specifies whether searching is enabled in the header filter.",
    "depNote": "Use DataGrid [search.enabled](/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/headerFilter/search/#enabled) or TreeList [search.enabled](/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/headerFilter/search/#enabled) instead."
  },
  "GridBaseOptions.headerFilter.allowSelectAll": {
    "shortDescription": "Specifies whether a \"Select All\" option is available to users."
  },
  "GridBaseOptions.headerFilter.height": {
    "shortDescription": "Specifies the height of the popup menu that contains values for filtering."
  },
  "GridBaseOptions.headerFilter.search": {
    "shortDescription": "Configures the header filter's search box."
  },
  "GridBaseOptions.headerFilter.searchTimeout": {
    "shortDescription": "Specifies a delay in milliseconds between when a user finishes typing in the header filter's search panel, and when the search is executed.",
    "depNote": "Use DataGrid [search.timeout](/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/headerFilter/search/#timeout) or TreeList [search.timeout](/Documentation/ApiReference/UI_Components/dxTreeList/Configuration/headerFilter/search/#timeout) instead."
  },
  "GridBaseOptions.headerFilter.texts": {
    "shortDescription": "Contains properties that specify text for various elements of the popup menu."
  },
  "GridBaseOptions.headerFilter.texts.cancel": {
    "shortDescription": "Specifies text for the button that closes the popup menu without applying a filter."
  },
  "GridBaseOptions.headerFilter.texts.emptyValue": {
    "shortDescription": "Specifies a name for the item that represents empty values in the popup menu."
  },
  "GridBaseOptions.headerFilter.texts.ok": {
    "shortDescription": "Specifies text for the button that applies the specified filter."
  },
  "GridBaseOptions.headerFilter.visible": {
    "shortDescription": "Specifies whether header filter icons are visible."
  },
  "GridBaseOptions.headerFilter.width": {
    "shortDescription": "Specifies the width of the popup menu that contains values for filtering."
  },
  "GridBaseOptions.highlightChanges": {
    "shortDescription": "Specifies whether to highlight rows and cells with edited data. [repaintChangesOnly](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/repaintChangesOnly.md '{basewidgetpath}/Configuration/#repaintChangesOnly') should be **true**."
  },
  "GridBaseOptions.keyboardNavigation": {
    "shortDescription": "Configures keyboard navigation."
  },
  "GridBaseOptions.keyboardNavigation.editOnKeyPress": {
    "shortDescription": "Specifies whether users can enter a new cell value on a key press. Applies if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"cell\"* or *\"batch\"*."
  },
  "GridBaseOptions.keyboardNavigation.enabled": {
    "shortDescription": "Enables keyboard navigation."
  },
  "GridBaseOptions.keyboardNavigation.enterKeyAction": {
    "shortDescription": "Specifies whether the Enter key switches the cell or row to the edit state or moves focus in the [enterKeyDirection](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/keyboardNavigation/enterKeyDirection.md '{basewidgetpath}/Configuration/keyboardNavigation/#enterKeyDirection'). Applies for all [edit modes](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode'), except *\"popup\"*."
  },
  "GridBaseOptions.keyboardNavigation.enterKeyDirection": {
    "shortDescription": "Specifies the direction in which to move focus when a user presses Enter. Applies if **editing**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/editing/mode.md '{basewidgetpath}/Configuration/editing/#mode') is *\"cell\"* or *\"batch\"*."
  },
  "GridBaseOptions.loadPanel": {
    "shortDescription": "Configures the load panel."
  },
  "GridBaseOptions.loadPanel.enabled": {
    "shortDescription": "Enables displaying the load panel automatically."
  },
  "GridBaseOptions.loadPanel.height": {
    "shortDescription": "Specifies the height of the load panel in pixels."
  },
  "GridBaseOptions.loadPanel.indicatorSrc": {
    "shortDescription": "Specifies a URL pointing to an image to be used as a loading indicator."
  },
  "GridBaseOptions.loadPanel.shading": {
    "shortDescription": "Specifies whether to shade the UI component when the load panel is shown."
  },
  "GridBaseOptions.loadPanel.shadingColor": {
    "shortDescription": "Specifies the shading color. Applies only if [shading](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/loadPanel/shading.md '{basewidgetpath}/Configuration/loadPanel/#shading') is **true**."
  },
  "GridBaseOptions.loadPanel.showIndicator": {
    "shortDescription": "Specifies whether to show the loading indicator."
  },
  "GridBaseOptions.loadPanel.showPane": {
    "shortDescription": "Specifies whether to show the pane of the load panel."
  },
  "GridBaseOptions.loadPanel.text": {
    "shortDescription": "Specifies text displayed on the load panel."
  },
  "GridBaseOptions.loadPanel.width": {
    "shortDescription": "Specifies the width of the load panel in pixels."
  },
  "GridBaseOptions.noDataText": {
    "shortDescription": "Specifies a text string shown when the {WidgetName} does not display any data."
  },
  "GridBaseOptions.onAdaptiveDetailRowPreparing": {
    "shortDescription": "A function that is executed before an adaptive detail row is rendered."
  },
  "GridBaseOptions.onDataErrorOccurred": {
    "shortDescription": "A function that is executed when an error occurs in the data source."
  },
  "GridBaseOptions.onEditCanceled": {
    "shortDescription": "A function that is executed after row changes are discarded."
  },
  "GridBaseOptions.onEditCanceling": {
    "shortDescription": "A function that is executed when the edit operation is canceled, but row changes are not yet discarded."
  },
  "GridBaseOptions.onInitNewRow": {
    "shortDescription": "A function that is executed before a new row is added to the UI component."
  },
  "GridBaseOptions.onKeyDown": {
    "shortDescription": "A function that is executed when the UI component is in focus and a key has been pressed down."
  },
  "GridBaseOptions.onRowCollapsed": {
    "shortDescription": "A function that is executed after a row is collapsed."
  },
  "GridBaseOptions.onRowCollapsing": {
    "shortDescription": "A function that is executed before a row is collapsed."
  },
  "GridBaseOptions.onRowExpanded": {
    "shortDescription": "A function that is executed after a row is expanded."
  },
  "GridBaseOptions.onRowExpanding": {
    "shortDescription": "A function that is executed before a row is expanded."
  },
  "GridBaseOptions.onRowInserted": {
    "shortDescription": "A function that is executed after a new row has been inserted into the data source."
  },
  "GridBaseOptions.onRowInserting": {
    "shortDescription": "A function that is executed before a new row is inserted into the data source."
  },
  "GridBaseOptions.onRowRemoved": {
    "shortDescription": "A function that is executed after a row has been removed from the data source."
  },
  "GridBaseOptions.onRowRemoving": {
    "shortDescription": "A function that is executed before a row is removed from the data source."
  },
  "GridBaseOptions.onRowUpdated": {
    "shortDescription": "A function that is executed after a row has been updated in the data source."
  },
  "GridBaseOptions.onRowUpdating": {
    "shortDescription": "A function that is executed before a row is updated in the data source."
  },
  "GridBaseOptions.onRowValidating": {
    "shortDescription": "A function that is executed after cells in a row are validated against [validation rules](/api-reference/_hidden/GridBaseColumn/validationRules.md '{basewidgetpath}/Configuration/columns/#validationRules')."
  },
  "GridBaseOptions.onSaved": {
    "shortDescription": "A function that is executed after row changes are saved."
  },
  "GridBaseOptions.onSaving": {
    "shortDescription": "A function that is executed before pending row changes are saved."
  },
  "GridBaseOptions.onSelectionChanged": {
    "shortDescription": "A function that is executed after selecting a row or clearing its selection."
  },
  "GridBaseOptions.onToolbarPreparing": {
    "shortDescription": "A function that is executed before the toolbar is created."
  },
  "GridBaseOptions.pager": {
    "shortDescription": "Configures the pager."
  },
  "GridBaseOptions.paging": {
    "shortDescription": "Configures paging."
  },
  "GridBaseOptions.paging.enabled": {
    "shortDescription": "Enables paging."
  },
  "GridBaseOptions.paging.pageIndex": {
    "shortDescription": "Specifies the page to be displayed using a zero-based index."
  },
  "GridBaseOptions.paging.pageSize": {
    "shortDescription": "Specifies the page size."
  },
  "GridBaseOptions.renderAsync": {
    "shortDescription": "Specifies whether to render the [filter row](/concepts/05%20UI%20Components/DataGrid/30%20Filtering%20and%20Searching/1%20Filter%20Row.md '/Documentation/Guide/UI_Components/{WidgetName}/Filtering_and_Searching/#Filter_Row'), [command columns](/concepts/05%20UI%20Components/DataGrid/15%20Columns/10%20Column%20Types/4%20Command%20Columns/00%20Command%20Columns.md '/Documentation/Guide/UI_Components/{WidgetName}/Columns/Column_Types/Command_Columns/'), and columns with [showEditorAlways](/api-reference/_hidden/GridBaseColumn/showEditorAlways.md '{basewidgetpath}/Configuration/columns/#showEditorAlways') set to **true** after other elements."
  },
  "GridBaseOptions.repaintChangesOnly": {
    "shortDescription": "Specifies whether to repaint only those cells whose data changed."
  },
  "GridBaseOptions.rowAlternationEnabled": {
    "shortDescription": "Specifies whether rows should be shaded differently."
  },
  "GridBaseOptions.rowDragging": {
    "shortDescription": "Configures row reordering using drag and drop gestures."
  },
  "GridBaseOptions.rowDragging.allowDropInsideItem": {
    "shortDescription": "Allows users to drop a row inside another row."
  },
  "GridBaseOptions.rowDragging.allowReordering": {
    "shortDescription": "Allows row reordering using drag and drop gestures."
  },
  "GridBaseOptions.rowDragging.autoScroll": {
    "shortDescription": "Enables automatic scrolling while dragging a row beyond the viewport."
  },
  "GridBaseOptions.rowDragging.boundary": {
    "shortDescription": "Specifies a DOM element that limits the dragging area."
  },
  "GridBaseOptions.rowDragging.container": {
    "shortDescription": "Specifies a custom container in which the draggable row should be rendered."
  },
  "GridBaseOptions.rowDragging.cursorOffset": {
    "shortDescription": "Specifies the cursor offset from the dragged row."
  },
  "GridBaseOptions.rowDragging.cursorOffset.x": {
    "shortDescription": "Specifies the horizontal cursor offset from the dragged row in pixels."
  },
  "GridBaseOptions.rowDragging.cursorOffset.y": {
    "shortDescription": "Specifies the vertical cursor offset from the dragged row in pixels."
  },
  "GridBaseOptions.rowDragging.data": {
    "shortDescription": "A container for custom data."
  },
  "GridBaseOptions.rowDragging.dragDirection": {
    "shortDescription": "Specifies the directions in which a row can be dragged."
  },
  "GridBaseOptions.rowDragging.dragTemplate": {
    "shortDescription": "Specifies custom markup to be shown instead of the item being dragged."
  },
  "GridBaseOptions.rowDragging.dropFeedbackMode": {
    "shortDescription": "Specifies how to highlight the row's drop position."
  },
  "GridBaseOptions.rowDragging.filter": {
    "shortDescription": "Specifies a CSS selector for draggable rows.",
    "depNote": null
  },
  "GridBaseOptions.rowDragging.group": {
    "shortDescription": "Allows you to group several UI components so that users can drag and drop rows between them."
  },
  "GridBaseOptions.rowDragging.handle": {
    "shortDescription": "Specifies a CSS selector (ID or class) for the element(s) that should act as the drag handle(s)."
  },
  "GridBaseOptions.rowDragging.onAdd": {
    "shortDescription": "A function that is called when a new row is added."
  },
  "GridBaseOptions.rowDragging.onDragChange": {
    "shortDescription": "A function that is called when the dragged row's position is changed."
  },
  "GridBaseOptions.rowDragging.onDragEnd": {
    "shortDescription": "A function that is called when the drag gesture is finished."
  },
  "GridBaseOptions.rowDragging.onDragMove": {
    "shortDescription": "A function that is called every time a draggable row is moved."
  },
  "GridBaseOptions.rowDragging.onDragStart": {
    "shortDescription": "A function that is called when the drag gesture is initialized."
  },
  "GridBaseOptions.rowDragging.onRemove": {
    "shortDescription": "A function that is called when a draggable row is removed."
  },
  "GridBaseOptions.rowDragging.onReorder": {
    "shortDescription": "A function that is called when the draggable rows are reordered."
  },
  "GridBaseOptions.rowDragging.scrollSensitivity": {
    "shortDescription": "Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if [autoScroll](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/rowDragging/autoScroll.md '{basewidgetpath}/Configuration/rowDragging/#autoScroll') is **true**."
  },
  "GridBaseOptions.rowDragging.scrollSpeed": {
    "shortDescription": "Specifies the scrolling speed when dragging a row beyond the viewport. Applies only if [autoScroll](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/rowDragging/autoScroll.md '{basewidgetpath}/Configuration/rowDragging/#autoScroll') is **true**."
  },
  "GridBaseOptions.rowDragging.showDragIcons": {
    "shortDescription": "Shows or hides row dragging icons."
  },
  "GridBaseOptions.scrolling": {
    "shortDescription": "<!-- Overridden -->"
  },
  "GridBaseOptions.scrolling.columnRenderingMode": {
    "shortDescription": "Specifies the rendering mode for columns. Applies when columns are left outside the viewport. Requires the [columnWidth](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columnWidth.md '{basewidgetpath}/Configuration/#columnWidth'), [columnAutoWidth](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/columnAutoWidth.md '{basewidgetpath}/Configuration/#columnAutoWidth'), or [width](/api-reference/_hidden/GridBaseColumn/width.md '{basewidgetpath}/Configuration/columns/#width') (for all columns) property specified."
  },
  "GridBaseOptions.scrolling.preloadEnabled": {
    "shortDescription": "Specifies whether the UI component should load adjacent pages. Applies only if **scrolling**.[mode](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/scrolling/mode.md '{basewidgetpath}/Configuration/scrolling/#mode') is *\"virtual\"* or *\"infinite\"*."
  },
  "GridBaseOptions.scrolling.renderAsync": {
    "shortDescription": "Specifies whether to render rows after a user stops scrolling or at the same time as the user scrolls the {WidgetName}."
  },
  "GridBaseOptions.scrolling.rowRenderingMode": {
    "shortDescription": "Specifies the rendering mode for loaded rows."
  },
  "GridBaseOptions.scrolling.scrollByContent": {
    "shortDescription": "Specifies whether a user can scroll the content with a swipe gesture. Applies only if [useNative](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/scrolling/useNative.md '{basewidgetpath}/Configuration/scrolling/#useNative') is **false**."
  },
  "GridBaseOptions.scrolling.scrollByThumb": {
    "shortDescription": "Specifies whether a user can scroll the content with the scrollbar. Applies only if [useNative](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/scrolling/useNative.md '{basewidgetpath}/Configuration/scrolling/#useNative') is **false**."
  },
  "GridBaseOptions.scrolling.showScrollbar": {
    "shortDescription": "Specifies when to show scrollbars. Applies only if [useNative](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/scrolling/useNative.md '{basewidgetpath}/Configuration/scrolling/#useNative') is **false**."
  },
  "GridBaseOptions.scrolling.useNative": {
    "shortDescription": "Specifies whether the {WidgetName} should use native or simulated scrolling."
  },
  "GridBaseOptions.searchPanel": {
    "shortDescription": "Configures the search panel."
  },
  "GridBaseOptions.searchPanel.highlightCaseSensitive": {
    "shortDescription": "Notifies the UI component whether search is case-sensitive to ensure that search results are highlighted correctly. Applies only if [highlightSearchText](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/searchPanel/highlightSearchText.md '{basewidgetpath}/Configuration/searchPanel/#highlightSearchText') is **true**."
  },
  "GridBaseOptions.searchPanel.highlightSearchText": {
    "shortDescription": "Specifies whether found substrings should be highlighted."
  },
  "GridBaseOptions.searchPanel.placeholder": {
    "shortDescription": "Specifies a placeholder for the search panel."
  },
  "GridBaseOptions.searchPanel.searchVisibleColumnsOnly": {
    "shortDescription": "Specifies whether the UI component should search against all columns or only visible ones."
  },
  "GridBaseOptions.searchPanel.text": {
    "shortDescription": "Sets a search string for the search panel."
  },
  "GridBaseOptions.searchPanel.visible": {
    "shortDescription": "Specifies whether the search panel is visible or not."
  },
  "GridBaseOptions.searchPanel.width": {
    "shortDescription": "Specifies the width of the search panel in pixels."
  },
  "GridBaseOptions.selectedRowKeys": {
    "shortDescription": "Allows you to select rows or determine which rows are selected."
  },
  "GridBaseOptions.selection": {
    "shortDescription": "<!-- Overridden -->"
  },
  "GridBaseOptions.selection.allowSelectAll": {
    "shortDescription": "Allows users to simultaneously select all or current page rows (depending on the [selectAllMode](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/selection/selectAllMode.md '{basewidgetpath}/Configuration/selection/#selectAllMode'))."
  },
  "GridBaseOptions.selection.mode": {
    "shortDescription": "Specifies the selection mode."
  },
  "GridBaseOptions.showBorders": {
    "shortDescription": "Specifies whether the outer borders of the UI component are visible."
  },
  "GridBaseOptions.showColumnHeaders": {
    "shortDescription": "Specifies whether column headers are visible."
  },
  "GridBaseOptions.showColumnLines": {
    "shortDescription": "Specifies whether vertical lines that separate one column from another are visible."
  },
  "GridBaseOptions.showRowLines": {
    "shortDescription": "Specifies whether horizontal lines that separate one row from another are visible."
  },
  "GridBaseOptions.sorting": {
    "shortDescription": "Configures runtime sorting."
  },
  "GridBaseOptions.sorting.ascendingText": {
    "shortDescription": "Specifies text for the context menu item that sets an ascending sort order in a column."
  },
  "GridBaseOptions.sorting.clearText": {
    "shortDescription": "Specifies text for the context menu item that clears sorting settings for a column."
  },
  "GridBaseOptions.sorting.descendingText": {
    "shortDescription": "Specifies text for the context menu item that sets a descending sort order in a column."
  },
  "GridBaseOptions.sorting.mode": {
    "shortDescription": "Specifies the sorting mode."
  },
  "GridBaseOptions.sorting.showSortIndexes": {
    "shortDescription": "Specifies whether to display [sort indexes](/api-reference/_hidden/GridBaseColumn/sortIndex.md '{basewidgetpath}/Configuration/columns/#sortIndex') in column headers. Applies only when **sorting**.[mode](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/sorting/mode.md '{basewidgetpath}/Configuration/sorting/#mode') is *\"multiple\"* and data is sorted by two or more columns."
  },
  "GridBaseOptions.stateStoring": {
    "shortDescription": "Configures state storing."
  },
  "GridBaseOptions.stateStoring.customLoad": {
    "shortDescription": "Specifies a function that is executed on state loading. Applies only if the [type](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/stateStoring/type.md '{basewidgetpath}/Configuration/stateStoring/#type') is *'custom'*."
  },
  "GridBaseOptions.stateStoring.customSave": {
    "shortDescription": "Specifies a function that is executed on state change. Applies only if the [type](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/stateStoring/type.md '{basewidgetpath}/Configuration/stateStoring/#type') is *\"custom\"*."
  },
  "GridBaseOptions.stateStoring.enabled": {
    "shortDescription": "Enables state storing."
  },
  "GridBaseOptions.stateStoring.savingTimeout": {
    "shortDescription": "Specifies the delay in milliseconds between when a user makes a change and when this change is saved."
  },
  "GridBaseOptions.stateStoring.storageKey": {
    "shortDescription": "Specifies the key for storing the UI component state."
  },
  "GridBaseOptions.stateStoring.type": {
    "shortDescription": "Specifies the type of storage where the state is saved."
  },
  "GridBaseOptions.syncLookupFilterValues": {
    "shortDescription": "Specifies whether to show only relevant values in the [header filter](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/headerFilter '{basewidgetpath}/Configuration/headerFilter/') and [filter row](/api-reference/10%20UI%20Components/GridBase/1%20Configuration/filterRow '{basewidgetpath}/Configuration/filterRow/')."
  },
  "GridBaseOptions.twoWayBindingEnabled": {
    "shortDescription": "Specifies whether to enable two-way data binding."
  },
  "GridBaseOptions.wordWrapEnabled": {
    "shortDescription": "Specifies whether text that does not fit into a column should be wrapped."
  },
  "GroupData": {
    "shortDescription": "Specifies a group of elements in a template."
  },
  "Grouping": {
    "shortDescription": "Configures grouping."
  },
  "GroupingTexts": {
    "shortDescription": "Defines the texts of grouping-related visual elements."
  },
  "GroupItem": {
    "shortDescription": "An additional type for [LoadResult](/api-reference/40%20Common%20Types/10%20data/custom-store/LoadResult '/Documentation/ApiReference/Common_Types/data/custom-store/LoadResult/')."
  },
  "GroupItem.count": {
    "shortDescription": "A total number of items."
  },
  "GroupItem.items": {
    "shortDescription": "Contains an array of items or [GroupItems](/api-reference/40%20Common%20Types/10%20data/custom-store/GroupItem '/Documentation/ApiReference/Common_Types/data/custom-store/GroupItem/'), or nothing."
  },
  "GroupItem.key": {
    "shortDescription": "A key to group items by."
  },
  "GroupItem.summary": {
    "shortDescription": "A summary array that contains the resulting values in the same order as the [summary definitions](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/groupSummary.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#groupSummary')."
  },
  "GroupPanel": {
    "shortDescription": "Configures the [group panel](/concepts/05%20UI%20Components/DataGrid/45%20Grouping/10%20User%20Interaction/10%20Group%20Data.md '/Documentation/Guide/UI_Components/DataGrid/Grouping/#User_Interaction/Group_Data')."
  },
  "Guid": {
    "shortDescription": "The **Guid** is an object used to generate and contain a GUID."
  },
  "Guid.ctor()": {
    "shortDescription": "Creates a new **Guid** instance that contains a generated GUID."
  },
  "Guid.ctor(value)": {
    "shortDescription": "Creates a new **Guid** instance that contains the specified GUID."
  },
  "Guid.toString()": {
    "shortDescription": "Gets the GUID. Works identically to the [valueOf()](/api-reference/30%20Data%20Layer/Guid/3%20Methods/valueOf().md '/Documentation/ApiReference/Data_Layer/Guid/Methods/#valueOf') method."
  },
  "Guid.valueOf()": {
    "shortDescription": "Gets the GUID. Works identically to the [toString()](/api-reference/30%20Data%20Layer/Guid/3%20Methods/toString().md '/Documentation/ApiReference/Data_Layer/Guid/Methods/#toString') method."
  },
  "HeaderFilter": {
    "shortDescription": "Configures the header filter feature."
  },
  "HeaderFilterSearchConfig": {
    "shortDescription": "Configures the header filter's search functionality."
  },
  "HeaderFilterSearchConfig.enabled": {
    "shortDescription": "Specifies whether search UI is enabled in the header filter."
  },
  "HeaderFilterSearchConfig.mode": {
    "shortDescription": "Specifies a comparison operation used to search header filter values."
  },
  "HeaderFilterSearchConfig.timeout": {
    "shortDescription": "Specifies a timeout, in milliseconds, during which a user may continue to modify the search value without starting the search operation."
  },
  "HeaderFilterTexts": {
    "shortDescription": "Contains properties that specify text for various elements of the popup menu."
  },
  "hideTopOverlay()": {
    "shortDescription": "Hides the last displayed overlay UI component."
  },
  "HierarchicalCollectionWidget": {
    "shortDescription": "The base class for UI components containing an item collection."
  },
  "HierarchicalCollectionWidgetOptions.disabledExpr": {
    "shortDescription": "Specifies the name of the data source item field whose value defines whether or not the corresponding UI component item is disabled."
  },
  "HierarchicalCollectionWidgetOptions.displayExpr": {
    "shortDescription": "Specifies the data field whose values should be displayed."
  },
  "HierarchicalCollectionWidgetOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "HierarchicalCollectionWidgetOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "HierarchicalCollectionWidgetOptions.itemsExpr": {
    "shortDescription": "Specifies which data field contains nested items."
  },
  "HierarchicalCollectionWidgetOptions.keyExpr": {
    "shortDescription": "Specifies which data field provides keys for TreeView items."
  },
  "HierarchicalCollectionWidgetOptions.selectedExpr": {
    "shortDescription": "Specifies the name of the data source item field whose value defines whether or not the corresponding UI component items is selected."
  },
  "IncidentInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "IncidentInfo.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "InitializedEventInfo": {
    "shortDescription": "Specifies arguments of `initialized` event."
  },
  "InitializedEventInfo.component": {
    "shortDescription": "The UI component's instance."
  },
  "InitializedEventInfo.element": {
    "shortDescription": "The UI component's container."
  },
  "InteractionInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "InteractionInfo.node": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "isGroupItemsArray": {
    "shortDescription": "A <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\">type guard</a> function that checks whether [LoadResult](/api-reference/40%20Common%20Types/10%20data/custom-store/LoadResult '/Documentation/ApiReference/Common_Types/data/custom-store/LoadResult/') is an array of [GroupItems](/api-reference/40%20Common%20Types/10%20data/custom-store/GroupItem '/Documentation/ApiReference/Common_Types/data/custom-store/GroupItem/')."
  },
  "isItemsArray": {
    "shortDescription": "A <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\">type guard</a> function that checks whether [LoadResult](/api-reference/40%20Common%20Types/10%20data/custom-store/LoadResult '/Documentation/ApiReference/Common_Types/data/custom-store/LoadResult/') is an array of items."
  },
  "isLoadResultObject": {
    "shortDescription": "A <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\">type guard</a> function that checks whether [LoadResult](/api-reference/40%20Common%20Types/10%20data/custom-store/LoadResult '/Documentation/ApiReference/Common_Types/data/custom-store/LoadResult/') is a [LoadResultObject](/api-reference/40%20Common%20Types/10%20data/custom-store/LoadResultObject '/Documentation/ApiReference/Common_Types/data/custom-store/LoadResultObject/')."
  },
  "ItemInfo": {
    "shortDescription": "Specifies item information used in events related to a component's items."
  },
  "ItemInfo.itemData": {
    "shortDescription": "The item's data."
  },
  "ItemInfo.itemElement": {
    "shortDescription": "The item's container."
  },
  "ItemInfo.itemIndex": {
    "shortDescription": "The item's index."
  },
  "KeyboardNavigation": {
    "shortDescription": "Configures keyboard navigation."
  },
  "KeyDownInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "KeyDownInfo.handled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "LangParams": {
    "shortDescription": "Specifies parameters for language-specific sorting and filtering."
  },
  "LangParams.collatorOptions": {
    "shortDescription": "Specifies <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#parameters\" target=\"_blank\">Intl.Collator</a> options."
  },
  "LangParams.locale": {
    "shortDescription": "Specifies the locale whose features affect sorting and filtering."
  },
  "LegendItem": {
    "shortDescription": "An object that provides information about a legend item."
  },
  "LegendItem.series": {
    "shortDescription": "The series that the item represents on the legend."
  },
  "linearCircle": {
    "shortDescription": "An object that defines a gauge indicator of the **circle** type."
  },
  "linearRangeBar": {
    "shortDescription": "An object that defines a gauge indicator of the **rangeBar** type."
  },
  "linearRectangle": {
    "shortDescription": "An object defining a gauge indicator of the **rectangle** type."
  },
  "linearRhombus": {
    "shortDescription": "An object defining a gauge indicator of the **rhombus** type."
  },
  "linearTextCloud": {
    "shortDescription": "An object that defines a gauge indicator of the **textCloud** type."
  },
  "linearTriangleMarker": {
    "shortDescription": "An object that defines a gauge indicator of the **triangleMarker** type."
  },
  "ListItemInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ListItemInfo.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ListItemInfo.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ListItemInfo.itemIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "LoadOptions": {
    "shortDescription": "This section describes the **loadOptions** object's fields."
  },
  "LoadOptions.customQueryParams": {
    "shortDescription": "An object for storing additional settings that should be sent to the server. Relevant to the [ODataStore](/api-reference/30%20Data%20Layer/ODataStore '/Documentation/ApiReference/Data_Layer/ODataStore/') only."
  },
  "LoadOptions.endDate": {
    "shortDescription": "Specifies the end date of the [date navigator](/concepts/05%20UI%20Components/Scheduler/055%20Date%20Navigator.md '/Documentation/Guide/UI_Components/Scheduler/Date_Navigator/') range. Relevant to the [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') only."
  },
  "LoadOptions.expand": {
    "shortDescription": "An array of strings that represent the names of navigation properties to be loaded simultaneously with the [ODataStore](/api-reference/30%20Data%20Layer/ODataStore '/Documentation/ApiReference/Data_Layer/ODataStore/')."
  },
  "LoadOptions.filter": {
    "shortDescription": "A filter expression."
  },
  "LoadOptions.group": {
    "shortDescription": "A group expression."
  },
  "LoadOptions.groupSummary": {
    "shortDescription": "A group summary expression. Used with the [group](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/group.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#group') setting."
  },
  "LoadOptions.parentIds": {
    "shortDescription": "The IDs of the rows being expanded. Relevant only when the **CustomStore** is used in the [TreeList](/api-reference/10%20UI%20Components/dxTreeList '/Documentation/ApiReference/UI_Components/dxTreeList/') UI component."
  },
  "LoadOptions.requireGroupCount": {
    "shortDescription": "Indicates whether a top-level group count is required. Used in conjunction with the [filter](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/filter.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#filter'), [take](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/take.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#take'), [skip](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/skip.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#skip'), [requireTotalCount](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/requireTotalCount.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#requireTotalCount'), and [group](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/group.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#group') settings."
  },
  "LoadOptions.requireTotalCount": {
    "shortDescription": "Indicates whether the total count of data objects is needed."
  },
  "LoadOptions.searchExpr": {
    "shortDescription": "A data field or expression whose value is compared to the search value."
  },
  "LoadOptions.searchOperation": {
    "shortDescription": "A comparison operation."
  },
  "LoadOptions.searchValue": {
    "shortDescription": "The current search value."
  },
  "LoadOptions.select": {
    "shortDescription": "A [select expression](/concepts/70%20Data%20Binding/5%20Data%20Layer/2%20Reading%20Data/3%20Data%20Transformation '/Documentation/Guide/Data_Binding/Data_Layer/#Reading_Data/Data_Transformation')."
  },
  "LoadOptions.skip": {
    "shortDescription": "The number of data objects to be skipped from the result set's start. In conjunction with [take](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/take.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#take'), used to implement paging."
  },
  "LoadOptions.sort": {
    "shortDescription": "A sort expression."
  },
  "LoadOptions.startDate": {
    "shortDescription": "Specifies the start date of the [date navigator](/concepts/05%20UI%20Components/Scheduler/055%20Date%20Navigator.md '/Documentation/Guide/UI_Components/Scheduler/Date_Navigator/') range. Relevant to the [Scheduler](/api-reference/10%20UI%20Components/dxScheduler '/Documentation/ApiReference/UI_Components/dxScheduler/') only."
  },
  "LoadOptions.take": {
    "shortDescription": "The number of data objects to be loaded. In conjunction with [skip](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/skip.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#skip'), used to implement paging."
  },
  "LoadOptions.totalSummary": {
    "shortDescription": "A total summary expression."
  },
  "LoadOptions.userData": {
    "shortDescription": "An object for storing additional settings that should be sent to the server."
  },
  "LoadPanel": {
    "shortDescription": "Configures the load panel."
  },
  "LoadResult": {
    "shortDescription": "Specifies returned data of the `load()` method in CustomStore."
  },
  "LoadResultObject": {
    "shortDescription": "An additional type for [LoadResult](/api-reference/40%20Common%20Types/10%20data/custom-store/LoadResult '/Documentation/ApiReference/Common_Types/data/custom-store/LoadResult/')."
  },
  "LoadResultObject.data": {
    "shortDescription": "Contains an array of items or [GroupItems](/api-reference/40%20Common%20Types/10%20data/custom-store/GroupItem '/Documentation/ApiReference/Common_Types/data/custom-store/GroupItem/')."
  },
  "LoadResultObject.groupCount": {
    "shortDescription": "A number of groups."
  },
  "LoadResultObject.summary": {
    "shortDescription": "A summary array that contains the resulting values in the same order as the [summary definitions](/api-reference/30%20Data%20Layer/CustomStore/LoadOptions/totalSummary.md '/Documentation/ApiReference/Data_Layer/CustomStore/LoadOptions/#totalSummary')."
  },
  "LoadResultObject.totalCount": {
    "shortDescription": "A total number of items."
  },
  "localization": {
    "shortDescription": "An object that serves as a namespace for the methods that are used to localize an application."
  },
  "localization.formatDate(value, format)": {
    "shortDescription": "Converts a Date object to a string using the specified format."
  },
  "localization.formatMessage(key, value)": {
    "shortDescription": "Substitutes the provided value(s) for placeholders in a message that the key specifies."
  },
  "localization.formatNumber(value, format)": {
    "shortDescription": "Converts a numeric value to a string using the specified format."
  },
  "localization.loadMessages(messages)": {
    "shortDescription": "Loads localized messages."
  },
  "localization.locale()": {
    "shortDescription": "Gets the current locale identifier."
  },
  "localization.locale(locale)": {
    "shortDescription": "Sets the current locale identifier."
  },
  "localization.parseDate(text, format)": {
    "shortDescription": "Parses a string into a Date object."
  },
  "localization.parseNumber(text, format)": {
    "shortDescription": "Parses a string into a numeric value."
  },
  "LocalStore": {
    "shortDescription": "The **LocalStore** is a store that provides an interface for loading and editing data from HTML Web Storage (also known as <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">window.localStorage</a>) and handling related events."
  },
  "LocalStore.clear()": {
    "shortDescription": "Removes data from the local storage."
  },
  "LocalStoreOptions.flushInterval": {
    "shortDescription": "Specifies a delay in milliseconds between when data changes and the moment these changes are saved in the local storage. Applies only if [immediate](/api-reference/30%20Data%20Layer/LocalStore/1%20Configuration/immediate.md '/Documentation/ApiReference/Data_Layer/LocalStore/Configuration/#immediate') is **false**."
  },
  "LocalStoreOptions.immediate": {
    "shortDescription": "Specifies whether the **LocalStore** saves changes in the local storage immediately."
  },
  "LocalStoreOptions.name": {
    "shortDescription": "Specifies the name under which data should be saved in the local storage. The `dx-data-localStore-` prefix will be added to the name."
  },
  "MapLayer": {
    "shortDescription": "This section describes the **Layer** object, which represents a vector map layer."
  },
  "MapLayer.clearSelection()": {
    "shortDescription": "Deselects all layer elements."
  },
  "MapLayer.elementType": {
    "shortDescription": "The type of the layer elements."
  },
  "MapLayer.getDataSource()": {
    "shortDescription": "Returns the [DataSource](/api-reference/30%20Data%20Layer/DataSource '/Documentation/ApiReference/Data_Layer/DataSource/') instance."
  },
  "MapLayer.getElements()": {
    "shortDescription": "Gets all layer elements."
  },
  "MapLayer.index": {
    "shortDescription": "The layer index in the [layers](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/layers '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/layers/') array."
  },
  "MapLayer.name": {
    "shortDescription": "The name of the layer."
  },
  "MapLayer.type": {
    "shortDescription": "The layer type. Can be *\"area\"*, *\"line\"* or *\"marker\"*."
  },
  "MapLayerElement": {
    "shortDescription": "This section describes the **Layer Element** object, which represents a vector map layer element."
  },
  "MapLayerElement.applySettings(settings)": {
    "shortDescription": "Applies the layer element settings and updates element appearance."
  },
  "MapLayerElement.attribute(name)": {
    "shortDescription": "Gets the value of an attribute."
  },
  "MapLayerElement.attribute(name, value)": {
    "shortDescription": "Sets the value of an attribute."
  },
  "MapLayerElement.coordinates()": {
    "shortDescription": "Gets the layer element coordinates."
  },
  "MapLayerElement.layer": {
    "shortDescription": "The parent layer of the layer element."
  },
  "MapLayerElement.selected()": {
    "shortDescription": "Gets the selection state of the layer element."
  },
  "MapLayerElement.selected(state)": {
    "shortDescription": "Sets the selection state of the layer element."
  },
  "MapLocation": {
    "shortDescription": ""
  },
  "MapLocation.lat": {
    "shortDescription": "The latitude location of the UI component."
  },
  "MapLocation.lng": {
    "shortDescription": "The longitude location of the UI component."
  },
  "MasterDetail": {
    "shortDescription": "Allows you to build a [master-detail interface](/concepts/05%20UI%20Components/DataGrid/60%20Master-Detail%20Interface '/Documentation/Guide/UI_Components/DataGrid/Master-Detail_Interface/') in the grid."
  },
  "Message": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Message.author": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Message.id": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Message.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "Message.timestamp": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "NativeEventInfo": {
    "shortDescription": "A type that contains fields common for all events (`component`, `element`, `model`) and the `event` field."
  },
  "NativeEventInfo.component": {
    "shortDescription": "The UI component's instance."
  },
  "NativeEventInfo.element": {
    "shortDescription": "The UI component's container."
  },
  "NativeEventInfo.event": {
    "shortDescription": "A native browser event with additional fields from `EventObject`."
  },
  "NativeEventInfo.model": {
    "shortDescription": "Model data. Available only if you use Knockout."
  },
  "NewRowInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "NewRowInfo.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "NewRowInfo.promise": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "NumericRule": {
    "shortDescription": "A validation rule that demands that the validated field has a numeric value."
  },
  "NumericRule.ignoreEmptyValue": {
    "shortDescription": "If set to **true**, empty values are valid."
  },
  "NumericRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "NumericRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"numeric\"* to use the **NumericRule**."
  },
  "ObjectFileSystemProvider": {
    "shortDescription": "The **Object** file system provider works with a file system represented by an in-memory array of JSON objects."
  },
  "ObjectFileSystemProviderOptions.contentExpr": {
    "shortDescription": "Specifies which data field provides information about files content."
  },
  "ObjectFileSystemProviderOptions.data": {
    "shortDescription": "Specifies an array of data objects that represent files and directories."
  },
  "ObjectFileSystemProviderOptions.itemsExpr": {
    "shortDescription": "Specifies which data field provides information about nested files and directories."
  },
  "ODataContext": {
    "shortDescription": "The **ODataContext** is an object that provides access to an entire OData service."
  },
  "ODataContext.get(operationName, params)": {
    "shortDescription": "Invokes an OData operation that returns a value."
  },
  "ODataContext.invoke(operationName, params, httpMethod)": {
    "shortDescription": "Invokes an OData operation that returns nothing."
  },
  "ODataContext.objectLink(entityAlias, key)": {
    "shortDescription": "Gets a link to an entity with a specific key."
  },
  "ODataContextOptions.beforeSend": {
    "shortDescription": "Specifies a function that customizes the request before it is sent to the server."
  },
  "ODataContextOptions.deserializeDates": {
    "shortDescription": "Specifies whether stores in the **ODataContext** serialize/parse date-time values."
  },
  "ODataContextOptions.entities": {
    "shortDescription": "Specifies entity collections to be accessed."
  },
  "ODataContextOptions.errorHandler": {
    "shortDescription": "Specifies a function that is executed when the **ODataContext** throws an error."
  },
  "ODataContextOptions.filterToLower": {
    "shortDescription": "Specifies whether to convert string values to lowercase in filter and search requests. Applies to the following operations: *\"startswith\"*, *\"endswith\"*, *\"contains\"*, and *\"notcontains\"*."
  },
  "ODataContextOptions.jsonp": {
    "shortDescription": "Specifies whether data should be sent using <a href=\"https://www.w3schools.com/js/js_json_jsonp.asp\" target=\"_blank\">JSONP</a>."
  },
  "ODataContextOptions.url": {
    "shortDescription": "Specifies the URL of an OData service."
  },
  "ODataContextOptions.version": {
    "shortDescription": "Specifies the OData version."
  },
  "ODataContextOptions.withCredentials": {
    "shortDescription": "Specifies whether to send cookies, authorization headers, and client certificates in a cross-origin request."
  },
  "ODataStore": {
    "shortDescription": "The **ODataStore** is a store that provides an interface for loading and editing data from an individual OData entity collection and handling related events."
  },
  "ODataStore.byKey(key, extraOptions)": {
    "shortDescription": "Gets an entity with a specific key."
  },
  "ODataStore.createQuery(loadOptions)": {
    "shortDescription": "Creates a **Query** for the OData endpoint."
  },
  "ODataStoreOptions.beforeSend": {
    "shortDescription": "Specifies a function that customizes the request before it is sent to the server."
  },
  "ODataStoreOptions.deserializeDates": {
    "shortDescription": "Specifies whether the store serializes/parses date-time values."
  },
  "ODataStoreOptions.errorHandler": {
    "shortDescription": "Specifies a function that is executed when the **ODataStore** throws an error."
  },
  "ODataStoreOptions.fieldTypes": {
    "shortDescription": "Specifies the data field types. Accepts the following types: *\"String\"*, *\"Int32\"*, *\"Int64\"*, *\"Boolean\"*, *\"Single\"*, \"*Decimal\"* and *\"[Guid](/api-reference/30%20Data%20Layer/Guid '/Documentation/ApiReference/Data_Layer/Guid/')\"*."
  },
  "ODataStoreOptions.filterToLower": {
    "shortDescription": "Specifies whether to convert string values to lowercase in filter and search requests. Applies to the following operations: *\"startswith\"*, *\"endswith\"*, *\"contains\"*, and *\"notcontains\"*."
  },
  "ODataStoreOptions.jsonp": {
    "shortDescription": "Specifies whether data should be sent using <a href=\"https://www.w3schools.com/js/js_json_jsonp.asp\" target=\"_blank\">JSONP</a>."
  },
  "ODataStoreOptions.keyType": {
    "shortDescription": "Specifies the type of the key property or properties."
  },
  "ODataStoreOptions.url": {
    "shortDescription": "Specifies the URL of an OData entity collection."
  },
  "ODataStoreOptions.version": {
    "shortDescription": "Specifies the OData version."
  },
  "ODataStoreOptions.withCredentials": {
    "shortDescription": "Specifies whether to send cookies, authorization headers, and client certificates in a cross-origin request."
  },
  "Pager": {
    "shortDescription": "Configures the pager."
  },
  "Pager.allowedPageSizes": {
    "shortDescription": "Specifies the available page sizes in the page size selector."
  },
  "Pager.visible": {
    "shortDescription": "Specifies whether the pager is visible."
  },
  "PagerBase": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PagerBase.displayMode": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PagerBase.infoText": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PagerBase.label": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PagerBase.showInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PagerBase.showNavigationButtons": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PagerBase.showPageSizeSelector": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PagingBase": {
    "shortDescription": "Configures paging."
  },
  "PatternRule": {
    "shortDescription": "A validation rule that requires that the validated field match a specified pattern."
  },
  "PatternRule.ignoreEmptyValue": {
    "shortDescription": "If set to **true**, empty values are valid."
  },
  "PatternRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "PatternRule.pattern": {
    "shortDescription": "Specifies the regular expression that the validated value must match."
  },
  "PatternRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"pattern\"* to use the **PatternRule**."
  },
  "PdfCell": {
    "shortDescription": "An object that configures export to PDF settings in a [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') cell."
  },
  "PdfCell.backgroundColor": {
    "shortDescription": "Specifies the background color of the cell."
  },
  "PdfCell.borderColor": {
    "shortDescription": "Specifies the color of the cell's outer borders."
  },
  "PdfCell.borderWidth": {
    "shortDescription": "Specifies the width of the cell's borders."
  },
  "PdfCell.drawBottomBorder": {
    "shortDescription": "Specifies whether to show cell's bottom border."
  },
  "PdfCell.drawLeftBorder": {
    "shortDescription": "Specifies whether to show cell's left border."
  },
  "PdfCell.drawRightBorder": {
    "shortDescription": "Specifies whether to show cell's right border."
  },
  "PdfCell.drawTopBorder": {
    "shortDescription": "Specifies whether to show cell's top border."
  },
  "PdfCell.font": {
    "shortDescription": "An object that contains information about the font's size, name, and style."
  },
  "PdfCell.font.name": {
    "shortDescription": "Specifies the font name."
  },
  "PdfCell.font.size": {
    "shortDescription": "Specifies the font size."
  },
  "PdfCell.font.style": {
    "shortDescription": "Specifies the font style."
  },
  "PdfCell.horizontalAlign": {
    "shortDescription": "Specifies the horizontal alignment for the text inside the exported cell."
  },
  "PdfCell.padding": {
    "shortDescription": "Specifies the top, bottom, left, and right paddings of the DataGrid cell."
  },
  "PdfCell.padding.bottom": {
    "shortDescription": "Specifies the bottom padding of the DataGrid cell."
  },
  "PdfCell.padding.left": {
    "shortDescription": "Specifies the left padding of the DataGrid cell."
  },
  "PdfCell.padding.right": {
    "shortDescription": "Specifies the right padding of the DataGrid cell."
  },
  "PdfCell.padding.top": {
    "shortDescription": "Specifies the top padding of the DataGrid cell."
  },
  "PdfCell.text": {
    "shortDescription": "The cell's text."
  },
  "PdfCell.textColor": {
    "shortDescription": "Specifies the text color for the cell."
  },
  "PdfCell.verticalAlign": {
    "shortDescription": "Specifies the vertical alignment for the text inside the exported cell."
  },
  "PdfCell.wordWrapEnabled": {
    "shortDescription": "Specifies whether to enable word wrapping in the resulting PDF file."
  },
  "PdfDataGridCell": {
    "shortDescription": "A [DataGrid](/api-reference/10%20UI%20Components/dxDataGrid '/Documentation/ApiReference/UI_Components/dxDataGrid/') cell to be exported to PDF."
  },
  "PdfExportDataGridProps": {
    "shortDescription": "Properties that can be passed as a parameter to the [exportDataGrid(options)](/api-reference/50%20Common/utils/pdfExporter/exportDataGrid(options).md '/Documentation/ApiReference/Common/Utils/pdfExporter/#exportDataGridoptions') method from the [pdfExporter](/api-reference/50%20Common/utils/pdfExporter '/Documentation/ApiReference/Common/Utils/pdfExporter/') module."
  },
  "PdfExportDataGridProps.columnWidths": {
    "shortDescription": "Specifies a custom width for the exported DataGrid columns."
  },
  "PdfExportDataGridProps.component": {
    "shortDescription": "A DataGrid instance. This setting is required."
  },
  "PdfExportDataGridProps.customDrawCell": {
    "shortDescription": "A function that allows you to draw cell content of the exported DataGrid. This function is executed before the cell is exported."
  },
  "PdfExportDataGridProps.customizeCell": {
    "shortDescription": "Customizes a cell in PDF after creation."
  },
  "PdfExportDataGridProps.indent": {
    "shortDescription": "Specifies the width of the indent of data rows relative to their group header row."
  },
  "PdfExportDataGridProps.jsPDFDocument": {
    "shortDescription": "A <a href=\"https://github.com/MrRio/jsPDF\" target=\"_blank\">jsPDF</a> instance. This setting is required."
  },
  "PdfExportDataGridProps.loadPanel": {
    "shortDescription": "Configures the load panel."
  },
  "PdfExportDataGridProps.margin": {
    "shortDescription": "Specifies the margin for the top, bottom, left, and right sides of the exported Grid."
  },
  "PdfExportDataGridProps.margin.bottom": {
    "shortDescription": "Specifies the margin at the bottom of the page."
  },
  "PdfExportDataGridProps.margin.left": {
    "shortDescription": "Specifies the margin at the left side of the page."
  },
  "PdfExportDataGridProps.margin.right": {
    "shortDescription": "Specifies the margin at the right side of the page."
  },
  "PdfExportDataGridProps.margin.top": {
    "shortDescription": "Specifies the margin at the top of the page."
  },
  "PdfExportDataGridProps.onRowExporting": {
    "shortDescription": "A function that allows you to customize the height of the exported row. This function is executed before the row export."
  },
  "PdfExportDataGridProps.repeatHeaders": {
    "shortDescription": "Specifies whether to repeat the DataGrid column headers on each page."
  },
  "PdfExportDataGridProps.selectedRowsOnly": {
    "shortDescription": "Specifies whether or not to export only [selected](/api-reference/10%20UI%20Components/dxDataGrid/1%20Configuration/selection '/Documentation/ApiReference/UI_Components/dxDataGrid/Configuration/selection/') rows."
  },
  "PdfExportDataGridProps.topLeft": {
    "shortDescription": "Specifies the top left position of the DataGrid in the exported PDF document. Contains x and y properties. You can locate this position only below the page margins."
  },
  "PdfExportDataGridProps.topLeft.x": {
    "shortDescription": "Specifies the horizontal position of the exported DataGrid."
  },
  "PdfExportDataGridProps.topLeft.y": {
    "shortDescription": "Specifies the vertical position of the exported DataGrid."
  },
  "pdfExporter": {
    "shortDescription": "An object that serves as a namespace for the methods that export DevExtreme UI components to PDF."
  },
  "pdfExporter.exportDataGrid(options)": {
    "shortDescription": "Exports grid data to a PDF file."
  },
  "pdfExporter.exportGantt(options)": {
    "shortDescription": "Exports Gantt data to a PDF file."
  },
  "PdfExportGanttFont": {
    "shortDescription": "Configures a custom font used for the Gantt data export."
  },
  "PdfExportGanttFont.fontObject": {
    "shortDescription": "A custom font object."
  },
  "PdfExportGanttFont.name": {
    "shortDescription": "The font name."
  },
  "PdfExportGanttFont.style": {
    "shortDescription": "The font style."
  },
  "PdfExportGanttFont.weight": {
    "shortDescription": "The font weight."
  },
  "PdfExportGanttProps": {
    "shortDescription": "Properties that you can pass as a parameter to the [exportGantt(options)](/api-reference/50%20Common/utils/pdfExporter/exportGantt(options).md '/Documentation/ApiReference/Common/Utils/pdfExporter/#exportGanttoptions') method from the [pdfExporter](/api-reference/50%20Common/utils/pdfExporter '/Documentation/ApiReference/Common/Utils/pdfExporter/') module."
  },
  "PdfExportGanttProps.component": {
    "shortDescription": "A Gantt instance. This setting is required."
  },
  "PdfExportGanttProps.createDocumentMethod": {
    "shortDescription": "A function that creates a PDF document."
  },
  "PdfExportGanttProps.dateRange": {
    "shortDescription": "Specifies the date range for which to export tasks."
  },
  "PdfExportGanttProps.exportMode": {
    "shortDescription": "Specifies which part of the component to export (chart area, tree list area, or the entire component)."
  },
  "PdfExportGanttProps.fileName": {
    "shortDescription": "Specifies the file name."
  },
  "PdfExportGanttProps.font": {
    "shortDescription": "Specifies the font."
  },
  "PdfExportGanttProps.format": {
    "shortDescription": "Specifies the document size."
  },
  "PdfExportGanttProps.jsPDFDocument": {
    "shortDescription": "A <a href=\"https://github.com/MrRio/jsPDF\" target=\"_blank\">jsPDF</a> instance. This setting is required."
  },
  "PdfExportGanttProps.landscape": {
    "shortDescription": "Specifies whether to use horizontal orientation for the document."
  },
  "PdfExportGanttProps.margins": {
    "shortDescription": "Specifies the outer indents of the exported area."
  },
  "PieChartLegendItem": {
    "shortDescription": "An object that provides information about a legend item in the [PieChart](/api-reference/10%20UI%20Components/dxPieChart '/Documentation/ApiReference/UI_Components/dxPieChart/') UI component."
  },
  "PieChartLegendItem.argument": {
    "shortDescription": "The argument of the [point(s)](/api-reference/10%20UI%20Components/dxPieChart/7%20Interfaces/PieChartLegendItem/points.md '/Documentation/ApiReference/UI_Components/dxPieChart/Interfaces/PieChartLegendItem/#points') that the legend item represents."
  },
  "PieChartLegendItem.argumentIndex": {
    "shortDescription": "The zero-based index of the legend item used to identify the item among other legend items with the same [argument](/api-reference/10%20UI%20Components/dxPieChart/7%20Interfaces/PieChartLegendItem/argument.md '/Documentation/ApiReference/UI_Components/dxPieChart/Interfaces/PieChartLegendItem/#argument')."
  },
  "PieChartLegendItem.points": {
    "shortDescription": "An array of points that the legend item represents. Can contain more than one point only in a [multi-series PieChart](https://js.devexpress.com/Demos/WidgetsGallery/Demo/Charts/PieWithMultipleSeries)."
  },
  "PieChartLegendItem.text": {
    "shortDescription": "The text that the legend item displays."
  },
  "PieChartSeries": {
    "shortDescription": "Specifies properties for the series of the PieChart UI component."
  },
  "PieChartSeries.name": {
    "shortDescription": "Specifies the name that identifies the series."
  },
  "PieChartSeries.tag": {
    "shortDescription": "Specifies data about a series."
  },
  "pieChartSeriesObject": {
    "shortDescription": "This section describes the **Series** object, which represents a series."
  },
  "pieChartSeriesObject.clearHover()": {
    "shortDescription": "Switches the series from the hover state back to normal."
  },
  "pieChartSeriesObject.hover()": {
    "shortDescription": "Switches the series into the hover state, the same as when a user places the mouse pointer on it."
  },
  "pieChartSeriesObject.isHovered()": {
    "shortDescription": "Provides information about the hover state of a series."
  },
  "piePointObject": {
    "shortDescription": "This section describes the **Point** object, which represents a series point."
  },
  "piePointObject.hide()": {
    "shortDescription": "Hides a specific point."
  },
  "piePointObject.isVisible()": {
    "shortDescription": "Provides information about the visibility state of a point."
  },
  "piePointObject.percent": {
    "shortDescription": "Gets the percentage value of the specific point."
  },
  "piePointObject.show()": {
    "shortDescription": "Makes a specific point visible."
  },
  "PivotGridDataSource": {
    "shortDescription": "The **PivotGridDataSource** is an object that provides an API for processing data from an underlying [store](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/store '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/store/'). This object is used in the [PivotGrid](/api-reference/10%20UI%20Components/dxPivotGrid '/Documentation/ApiReference/UI_Components/dxPivotGrid/') UI component."
  },
  "PivotGridDataSource.changed": {
    "shortDescription": "Raised after data is successfully loaded."
  },
  "PivotGridDataSource.collapseAll(id)": {
    "shortDescription": "Collapses all header items of a field with the specified identifier."
  },
  "PivotGridDataSource.collapseHeaderItem(area, path)": {
    "shortDescription": "Collapses a specific header item."
  },
  "PivotGridDataSource.createDrillDownDataSource(options)": {
    "shortDescription": "Provides access to the [facts](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/04%20Summary%20Values.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Summary_Values') that were used to calculate a specific summary value."
  },
  "PivotGridDataSource.dispose()": {
    "shortDescription": "Disposes of all the resources allocated to the **PivotGridDataSource** instance."
  },
  "PivotGridDataSource.expandAll(id)": {
    "shortDescription": "Expands all the header items of a field with the specified identifier."
  },
  "PivotGridDataSource.expandHeaderItem(area, path)": {
    "shortDescription": "Expands a specific header item."
  },
  "PivotGridDataSource.field(id)": {
    "shortDescription": "Gets all the properties of a field with the specified identifier."
  },
  "PivotGridDataSource.field(id, options)": {
    "shortDescription": "Updates field options' values."
  },
  "PivotGridDataSource.fields()": {
    "shortDescription": "Gets all the fields including those [generated automatically](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/retrieveFields.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#retrieveFields')."
  },
  "PivotGridDataSource.fields(fields)": {
    "shortDescription": "Specifies a new [fields](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/') collection."
  },
  "PivotGridDataSource.fieldsPrepared": {
    "shortDescription": "Raised when all fields are loaded from the [store](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/store '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/store/') and they are ready to be displayed in the PivotGrid."
  },
  "PivotGridDataSource.filter()": {
    "shortDescription": "Gets the [filter](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/filter.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#filter') property's value. Does not affect an [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/')."
  },
  "PivotGridDataSource.filter(filterExpr)": {
    "shortDescription": "Sets the [filter](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/filter.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#filter') property's value. Does not affect an [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/')."
  },
  "PivotGridDataSource.getAreaFields(area, collectGroups)": {
    "shortDescription": "Gets all the fields within an area."
  },
  "PivotGridDataSource.getData()": {
    "shortDescription": "Gets the loaded data. Another data portion is loaded every time a [header item](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers') is expanded."
  },
  "PivotGridDataSource.isLoading()": {
    "shortDescription": "Checks whether the **PivotGridDataSource** is loading data."
  },
  "PivotGridDataSource.load()": {
    "shortDescription": "Starts loading data."
  },
  "PivotGridDataSource.loadError": {
    "shortDescription": "Raised when data loading fails."
  },
  "PivotGridDataSource.loadingChanged": {
    "shortDescription": "Raised when the data loading status changes."
  },
  "PivotGridDataSource.off(eventName)": {
    "shortDescription": "Detaches all event handlers from a single event."
  },
  "PivotGridDataSource.off(eventName, eventHandler)": {
    "shortDescription": "Detaches a particular event handler from a single event."
  },
  "PivotGridDataSource.on(eventName, eventHandler)": {
    "shortDescription": "Subscribes to an event."
  },
  "PivotGridDataSource.on(events)": {
    "shortDescription": "Subscribes to events."
  },
  "PivotGridDataSource.reload()": {
    "shortDescription": "Clears the loaded **PivotGridDataSource** data and calls the [load()](/api-reference/30%20Data%20Layer/DataSource/3%20Methods/load().md '/Documentation/ApiReference/Data_Layer/DataSource/Methods/#load') method."
  },
  "PivotGridDataSource.state()": {
    "shortDescription": "Gets the current **PivotGridDataSource** state. Part of the PivotGrid UI component's [state storing](/api-reference/10%20UI%20Components/dxPivotGrid/1%20Configuration/stateStoring '/Documentation/ApiReference/UI_Components/dxPivotGrid/Configuration/stateStoring/') feature."
  },
  "PivotGridDataSource.state(state)": {
    "shortDescription": "Sets the **PivotGridDataSource** state. Part of the PivotGrid UI component's [state storing](/api-reference/10%20UI%20Components/dxPivotGrid/1%20Configuration/stateStoring '/Documentation/ApiReference/UI_Components/dxPivotGrid/Configuration/stateStoring/') feature."
  },
  "PivotGridDataSourceOptions.fields": {
    "shortDescription": "Configures pivot grid fields."
  },
  "PivotGridDataSourceOptions.fields.allowCrossGroupCalculation": {
    "shortDescription": "Specifies whether to take neighboring groups' summary values into account when calculating a [running total](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/runningTotal.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#runningTotal') and [absolute or percent variation](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/summaryDisplayMode.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#summaryDisplayMode')."
  },
  "PivotGridDataSourceOptions.fields.allowExpandAll": {
    "shortDescription": "Allows users to expand/collapse all header items within the same header level. Ignored if the [PivotGridDataSource](/api-reference/30%20Data%20Layer/PivotGridDataSource '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/')'s [paginate](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/paginate.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#paginate') property is **true**."
  },
  "PivotGridDataSourceOptions.fields.allowFiltering": {
    "shortDescription": "Specifies whether a user can filter the field's values."
  },
  "PivotGridDataSourceOptions.fields.allowSorting": {
    "shortDescription": "Specifies whether a user can change the field's sorting."
  },
  "PivotGridDataSourceOptions.fields.allowSortingBySummary": {
    "shortDescription": "Allows users to sort the pivot grid by summary values instead of field values. Ignored if the [PivotGridDataSource](/api-reference/30%20Data%20Layer/PivotGridDataSource '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/')'s [paginate](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/paginate.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#paginate') property is **true**."
  },
  "PivotGridDataSourceOptions.fields.area": {
    "shortDescription": "Specifies the field's area."
  },
  "PivotGridDataSourceOptions.fields.areaIndex": {
    "shortDescription": "Specifies the field's order among the other fields in the same area. Corresponds to the field's order in the **fields** array by default."
  },
  "PivotGridDataSourceOptions.fields.calculateCustomSummary": {
    "shortDescription": "Specifies a custom aggregate function. Applies only if the [summaryType](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/summaryType.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#summaryType') is *\"custom\"* and the [remoteOperations](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/remoteOperations.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#remoteOperations') is **false**. Cannot be used with an [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/')."
  },
  "PivotGridDataSourceOptions.fields.calculateSummaryValue": {
    "shortDescription": "Specifies a custom post-processing function for summary values."
  },
  "PivotGridDataSourceOptions.fields.caption": {
    "shortDescription": "Specifies the field's caption to be displayed in the [field chooser](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/10%20Field%20Chooser/01%20Field%20Chooser.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Chooser') and on the [field panel](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/15%20Field%20Panel.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Panel')."
  },
  "PivotGridDataSourceOptions.fields.customizeText": {
    "shortDescription": "Customizes the text displayed in summary cells."
  },
  "PivotGridDataSourceOptions.fields.dataField": {
    "shortDescription": "Specifies which data source field provides data for the pivot grid field."
  },
  "PivotGridDataSourceOptions.fields.dataType": {
    "shortDescription": "Casts field values to a specific data type."
  },
  "PivotGridDataSourceOptions.fields.displayFolder": {
    "shortDescription": "Specifies the name of the directory in which the field is located when displayed in the field chooser."
  },
  "PivotGridDataSourceOptions.fields.expanded": {
    "shortDescription": "Specifies whether to expand all items within the field's header level."
  },
  "PivotGridDataSourceOptions.fields.filterType": {
    "shortDescription": "Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values."
  },
  "PivotGridDataSourceOptions.fields.filterValues": {
    "shortDescription": "Specifies the values by which the field is filtered."
  },
  "PivotGridDataSourceOptions.fields.format": {
    "shortDescription": "Formats field values before they are displayed."
  },
  "PivotGridDataSourceOptions.fields.groupIndex": {
    "shortDescription": "Specifies the field's index within its group."
  },
  "PivotGridDataSourceOptions.fields.groupInterval": {
    "shortDescription": "Specifies how the field's values are combined into groups for the [headers](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers'). Cannot be used with an [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/')."
  },
  "PivotGridDataSourceOptions.fields.groupName": {
    "shortDescription": "Specifies the name of the field's group."
  },
  "PivotGridDataSourceOptions.fields.headerFilter": {
    "shortDescription": "Configures the field's header filter."
  },
  "PivotGridDataSourceOptions.fields.headerFilter.allowSearch": {
    "shortDescription": "Specifies whether searching is enabled in the header filter.",
    "depNote": "Use [search.enabled](/api-reference/40%20Common%20Types/15%20grids/HeaderFilterSearchConfig/enabled.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/headerFilter/search/#enabled') instead."
  },
  "PivotGridDataSourceOptions.fields.headerFilter.allowSelectAll": {
    "shortDescription": "Specifies whether a \"Select All\" option is available to users."
  },
  "PivotGridDataSourceOptions.fields.headerFilter.height": {
    "shortDescription": "Specifies the height of the popup menu containing filtering values."
  },
  "PivotGridDataSourceOptions.fields.headerFilter.search": {
    "shortDescription": "Configures the header filter's search functionality."
  },
  "PivotGridDataSourceOptions.fields.headerFilter.width": {
    "shortDescription": "Specifies the width of the popup menu containing filtering values."
  },
  "PivotGridDataSourceOptions.fields.index": {
    "shortDescription": ""
  },
  "PivotGridDataSourceOptions.fields.isMeasure": {
    "shortDescription": "Specifies whether the field should be treated as a measure (a field providing data for calculation)."
  },
  "PivotGridDataSourceOptions.fields.name": {
    "shortDescription": "Specifies the field's identifier."
  },
  "PivotGridDataSourceOptions.fields.runningTotal": {
    "shortDescription": "Specifies whether to calculate the running total by rows or by columns."
  },
  "PivotGridDataSourceOptions.fields.selector": {
    "shortDescription": "Specifies a function that combines the field's values into groups for the [headers](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers'). Cannot be used with an [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/') or [remote operations](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/remoteOperations.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/#remoteOperations')."
  },
  "PivotGridDataSourceOptions.fields.showGrandTotals": {
    "shortDescription": "Specifies whether to display the field's [grand totals](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/05%20Totals '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Totals'). Applies only if the field is in the data [area](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/area.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#area')."
  },
  "PivotGridDataSourceOptions.fields.showTotals": {
    "shortDescription": "Specifies whether to display the field's [totals](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/05%20Totals '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Totals')."
  },
  "PivotGridDataSourceOptions.fields.showValues": {
    "shortDescription": "Specifies whether to display the field's summary values. Applies only if the field is in the data [area](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/area.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#area'). Inherits the [showTotals](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/showTotals.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#showTotals')' value by default."
  },
  "PivotGridDataSourceOptions.fields.sortBy": {
    "shortDescription": "Specifies how the field's values in the [headers](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers') should be sorted."
  },
  "PivotGridDataSourceOptions.fields.sortBySummaryField": {
    "shortDescription": "Sorts the field's values in the [headers](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers') by the specified measure's summary values. Accepts the measure's [name](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/name.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#name'), [caption](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/caption.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#caption'), [dataField](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/dataField.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#dataField'), or index in the [fields](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/') array."
  },
  "PivotGridDataSourceOptions.fields.sortBySummaryPath": {
    "shortDescription": "Specifies a path to the column or row whose summary values should be used to sort the field's values in the [headers](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers')."
  },
  "PivotGridDataSourceOptions.fields.sortingMethod": {
    "shortDescription": "Specifies a custom comparison function that sorts the field's values in the [headers](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers')."
  },
  "PivotGridDataSourceOptions.fields.sortOrder": {
    "shortDescription": "Specifies the field values' sorting order."
  },
  "PivotGridDataSourceOptions.fields.summaryDisplayMode": {
    "shortDescription": "Specifies a predefined post-processing function. Does not apply when the [calculateSummaryValue](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/fields/calculateSummaryValue.md '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/fields/#calculateSummaryValue') property is set."
  },
  "PivotGridDataSourceOptions.fields.summaryType": {
    "shortDescription": "Specifies how to aggregate the field's data. Cannot be used with an [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/')."
  },
  "PivotGridDataSourceOptions.fields.visible": {
    "shortDescription": "Specifies whether the field is visible in the pivot grid and [field chooser](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/10%20Field%20Chooser/01%20Field%20Chooser.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Field_Chooser')."
  },
  "PivotGridDataSourceOptions.fields.width": {
    "shortDescription": "Specifies the field's width in pixels when the field is displayed in the pivot grid."
  },
  "PivotGridDataSourceOptions.fields.wordWrapEnabled": {
    "shortDescription": "Specifies whether text that does not fit into a [header item](/concepts/05%20UI%20Components/PivotGrid/010%20Visual%20Elements/02%20Headers.md '/Documentation/Guide/UI_Components/PivotGrid/Visual_Elements/#Headers') should be wrapped."
  },
  "PivotGridDataSourceOptions.filter": {
    "shortDescription": "Specifies data filtering conditions. Cannot be used with an [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/')."
  },
  "PivotGridDataSourceOptions.onChanged": {
    "shortDescription": "A function that is executed after data is successfully loaded."
  },
  "PivotGridDataSourceOptions.onFieldsPrepared": {
    "shortDescription": "A function that is executed when all fields are loaded from the [store](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/store '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/store/') and they are ready to be displayed in the PivotGrid."
  },
  "PivotGridDataSourceOptions.onLoadError": {
    "shortDescription": "A function that is executed when data loading fails."
  },
  "PivotGridDataSourceOptions.onLoadingChanged": {
    "shortDescription": "A function that is executed when the data loading status changes."
  },
  "PivotGridDataSourceOptions.paginate": {
    "shortDescription": "Specifies whether the **PivotGridDataSource** should load data in portions. Can be used only with an [XmlaStore](/api-reference/30%20Data%20Layer/XmlaStore '/Documentation/ApiReference/Data_Layer/XmlaStore/')."
  },
  "PivotGridDataSourceOptions.remoteOperations": {
    "shortDescription": "Specifies whether the data processing operations (filtering, grouping, summary calculation) should be performed on the server."
  },
  "PivotGridDataSourceOptions.retrieveFields": {
    "shortDescription": "Specifies whether to auto-generate pivot grid fields from the [store](/api-reference/30%20Data%20Layer/PivotGridDataSource/1%20Configuration/store '/Documentation/ApiReference/Data_Layer/PivotGridDataSource/Configuration/store/')'s data."
  },
  "PivotGridDataSourceOptions.store": {
    "shortDescription": "Configures the **DataSource**'s underlying store."
  },
  "PivotGridDataSourceOptions.store.type": {
    "shortDescription": "Specifies the **PivotGridDataSource**'s storage type."
  },
  "PointInteractionInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PointInteractionInfo.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "PolarChartSeries": {
    "shortDescription": "Specifies properties for PolarChart UI component series."
  },
  "PolarChartSeries.name": {
    "shortDescription": "Specifies the name that identifies the series."
  },
  "PolarChartSeries.tag": {
    "shortDescription": "Specifies data about a series."
  },
  "PolarChartSeries.type": {
    "shortDescription": "Sets the series type."
  },
  "polarChartSeriesObject": {
    "shortDescription": "This section describes the **Series** object, which represents a series."
  },
  "polarChartSeriesObject.axis": {
    "shortDescription": "Returns the name of the value [axis](/Documentation/ApiReference/UI_Components/dxPolarChart/Configuration/commonSeriesSettings/#axis) of the series."
  },
  "polarPointObject": {
    "shortDescription": "This section describes the **Point** object, which represents a series point."
  },
  "PositionConfig": {
    "shortDescription": "Configures the position of an overlay element."
  },
  "PositionConfig.at": {
    "shortDescription": "Specifies the [target element](/api-reference/50%20Common/Object%20Structures/positionConfig/of.md '/Documentation/ApiReference/Common/Object_Structures/PositionConfig/#of')'s side or corner where the overlay element should be positioned."
  },
  "PositionConfig.at.x": {
    "shortDescription": "Specifies a position in the horizontal direction (for left, right, or center alignment)."
  },
  "PositionConfig.at.y": {
    "shortDescription": "Specifies a position in the vertical direction (for top, bottom, or center alignment)."
  },
  "PositionConfig.boundary": {
    "shortDescription": "A boundary element in which the overlay element must be positioned."
  },
  "PositionConfig.boundaryOffset": {
    "shortDescription": "Specifies the offset of boundaries from the [boundary](/api-reference/50%20Common/Object%20Structures/positionConfig/boundary.md '/Documentation/ApiReference/Common/Object_Structures/PositionConfig/#boundary') element."
  },
  "PositionConfig.boundaryOffset.x": {
    "shortDescription": "Specifies a horizontal offset."
  },
  "PositionConfig.boundaryOffset.y": {
    "shortDescription": "Specifies a vertical offset."
  },
  "PositionConfig.collision": {
    "shortDescription": "Specifies how to resolve collisions - when the overlay element exceeds the [boundary](/api-reference/50%20Common/Object%20Structures/positionConfig/boundary.md '/Documentation/ApiReference/Common/Object_Structures/PositionConfig/#boundary') element."
  },
  "PositionConfig.collision.x": {
    "shortDescription": "Specifies how to resolve horizontal collisions."
  },
  "PositionConfig.collision.y": {
    "shortDescription": "Specifies how to resolve vertical collisions."
  },
  "PositionConfig.my": {
    "shortDescription": "Specifies the overlay element's side or corner to align with a [target element](/api-reference/50%20Common/Object%20Structures/positionConfig/of.md '/Documentation/ApiReference/Common/Object_Structures/PositionConfig/#of')."
  },
  "PositionConfig.my.x": {
    "shortDescription": "Specifies a position in the horizontal direction (for left, right, or center alignment)."
  },
  "PositionConfig.my.y": {
    "shortDescription": "Specifies a position in the vertical direction (for top, bottom, or center alignment)."
  },
  "PositionConfig.of": {
    "shortDescription": "The target element relative to which the overlay element should be positioned."
  },
  "PositionConfig.offset": {
    "shortDescription": "Specifies the overlay element's offset from a specified position."
  },
  "PositionConfig.offset.x": {
    "shortDescription": "Specifies a horizontal offset."
  },
  "PositionConfig.offset.y": {
    "shortDescription": "Specifies a vertical offset."
  },
  "Query": {
    "shortDescription": "The **Query** is an object that provides a chainable interface for making data queries."
  },
  "Query.aggregate(seed, step, finalize)": {
    "shortDescription": "Calculates a custom summary for all data items."
  },
  "Query.aggregate(step)": {
    "shortDescription": "Calculates a custom summary for all data items."
  },
  "Query.avg()": {
    "shortDescription": "Calculates the average of all values. Applies only to numeric arrays."
  },
  "Query.avg(getter)": {
    "shortDescription": "Calculates the average of all values found using a [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters')."
  },
  "Query.count()": {
    "shortDescription": "Calculates the number of data items."
  },
  "Query.enumerate()": {
    "shortDescription": "Executes the **Query**. This is an asynchronous alternative to the [toArray()](/api-reference/30%20Data%20Layer/Query/3%20Methods/toArray().md '/Documentation/ApiReference/Data_Layer/Query/Methods/#toArray') method."
  },
  "Query.filter(criteria)": {
    "shortDescription": "Filters data items using a filter expression."
  },
  "Query.filter(predicate)": {
    "shortDescription": "Filters data items using a custom function."
  },
  "Query.groupBy(getter)": {
    "shortDescription": "Groups data items by the specified [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters')."
  },
  "Query.max()": {
    "shortDescription": "Calculates the maximum value. Applies only to numeric arrays."
  },
  "Query.max(getter)": {
    "shortDescription": "Calculates the maximum of all values found using a [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters')."
  },
  "Query.min()": {
    "shortDescription": "Calculates the minimum value. Applies only to numeric arrays."
  },
  "Query.min(getter)": {
    "shortDescription": "Calculates the minumum of all values found using a [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters')."
  },
  "Query.select(getter)": {
    "shortDescription": "Selects individual fields from data objects."
  },
  "Query.slice(skip, take)": {
    "shortDescription": "Gets a specified number of data items starting from a given index."
  },
  "Query.sortBy(getter)": {
    "shortDescription": "Sorts data items by the specified [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters') in ascending order."
  },
  "Query.sortBy(getter, desc)": {
    "shortDescription": "Sorts data items by the specified [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters') in the specified sorting order."
  },
  "Query.sum()": {
    "shortDescription": "Calculates the sum of all values."
  },
  "Query.sum(getter)": {
    "shortDescription": "Calculates the sum of all values found using a [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters')."
  },
  "Query.thenBy(getter)": {
    "shortDescription": "Sorts data items by one more [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters') in ascending order."
  },
  "Query.thenBy(getter, desc)": {
    "shortDescription": "Sorts data items by one more [getter](/concepts/70%20Data%20Binding/5%20Data%20Layer/9%20Getters%20And%20Setters '/Documentation/Guide/Data_Binding/Data_Layer/#Getters_And_Setters') in the specified sorting order."
  },
  "Query.toArray()": {
    "shortDescription": "Gets data items associated with the **Query**. This is a synchronous alternative to the [enumerate()](/api-reference/30%20Data%20Layer/Query/3%20Methods/enumerate().md '/Documentation/ApiReference/Data_Layer/Query/Methods/#enumerate') method."
  },
  "RangeRule": {
    "shortDescription": "A validation rule that demands the target value be within the specified value range (including the range's end points)."
  },
  "RangeRule.ignoreEmptyValue": {
    "shortDescription": "If set to **true**, empty values are valid."
  },
  "RangeRule.max": {
    "shortDescription": "Specifies the maximum value allowed for the validated value."
  },
  "RangeRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "RangeRule.min": {
    "shortDescription": "Specifies the minimum value allowed for the validated value."
  },
  "RangeRule.reevaluate": {
    "shortDescription": "Indicates whether the rule should be always checked for the target value or only when the target value changes."
  },
  "RangeRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"range\"* to use the **RangeRule**."
  },
  "registerComponent(name, componentClass)": {
    "shortDescription": "Registers a new component in the [DevExpress.ui](/api-reference/50%20Common/utils/ui '/Documentation/ApiReference/Common/Utils/#ui') namespace."
  },
  "registerComponent(name, namespace, componentClass)": {
    "shortDescription": "Registers a new component in the specified namespace."
  },
  "RemoteFileSystemProvider": {
    "shortDescription": "The **Remote** file system provider works with a file system located on the server."
  },
  "RemoteFileSystemProviderOptions.beforeAjaxSend": {
    "shortDescription": "Specifies a function that customizes an Ajax request before it is sent to the server."
  },
  "RemoteFileSystemProviderOptions.beforeSubmit": {
    "shortDescription": "Specifies a function that customizes a form submit request before it is sent to the server."
  },
  "RemoteFileSystemProviderOptions.endpointUrl": {
    "shortDescription": "Specifies the URL of an endpoint used to access and modify a file system located on the server."
  },
  "RemoteFileSystemProviderOptions.hasSubDirectoriesExpr": {
    "shortDescription": "Specifies which data field provides information about whether a directory has subdirectories."
  },
  "RemoteFileSystemProviderOptions.requestHeaders": {
    "shortDescription": "Specifies the request headers."
  },
  "RequiredRule": {
    "shortDescription": "A validation rule that demands that a validated field has a value."
  },
  "RequiredRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "RequiredRule.trim": {
    "shortDescription": "Indicates whether to remove the Space characters from the validated value."
  },
  "RequiredRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"required\"* to use the **RequiredRule**."
  },
  "ResizeInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ResizeInfo.height": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ResizeInfo.width": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ResolvedData": {
    "shortDescription": "Specifies returned data of the `load()` method in CustomStore.",
    "depNote": "Use [LoadResult](/api-reference/40%20Common%20Types/10%20data/custom-store/LoadResult '/Documentation/ApiReference/Common_Types/data/custom-store/LoadResult/') instead."
  },
  "RowDragging": {
    "shortDescription": "Configures row reordering using drag and drop gestures."
  },
  "RowInsertedInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowInsertedInfo.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowInsertedInfo.error": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowInsertedInfo.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowInsertingInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowInsertingInfo.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowInsertingInfo.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowKeyInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowKeyInfo.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowRemovedInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowRemovedInfo.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowRemovedInfo.error": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowRemovedInfo.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowRemovingInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowRemovingInfo.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowRemovingInfo.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowRemovingInfo.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatedInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatedInfo.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatedInfo.error": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatedInfo.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatingInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatingInfo.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatingInfo.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatingInfo.newData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowUpdatingInfo.oldData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowValidatingInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowValidatingInfo.brokenRules": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowValidatingInfo.errorText": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowValidatingInfo.isValid": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowValidatingInfo.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowValidatingInfo.newData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowValidatingInfo.oldData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "RowValidatingInfo.promise": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "SavingInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "SavingInfo.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "SavingInfo.changes": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "SavingInfo.promise": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScaleBreak": {
    "shortDescription": "A class describing a scale break range. Inherited by scale breaks in the Chart and RangeSelector."
  },
  "ScaleBreak.endValue": {
    "shortDescription": "Along with the **startValue** property, limits the scale break."
  },
  "ScaleBreak.startValue": {
    "shortDescription": "Along with the **endValue** property, limits the scale break."
  },
  "ScrollEventInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollEventInfo.reachedBottom": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollEventInfo.reachedLeft": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollEventInfo.reachedRight": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollEventInfo.reachedTop": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollEventInfo.scrollOffset": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollInfo.reachedBottom": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollInfo.reachedLeft": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollInfo.reachedRight": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollInfo.reachedTop": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollInfo.scrollOffset": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ScrollingBase": {
    "shortDescription": "<!-- Overridden -->"
  },
  "SearchBoxMixin": {
    "shortDescription": ""
  },
  "SearchBoxMixinOptions.searchEditorOptions": {
    "shortDescription": "Configures the search panel."
  },
  "SearchBoxMixinOptions.searchEnabled": {
    "shortDescription": "Specifies whether the search panel is visible."
  },
  "SearchBoxMixinOptions.searchExpr": {
    "shortDescription": "Specifies a data object's field name or an expression whose value is compared to the search string."
  },
  "SearchBoxMixinOptions.searchMode": {
    "shortDescription": "Specifies a comparison operation used to search UI component items."
  },
  "SearchBoxMixinOptions.searchTimeout": {
    "shortDescription": "Specifies a delay in milliseconds between when a user finishes typing, and the search is executed."
  },
  "SearchBoxMixinOptions.searchValue": {
    "shortDescription": "Specifies the current search string."
  },
  "SearchPanel": {
    "shortDescription": "Configures the search panel."
  },
  "Selection": {
    "shortDescription": "Configures runtime selection."
  },
  "SelectionBase": {
    "shortDescription": "<!-- Overridden -->"
  },
  "SelectionChangeInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "SelectionChangeInfo.addedItems": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "SelectionChangeInfo.removedItems": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "setTemplateEngine(options)": {
    "shortDescription": "Sets custom functions that compile and render templates."
  },
  "Sorting": {
    "shortDescription": "Configures runtime sorting."
  },
  "StateStoring": {
    "shortDescription": "Configures state storing."
  },
  "Store": {
    "shortDescription": "The base class for all Stores."
  },
  "Store.insert(values)": {
    "shortDescription": "Adds a data item to the store."
  },
  "Store.inserted": {
    "shortDescription": "Raised after a data item is added to the store."
  },
  "Store.inserting": {
    "shortDescription": "Raised before a data item is added to the store."
  },
  "Store.key()": {
    "shortDescription": "Gets the key property (or properties) as specified in the [key](/api-reference/30%20Data%20Layer/Store/1%20Configuration/key.md '{basewidgetpath}/Configuration/#key') property."
  },
  "Store.keyOf(obj)": {
    "shortDescription": "Gets a data item's key value."
  },
  "Store.load()": {
    "shortDescription": "Starts loading data."
  },
  "Store.load(options)": {
    "shortDescription": "Starts loading data."
  },
  "Store.loaded": {
    "shortDescription": "Raised after data is loaded to the store."
  },
  "Store.loading": {
    "shortDescription": "Raised before data is loaded to the store."
  },
  "Store.modified": {
    "shortDescription": "Raised after a data item is added, updated, or removed from the store."
  },
  "Store.modifying": {
    "shortDescription": "Raised before a data item is added, updated, or removed from the store."
  },
  "Store.off(eventName)": {
    "shortDescription": "Detaches all event handlers from a single event."
  },
  "Store.off(eventName, eventHandler)": {
    "shortDescription": "Detaches a particular event handler from a single event."
  },
  "Store.on(eventName, eventHandler)": {
    "shortDescription": "Subscribes to an event."
  },
  "Store.on(events)": {
    "shortDescription": "Subscribes to events."
  },
  "Store.push": {
    "shortDescription": "Raised before changes are pushed to the store."
  },
  "Store.push(changes)": {
    "shortDescription": "Pushes data changes to the store and notifies the [DataSource](/api-reference/30%20Data%20Layer/DataSource '/Documentation/ApiReference/Data_Layer/DataSource/')."
  },
  "Store.remove(key)": {
    "shortDescription": "Removes a data item with a specific key from the store."
  },
  "Store.removed": {
    "shortDescription": "Raised after a data item is removed from the store."
  },
  "Store.removing": {
    "shortDescription": "Raised before a data item is removed from the store."
  },
  "Store.totalCount(options)": {
    "shortDescription": "Gets the total count of items the [load()](/api-reference/30%20Data%20Layer/Store/3%20Methods/load().md '{basewidgetpath}/Methods/#load') function returns."
  },
  "Store.update(key, values)": {
    "shortDescription": "Updates a data item with a specific key."
  },
  "Store.updated": {
    "shortDescription": "Raised after a data item is updated in the store."
  },
  "Store.updating": {
    "shortDescription": "Raised before a data item is updated in the store."
  },
  "StoreOptions.errorHandler": {
    "shortDescription": "Specifies the function that is executed when the store throws an error."
  },
  "StoreOptions.key": {
    "shortDescription": "Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique."
  },
  "StoreOptions.onInserted": {
    "shortDescription": "A function that is executed after a data item is added to the store."
  },
  "StoreOptions.onInserting": {
    "shortDescription": "A function that is executed before a data item is added to the store."
  },
  "StoreOptions.onLoaded": {
    "shortDescription": "A function that is executed after data is loaded to the store."
  },
  "StoreOptions.onLoading": {
    "shortDescription": "A function that is executed before data is loaded to the store."
  },
  "StoreOptions.onModified": {
    "shortDescription": "A function that is executed after a data item is added, updated, or removed from the store."
  },
  "StoreOptions.onModifying": {
    "shortDescription": "A function that is executed before a data item is added, updated, or removed from the store."
  },
  "StoreOptions.onPush": {
    "shortDescription": "The function executed before changes are pushed to the store."
  },
  "StoreOptions.onRemoved": {
    "shortDescription": "A function that is executed after a data item is removed from the store."
  },
  "StoreOptions.onRemoving": {
    "shortDescription": "A function that is executed before a data item is removed from the store."
  },
  "StoreOptions.onUpdated": {
    "shortDescription": "A function that is executed after a data item is updated in the store."
  },
  "StoreOptions.onUpdating": {
    "shortDescription": "A function that is executed before a data item is updated in the store."
  },
  "StringLengthRule": {
    "shortDescription": "A validation rule that demands the target value length be within the specified value range (including the range's end points)."
  },
  "StringLengthRule.ignoreEmptyValue": {
    "shortDescription": "If set to **true**, empty values are valid."
  },
  "StringLengthRule.max": {
    "shortDescription": "Specifies the maximum length allowed for the validated value."
  },
  "StringLengthRule.message": {
    "shortDescription": "Specifies the message that is shown if the rule is broken."
  },
  "StringLengthRule.min": {
    "shortDescription": "Specifies the minimum length allowed for the validated value."
  },
  "StringLengthRule.trim": {
    "shortDescription": "Indicates whether or not to remove the Space characters from the validated value."
  },
  "StringLengthRule.type": {
    "shortDescription": "Specifies the rule type. Set it to *\"stringLength\"* to use the **StringLengthRule**."
  },
  "Summary": {
    "shortDescription": "Specifies the properties of the grid summary."
  },
  "SummaryDescriptor": {
    "shortDescription": "A total summary expression for `loadOptions`."
  },
  "SummaryGroupItem": {
    "shortDescription": "Specifies items of the group summary."
  },
  "SummaryTexts": {
    "shortDescription": "Contains properties that specify text patterns for summary items."
  },
  "SummaryTotalItem": {
    "shortDescription": "Specifies items of the total summary."
  },
  "TabPanelItemInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "TabPanelItemInfo.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "TabPanelItemInfo.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "TargetedAppointmentInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "TargetedAppointmentInfo.appointmentData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "TargetedAppointmentInfo.targetedAppointmentData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "template": {
    "shortDescription": "A template notation used to specify templates for UI component elements."
  },
  "TextEditorButton.location": {
    "shortDescription": "Specifies whether to place the button before or after the input text field."
  },
  "TextEditorButton.name": {
    "shortDescription": "Specifies the button's name."
  },
  "TextEditorButton.options": {
    "shortDescription": "Configures the [Button](https://js.devexpress.com/Demos/WidgetsGallery/Demo/Button/PredefinedTypes) UI component used as the action button."
  },
  "TitleRenderedInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ToolbarPreparingInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ToolbarPreparingInfo.toolbarOptions": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "TransitionExecutor": {
    "shortDescription": "The manager that performs several specified animations at a time."
  },
  "TransitionExecutor.enter(elements, animation)": {
    "shortDescription": "Registers the set of elements that should be animated as \"entering\" using the specified animation configuration."
  },
  "TransitionExecutor.leave(elements, animation)": {
    "shortDescription": "Registers a set of elements that should be animated as \"leaving\" using the specified animation configuration."
  },
  "TransitionExecutor.reset()": {
    "shortDescription": "Deletes all the animations registered in the Transition Executor by using the [enter(elements, animation)](/api-reference/50%20Common/utils/TransitionExecutor/enter(elements_animation).md '/Documentation/ApiReference/Common/utils/TransitionExecutor/#enterelements_animation') and [leave(elements, animation)](/api-reference/50%20Common/utils/TransitionExecutor/leave(elements_animation).md '/Documentation/ApiReference/Common/utils/TransitionExecutor/#leaveelements_animation') methods."
  },
  "TransitionExecutor.start()": {
    "shortDescription": "Starts all the animations registered using the [enter(elements, animation)](/api-reference/50%20Common/utils/TransitionExecutor/enter(elements_animation).md '/Documentation/ApiReference/Common/utils/TransitionExecutor/#enterelements_animation') and [leave(elements, animation)](/api-reference/50%20Common/utils/TransitionExecutor/leave(elements_animation).md '/Documentation/ApiReference/Common/utils/TransitionExecutor/#leaveelements_animation') methods beforehand."
  },
  "TransitionExecutor.stop()": {
    "shortDescription": "Stops all started animations."
  },
  "ui": {
    "shortDescription": "An object that serves as a namespace for [DevExtreme UI components](/api-reference/10%20UI%20Components '/Documentation/ApiReference/UI_Components/') as well as for methods implementing UI logic in DevExtreme sites/applications."
  },
  "UI Events": {
    "shortDescription": "The events used to handle user interaction with UI elements."
  },
  "UI Events.dxclick": {
    "shortDescription": "Raised when the element is clicked."
  },
  "UI Events.dxcontextmenu": {
    "shortDescription": "Raised when the right mouse button is clicked on the element or when the element is held during a specified time period."
  },
  "UI Events.dxdblclick": {
    "shortDescription": "Raised when a user has performed a double click on the element."
  },
  "UI Events.dxdrag": {
    "shortDescription": "Raised when the drag gesture has been performed."
  },
  "UI Events.dxdragend": {
    "shortDescription": "Raised when the drag gesture has been completed."
  },
  "UI Events.dxdragenter": {
    "shortDescription": "Raised when a user moves the pointer into the element, provided that the drag gesture is being performed."
  },
  "UI Events.dxdragleave": {
    "shortDescription": "Raised when a user moves the pointer out of the element, provided that the drag gesture is being performed."
  },
  "UI Events.dxdragstart": {
    "shortDescription": "Raised when the drag gesture has been started."
  },
  "UI Events.dxdrop": {
    "shortDescription": "Raised when dragged data has been dropped on the element."
  },
  "UI Events.dxhold": {
    "shortDescription": "Raised when the element is being held during a specified time."
  },
  "UI Events.dxhoverend": {
    "shortDescription": "Raised when the mouse pointer leaves the element."
  },
  "UI Events.dxhoverstart": {
    "shortDescription": "Raised when the mouse pointer appears over the element."
  },
  "UI Events.dxpinch": {
    "shortDescription": "Raised when the pinch gesture has been performed."
  },
  "UI Events.dxpinchend": {
    "shortDescription": "Raised when the pinch gesture has been completed."
  },
  "UI Events.dxpinchstart": {
    "shortDescription": "Raised when the pinch gesture has been started."
  },
  "UI Events.dxpointercancel": {
    "shortDescription": "Raised when the browser decides that the pointer is unlikely to produce any more events."
  },
  "UI Events.dxpointerdown": {
    "shortDescription": "Raised when the pointer takes on the active buttons state."
  },
  "UI Events.dxpointerenter": {
    "shortDescription": "Raised when a pointer is moved to either the hit test area of an element or one of its descendants."
  },
  "UI Events.dxpointerleave": {
    "shortDescription": "Raised when a pointer is moved from either the hit test area of an element or one of its descendants."
  },
  "UI Events.dxpointermove": {
    "shortDescription": "Raised when any pointer parameter has been changed. (Position, tilt, pressure, button state, or contact geometry)."
  },
  "UI Events.dxpointerout": {
    "shortDescription": "Raised when a pointer is moved from either the hit test area of an element or one of its descendants."
  },
  "UI Events.dxpointerover": {
    "shortDescription": "Raised when a pointer is moved to the hit test area of an element or one of its descendants."
  },
  "UI Events.dxpointerup": {
    "shortDescription": "Raised when the pointer loses the active buttons state."
  },
  "UI Events.dxremove": {
    "shortDescription": "Raised when a UI component associated with an element is being removed from the DOM."
  },
  "UI Events.dxrotate": {
    "shortDescription": "Raised when the rotate gesture has been performed."
  },
  "UI Events.dxrotateend": {
    "shortDescription": "Raised when the rotate gesture has been completed."
  },
  "UI Events.dxrotatestart": {
    "shortDescription": "Raised when the rotate gesture has been started."
  },
  "UI Events.dxswipe": {
    "shortDescription": "Raised when the swipe gesture has been performed."
  },
  "UI Events.dxswipeend": {
    "shortDescription": "Raised when the swipe gesture is finished."
  },
  "UI Events.dxswipestart": {
    "shortDescription": "Raised when the swipe gesture is started."
  },
  "UI Events.dxtransform": {
    "shortDescription": "Raised when the transform gesture has been performed."
  },
  "UI Events.dxtransformend": {
    "shortDescription": "Raised when the transform gesture has been completed."
  },
  "UI Events.dxtransformstart": {
    "shortDescription": "Raised when the transform gesture has been started."
  },
  "UI Events.dxtranslate": {
    "shortDescription": "Raised when the translate gesture has been performed."
  },
  "UI Events.dxtranslateend": {
    "shortDescription": "Raised when the translate gesture has been completed."
  },
  "UI Events.dxtranslatestart": {
    "shortDescription": "Raised when the translate gesture has been started."
  },
  "ui.dialog": {
    "shortDescription": "An object that serves as a namespace for methods displaying a message in an application/site."
  },
  "ui.dialog.alert(messageHtml,title)": {
    "shortDescription": "Displays an alert dialog with a message and **OK** button."
  },
  "ui.dialog.confirm(messageHtml,title)": {
    "shortDescription": "Creates a confirmation dialog with a message and **Yes** and **No** buttons."
  },
  "ui.dialog.custom(options)": {
    "shortDescription": "Creates a dialog with custom buttons."
  },
  "ui.dxOverlay": {
    "shortDescription": "An object that serves as a namespace for static methods that affect overlay UI components."
  },
  "ui.dxOverlay.baseZIndex(zIndex)": {
    "shortDescription": "Specifies the base z-index for all overlay UI components."
  },
  "ui.hideToasts()": {
    "shortDescription": "Hides all the Toast components in the application."
  },
  "ui.notify(message,stack)": {
    "shortDescription": "Creates a stackable toast message."
  },
  "ui.notify(message,type,displayTime)": {
    "shortDescription": "Creates a toast message."
  },
  "ui.notify(options,stack)": {
    "shortDescription": "Creates a stackable toast message."
  },
  "ui.notify(options,type,displayTime)": {
    "shortDescription": "Creates a toast message."
  },
  "ui.repaintFloatingActionButton()": {
    "shortDescription": "Repaints the [Floating Action Button](https://js.devexpress.com/Demos/WidgetsGallery/Demo/FloatingActionButton/Overview)."
  },
  "ui.setTemplateEngine(options)": {
    "shortDescription": "Sets a custom template engine defined via custom compile and render functions."
  },
  "ui.template": {
    "shortDescription": "",
    "depNote": null
  },
  "ui.themes": {
    "shortDescription": "An object that serves as a namespace for the methods that work with DevExtreme [CSS Themes](/concepts/60%20Themes%20and%20Styles/05%20Predefined%20Themes/00%20Predefined%20Themes.md '/Documentation/Guide/Themes_and_Styles/Predefined_Themes/')."
  },
  "ui.themes.current()": {
    "shortDescription": "Gets the current theme's name."
  },
  "ui.themes.current(themeName)": {
    "shortDescription": "Sets a theme with a specific name."
  },
  "ui.themes.initialized(callback)": {
    "shortDescription": "Specifies a function to be executed after a theme is loaded."
  },
  "ui.themes.ready(callback)": {
    "shortDescription": "Specifies a function to be executed each time a theme is switched."
  },
  "UploadInfo": {
    "shortDescription": "An object that provides information about the file upload session."
  },
  "UploadInfo.bytesUploaded": {
    "shortDescription": "The number of bytes that is uploaded to the server."
  },
  "UploadInfo.chunkBlob": {
    "shortDescription": "The binary content of the uploading chunk."
  },
  "UploadInfo.chunkCount": {
    "shortDescription": "The number of uploaded chunks and chunks that are to be uploaded."
  },
  "UploadInfo.chunkIndex": {
    "shortDescription": "The index of the uploading chunk."
  },
  "UploadInfo.customData": {
    "shortDescription": "Custom information that you can pass during file upload. For instance, you can specify a custom file ID when the first part of a file is being uploaded."
  },
  "User": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "User.avatarAlt": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "User.avatarUrl": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "User.id": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "User.name": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "UserDefinedElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "utils": {
    "shortDescription": "An object that serves as a namespace for utility methods that can be helpful when working with DevExtreme components."
  },
  "Utils": {
    "shortDescription": "This section describes the utility objects that the DevExtreme data layer provides."
  },
  "Utils.applyChanges(data, changes, options)": {
    "shortDescription": "Applies an array of changes to a source data array."
  },
  "Utils.base64_encode(input)": {
    "shortDescription": "Encodes a string or array of bytes in <a href=\"https://en.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64</a>."
  },
  "utils.cancelAnimationFrame(requestID)": {
    "shortDescription": "Cancels an animation frame request scheduled with the [requestAnimationFrame](/api-reference/50%20Common/utils/utils/requestAnimationFrame(callback).md '/Documentation/ApiReference/Common/Utils/utils/#requestAnimationFramecallback') method."
  },
  "Utils.compileGetter(expr)": {
    "shortDescription": "Compiles a getter function from a getter expression."
  },
  "Utils.compileSetter(expr)": {
    "shortDescription": "Compiles a setter function from a setter expression."
  },
  "Utils.errorHandler": {
    "shortDescription": "Specifies the function that is executed when a data layer object throws an error.",
    "depNote": "Use setErrorHandler instead."
  },
  "utils.getTimeZones(date)": {
    "shortDescription": "Gets the list of <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\">IANA</a> time zone objects."
  },
  "utils.initMobileViewport(options)": {
    "shortDescription": "Sets parameters for the **viewport** meta tag. Takes effect for mobile applications only."
  },
  "Utils.keyConverters": {
    "shortDescription": "Contains built-in OData type converters (for String, Int32, Int64, Boolean, Single, Decimal, and [Guid](/api-reference/30%20Data%20Layer/Guid '/Documentation/ApiReference/Data_Layer/Guid/')) and allows you to register a custom type converter."
  },
  "Utils.query(array, queryOptions)": {
    "shortDescription": "Creates a [Query](/api-reference/30%20Data%20Layer/Query '/Documentation/ApiReference/Data_Layer/Query/') instance."
  },
  "Utils.query(url, queryOptions)": {
    "shortDescription": "Creates a [Query](/api-reference/30%20Data%20Layer/Query '/Documentation/ApiReference/Data_Layer/Query/') instance that accesses a remote data service using its URL."
  },
  "utils.requestAnimationFrame(callback)": {
    "shortDescription": "Makes the browser call a function to update animation before the next repaint."
  },
  "Utils.setErrorHandler": {
    "shortDescription": "A method that specifies a function to be executed when a [Data Layer](/concepts/70%20Data%20Binding/5%20Data%20Layer '/Documentation/Guide/Data_Binding/Data_Layer/') component throws an error."
  },
  "validationEngine": {
    "shortDescription": "An object that serves as a namespace for the methods required to perform validation."
  },
  "validationEngine.getGroupConfig()": {
    "shortDescription": "Gets the default validation group."
  },
  "validationEngine.getGroupConfig(group)": {
    "shortDescription": "Gets a validation group with a specific key."
  },
  "validationEngine.registerModelForValidation(model)": {
    "shortDescription": "Registers all the [Validator](/api-reference/10%20UI%20Components/dxValidator '/Documentation/ApiReference/UI_Components/dxValidator/') objects extending fields of the specified ViewModel."
  },
  "validationEngine.resetGroup()": {
    "shortDescription": "Resets the values and validation result of the editors that belong to the default validation group."
  },
  "validationEngine.resetGroup(group)": {
    "shortDescription": "Resets the values and validation result of the editors that belong to the specified validation group."
  },
  "validationEngine.unregisterModelForValidation(model)": {
    "shortDescription": "Unregisters all the [Validator](/api-reference/10%20UI%20Components/dxValidator '/Documentation/ApiReference/UI_Components/dxValidator/') objects extending fields of the specified ViewModel."
  },
  "validationEngine.validateGroup()": {
    "shortDescription": "Validates editors from the default validation group."
  },
  "validationEngine.validateGroup(group)": {
    "shortDescription": "Validates editors from a specific validation group."
  },
  "validationEngine.validateModel(model)": {
    "shortDescription": "Validates a view model."
  },
  "ValidationRule": {
    "shortDescription": "Specifies a validation rule."
  },
  "ValueChangedInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ValueChangedInfo.previousValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "ValueChangedInfo.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "VectorMapLegendItem": {
    "shortDescription": "An object that provides information about a legend item in the [VectorMap](/api-reference/10%20UI%20Components/dxVectorMap '/Documentation/ApiReference/UI_Components/dxVectorMap/') UI component."
  },
  "VectorMapLegendItem.color": {
    "shortDescription": "The color of the legend item's marker."
  },
  "VectorMapLegendItem.end": {
    "shortDescription": "The end value of the [group](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/legends/source/grouping.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/legends/source/#grouping') that the legend item indicates."
  },
  "VectorMapLegendItem.size": {
    "shortDescription": "The diameter of the legend item's marker in pixels."
  },
  "VectorMapLegendItem.start": {
    "shortDescription": "The start value of the [group](/api-reference/10%20UI%20Components/dxVectorMap/1%20Configuration/legends/source/grouping.md '/Documentation/ApiReference/UI_Components/dxVectorMap/Configuration/legends/source/#grouping') that the legend item indicates."
  },
  "VectorMapProjectionConfig.aspectRatio": {
    "shortDescription": "Specifies the projection's ratio of the width to the height."
  },
  "VectorMapProjectionConfig.from": {
    "shortDescription": "Converts coordinates from [x, y] to [lon, lat]."
  },
  "VectorMapProjectionConfig.to": {
    "shortDescription": "Converts coordinates from [lon, lat] to [x, y]."
  },
  "VisualRange": {
    "shortDescription": ""
  },
  "VisualRange.endValue": {
    "shortDescription": "The range's end value."
  },
  "VisualRange.length": {
    "shortDescription": "The range's length."
  },
  "VisualRange.startValue": {
    "shortDescription": "The range's start value."
  },
  "viz": {
    "shortDescription": "An object that serves as a namespace for [DevExtreme Data Visualization Components](/api-reference/10%20UI%20Components '/Documentation/ApiReference/UI_Components/')."
  },
  "viz.currentPalette()": {
    "shortDescription": "Gets the current [palette](/api-reference/10%20UI%20Components/BaseChart/1%20Configuration/palette.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/#palette')'s name."
  },
  "viz.currentPalette(paletteName)": {
    "shortDescription": "Changes the current palette for all data visualization UI components on the page."
  },
  "viz.currentTheme()": {
    "shortDescription": "Gets the current [theme](/api-reference/10%20UI%20Components/BaseWidget/1%20Configuration/theme.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/#theme')'s name."
  },
  "viz.currentTheme(platform, colorScheme)": {
    "shortDescription": "Changes the current theme for all data visualization UI components on the page. The color scheme is defined separately."
  },
  "viz.currentTheme(theme)": {
    "shortDescription": "Changes the current theme for all data visualization UI components on the page."
  },
  "viz.exportFromMarkup(markup, options)": {
    "shortDescription": "Allows you to export UI components using their SVG markup."
  },
  "viz.exportWidgets(widgetInstances)": {
    "shortDescription": "Exports one or several UI components to PNG."
  },
  "viz.exportWidgets(widgetInstances, options)": {
    "shortDescription": "Exports one or several UI components."
  },
  "viz.generateColors(palette, count, options)": {
    "shortDescription": "Returns a subset of palette colors."
  },
  "viz.getMarkup(widgetInstances)": {
    "shortDescription": "Gets the SVG markup of specific UI components for their subsequent export."
  },
  "viz.getPalette(paletteName)": {
    "shortDescription": "Gets the color sets of a predefined or registered palette."
  },
  "viz.getTheme(theme)": {
    "shortDescription": "Gets a predefined or registered [theme](/api-reference/10%20UI%20Components/BaseWidget/1%20Configuration/theme.md '/Documentation/ApiReference/UI_Components/dxChart/Configuration/#theme')'s settings."
  },
  "viz.map": {
    "shortDescription": "An object that serves as a namespace for the [VectorMap](/api-reference/10%20UI%20Components/dxVectorMap '/Documentation/ApiReference/UI_Components/dxVectorMap/') UI component."
  },
  "viz.map.projection": {
    "shortDescription": "A namespace with methods that manipulate map projections."
  },
  "viz.map.projection(data)": {
    "shortDescription": "Creates a new projection."
  },
  "viz.map.projection.add(name, projectionConfig)": {
    "shortDescription": "Adds a new projection to the internal projection storage."
  },
  "viz.map.projection.get(name)": {
    "shortDescription": "Gets a predefined or custom projection from the projection storage."
  },
  "viz.refreshPaths()": {
    "shortDescription": "The method to be called every time the active entry in the browser history is modified without reloading the current page."
  },
  "viz.refreshTheme()": {
    "shortDescription": "Refreshes the current theme and palette in all data visualization UI components on the page."
  },
  "viz.registerGradient(type, options)": {
    "shortDescription": "Registers a new gradient."
  },
  "viz.registerPalette(paletteName, palette)": {
    "shortDescription": "Registers a new palette."
  },
  "viz.registerPattern(options)": {
    "shortDescription": "Registers a new pattern."
  },
  "viz.registerTheme(customTheme, baseTheme)": {
    "shortDescription": "Registers a new theme based on the existing one."
  },
  "VizTimeInterval": {
    "shortDescription": "A class describing various time intervals. Inherited by tick intervals in Chart and RangeSelector."
  },
  "VizTimeInterval.days": {
    "shortDescription": "Specifies the time interval measured in days. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "VizTimeInterval.hours": {
    "shortDescription": "Specifies the time interval measured in hours. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "VizTimeInterval.milliseconds": {
    "shortDescription": "Specifies the time interval measured in milliseconds. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "VizTimeInterval.minutes": {
    "shortDescription": "Specifies the time interval measured in minutes. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "VizTimeInterval.months": {
    "shortDescription": "Specifies the time interval measured in months. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "VizTimeInterval.quarters": {
    "shortDescription": "Specifies the time interval measured in quarters. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "VizTimeInterval.seconds": {
    "shortDescription": "Specifies the time interval measured in seconds. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "VizTimeInterval.weeks": {
    "shortDescription": "Specifies the time interval measured in weeks. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "VizTimeInterval.years": {
    "shortDescription": "Specifies the time interval measured in years. Accepts integer values. Available only for an axis/scale that displays date-time values."
  },
  "Widget": {
    "shortDescription": "The base class for UI components."
  },
  "Widget.contentReady": {
    "shortDescription": "Raised when the UI component is rendered and each time the component is repainted."
  },
  "Widget.focus()": {
    "shortDescription": "Sets focus on the UI component."
  },
  "Widget.focusIn": {
    "shortDescription": ""
  },
  "Widget.focusOut": {
    "shortDescription": ""
  },
  "Widget.registerKeyHandler(key, handler)": {
    "shortDescription": "Registers a handler to be executed when a user presses a specific key."
  },
  "Widget.repaint()": {
    "shortDescription": "Renders the component again without reloading data. Use the method to update the component's markup and appearance dynamically."
  },
  "WidgetOptions.accessKey": {
    "shortDescription": "Specifies the shortcut key that sets focus on the UI component."
  },
  "WidgetOptions.activeStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its visual state as a result of user interaction."
  },
  "WidgetOptions.disabled": {
    "shortDescription": "Specifies whether the UI component responds to user interaction."
  },
  "WidgetOptions.focusStateEnabled": {
    "shortDescription": "Specifies whether the UI component can be focused using keyboard navigation."
  },
  "WidgetOptions.hint": {
    "shortDescription": "Specifies text for a hint that appears when a user pauses on the UI component."
  },
  "WidgetOptions.hoverStateEnabled": {
    "shortDescription": "Specifies whether the UI component changes its state when a user pauses on it."
  },
  "WidgetOptions.onContentReady": {
    "shortDescription": "A function that is executed when the UI component is rendered and each time the component is repainted."
  },
  "WidgetOptions.onFocusIn": {
    "shortDescription": ""
  },
  "WidgetOptions.onFocusOut": {
    "shortDescription": ""
  },
  "WidgetOptions.tabIndex": {
    "shortDescription": "Specifies the number of the element when the Tab key is used for navigating."
  },
  "WidgetOptions.visible": {
    "shortDescription": "Specifies whether the UI component is visible."
  },
  "XmlaStore": {
    "shortDescription": "The **XmlaStore** is a store that provides an interface for accessing an OLAP cube according to the XMLA standard."
  },
  "XmlaStoreOptions.beforeSend": {
    "shortDescription": "Specifies a function that customizes the request before it is sent to the server."
  },
  "XmlaStoreOptions.catalog": {
    "shortDescription": "Specifies the database (or initial catalog) that contains the OLAP cube to use."
  },
  "XmlaStoreOptions.cube": {
    "shortDescription": "Specifies the name of the OLAP cube to use from the [catalog](/api-reference/30%20Data%20Layer/XmlaStore/1%20Configuration/catalog.md '/Documentation/ApiReference/Data_Layer/XmlaStore/Configuration/#catalog')."
  },
  "XmlaStoreOptions.url": {
    "shortDescription": "Specifies the OLAP server's URL."
  },
  "_common_grids_SelectionChangedInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_common_grids_SelectionChangedInfo.currentDeselectedRowKeys": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_common_grids_SelectionChangedInfo.currentSelectedRowKeys": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_common_grids_SelectionChangedInfo.selectedRowKeys": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_common_grids_SelectionChangedInfo.selectedRowsData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_accordion_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_accordion_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_accordion_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_accordion_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_accordion_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_accordion_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_accordion_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_accordion_ItemTitleClickEvent": {
    "shortDescription": "The type of the [itemTitleClick]({basewidgetpath}/Events/#itemTitleClick) event handler's argument."
  },
  "_ui_accordion_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_accordion_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_action_sheet_CancelClickEvent": {
    "shortDescription": "The type of the [cancelClick]({basewidgetpath}/Events/#cancelClick) event handler's argument."
  },
  "_ui_action_sheet_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_action_sheet_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_action_sheet_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_action_sheet_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_action_sheet_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_action_sheet_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_action_sheet_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_action_sheet_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_autocomplete_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_autocomplete_ClosedEvent": {
    "shortDescription": "The type of the [closed]({basewidgetpath}/Events/#closed) event handler's argument."
  },
  "_ui_autocomplete_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_autocomplete_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_autocomplete_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_autocomplete_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_autocomplete_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_autocomplete_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_autocomplete_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_autocomplete_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_autocomplete_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_autocomplete_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_autocomplete_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_autocomplete_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_autocomplete_OpenedEvent": {
    "shortDescription": "The type of the [opened]({basewidgetpath}/Events/#opened) event handler's argument."
  },
  "_ui_autocomplete_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_autocomplete_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_autocomplete_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_autocomplete_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_box_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_box_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_box_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_box_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_button_ClickEvent": {
    "shortDescription": "The type of the [click]({basewidgetpath}/Events/#click) event handler's argument."
  },
  "_ui_button_ClickEvent.validationGroup": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_button_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_button_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_button_group_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_button_group_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_button_group_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_button_group_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_button_group_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_button_group_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_button_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_button_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_calendar_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_calendar_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_calendar_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_calendar_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_chat_DisposingEvent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_chat_InitializedEvent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_chat_MessageEnteredEvent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_chat_MessageEnteredEvent.message": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_chat_OptionChangedEvent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_chat_TypingEndEvent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_chat_TypingEndEvent.user": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_chat_TypingStartEvent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_chat_TypingStartEvent.user": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_check_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_check_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_check_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_check_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_check_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_color_box_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_color_box_ClosedEvent": {
    "shortDescription": "The type of the [closed]({basewidgetpath}/Events/#closed) event handler's argument."
  },
  "_ui_color_box_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_color_box_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_color_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_color_box_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_color_box_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_color_box_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_color_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_color_box_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_color_box_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_color_box_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_color_box_OpenedEvent": {
    "shortDescription": "The type of the [opened]({basewidgetpath}/Events/#opened) event handler's argument."
  },
  "_ui_color_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_color_box_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_color_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_context_menu_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_context_menu_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_context_menu_HiddenEvent": {
    "shortDescription": "The type of the [hidden]({basewidgetpath}/Events/#hidden) event handler's argument."
  },
  "_ui_context_menu_HidingEvent": {
    "shortDescription": "The type of the [hiding]({basewidgetpath}/Events/#hiding) event handler's argument."
  },
  "_ui_context_menu_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_context_menu_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_context_menu_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_context_menu_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_context_menu_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_context_menu_PositioningEvent": {
    "shortDescription": "The type of the [positioning]({basewidgetpath}/Events/#positioning) event handler's argument."
  },
  "_ui_context_menu_PositioningEvent.position": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_context_menu_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_context_menu_ShowingEvent": {
    "shortDescription": "The type of the [showing]({basewidgetpath}/Events/#showing) event handler's argument."
  },
  "_ui_context_menu_ShownEvent": {
    "shortDescription": "The type of the [shown]({basewidgetpath}/Events/#shown) event handler's argument."
  },
  "_ui_data_grid_AdaptiveDetailRowPreparingEvent": {
    "shortDescription": "The type of the [adaptiveDetailRowPreparing]({basewidgetpath}/Events/#adaptiveDetailRowPreparing) event handler's argument."
  },
  "_ui_data_grid_CellClickEvent": {
    "shortDescription": "The type of the [cellClick]({basewidgetpath}/Events/#cellClick) event handler's argument."
  },
  "_ui_data_grid_CellClickEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.displayValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellClickEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent": {
    "shortDescription": "The type of the [cellDblClick]({basewidgetpath}/Events/#cellDblClick) event handler's argument."
  },
  "_ui_data_grid_CellDblClickEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.displayValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellDblClickEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent": {
    "shortDescription": "The type of the [cellHoverChanged]({basewidgetpath}/Events/#cellHoverChanged) event handler's argument."
  },
  "_ui_data_grid_CellHoverChangedEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.displayValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.eventType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellHoverChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent": {
    "shortDescription": "The type of the [cellPrepared]({basewidgetpath}/Events/#cellPrepared) event handler's argument."
  },
  "_ui_data_grid_CellPreparedEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.displayValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.isExpanded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.isNewRow": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.isSelected": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.oldValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_CellPreparedEvent.watch": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ColumnButtonClickEvent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ColumnButtonClickEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ColumnButtonClickEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_data_grid_ContextMenuPreparingEvent": {
    "shortDescription": "The type of the [contextMenuPreparing]({basewidgetpath}/Events/#contextMenuPreparing) event handler's argument."
  },
  "_ui_data_grid_ContextMenuPreparingEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ContextMenuPreparingEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ContextMenuPreparingEvent.items": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ContextMenuPreparingEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ContextMenuPreparingEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ContextMenuPreparingEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ContextMenuPreparingEvent.targetElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_DataErrorOccurredEvent": {
    "shortDescription": "The type of the [dataErrorOccurred]({basewidgetpath}/Events/#dataErrorOccurred) event handler's argument."
  },
  "_ui_data_grid_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_data_grid_EditCanceledEvent": {
    "shortDescription": "The type of the [editCanceled]({basewidgetpath}/Events/#editCanceled) event handler's argument."
  },
  "_ui_data_grid_EditCancelingEvent": {
    "shortDescription": "The type of the [editCanceling]({basewidgetpath}/Events/#editCanceling) event handler's argument."
  },
  "_ui_data_grid_EditingStartEvent": {
    "shortDescription": "The type of the [editingStart]({basewidgetpath}/Events/#editingStart) event handler's argument."
  },
  "_ui_data_grid_EditingStartEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditingStartEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditingStartEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent": {
    "shortDescription": "The type of the [editorPrepared]({basewidgetpath}/Events/#editorPrepared) event handler's argument."
  },
  "_ui_data_grid_EditorPreparedEvent.dataField": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.disabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.editorElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.parentType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.readOnly": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.rtlEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.setValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.updateValueTimeout": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparedEvent.width": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent": {
    "shortDescription": "The type of the [editorPreparing]({basewidgetpath}/Events/#editorPreparing) event handler's argument."
  },
  "_ui_data_grid_EditorPreparingEvent.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.dataField": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.disabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.editorElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.editorName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.editorOptions": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.parentType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.readOnly": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.rtlEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.setValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.updateValueTimeout": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_EditorPreparingEvent.width": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_ui_data_grid_ExportingEvent.fileName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ExportingEvent.format": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_ExportingEvent.selectedRowsOnly": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangedEvent": {
    "shortDescription": "The type of the [focusedCellChanged]({basewidgetpath}/Events/#focusedCellChanged) event handler's argument."
  },
  "_ui_data_grid_FocusedCellChangedEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangedEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangedEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangedEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangingEvent": {
    "shortDescription": "The type of the [focusedCellChanging]({basewidgetpath}/Events/#focusedCellChanging) event handler's argument."
  },
  "_ui_data_grid_FocusedCellChangingEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangingEvent.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangingEvent.isHighlighted": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangingEvent.newColumnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangingEvent.newRowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangingEvent.prevColumnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangingEvent.prevRowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedCellChangingEvent.rows": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedRowChangedEvent": {
    "shortDescription": "The type of the [focusedRowChanged]({basewidgetpath}/Events/#focusedRowChanged) event handler's argument."
  },
  "_ui_data_grid_FocusedRowChangedEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedRowChangedEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedRowChangedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedRowChangingEvent": {
    "shortDescription": "The type of the [focusedRowChanging]({basewidgetpath}/Events/#focusedRowChanging) event handler's argument."
  },
  "_ui_data_grid_FocusedRowChangingEvent.newRowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedRowChangingEvent.prevRowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedRowChangingEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_FocusedRowChangingEvent.rows": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_data_grid_InitNewRowEvent": {
    "shortDescription": "The type of the [initNewRow]({basewidgetpath}/Events/#initNewRow) event handler's argument."
  },
  "_ui_data_grid_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_data_grid_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_data_grid_RowClickEvent": {
    "shortDescription": "The type of the [rowClick]({basewidgetpath}/Events/#rowClick) event handler's argument."
  },
  "_ui_data_grid_RowClickEvent.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.groupIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.handled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.isExpanded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.isNewRow": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.isSelected": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowClickEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowCollapsedEvent": {
    "shortDescription": "The type of the [rowCollapsed]({basewidgetpath}/Events/#rowCollapsed) event handler's argument."
  },
  "_ui_data_grid_RowCollapsingEvent": {
    "shortDescription": "The type of the [rowCollapsing]({basewidgetpath}/Events/#rowCollapsing) event handler's argument."
  },
  "_ui_data_grid_RowDblClickEvent": {
    "shortDescription": "The type of the [rowDblClick]({basewidgetpath}/Events/#rowDblClick) event handler's argument."
  },
  "_ui_data_grid_RowDblClickEvent.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.groupIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.isExpanded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.isNewRow": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.isSelected": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowDblClickEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowExpandedEvent": {
    "shortDescription": "The type of the [rowExpanded]({basewidgetpath}/Events/#rowExpanded) event handler's argument."
  },
  "_ui_data_grid_RowExpandingEvent": {
    "shortDescription": "The type of the [rowExpanding]({basewidgetpath}/Events/#rowExpanding) event handler's argument."
  },
  "_ui_data_grid_RowInsertedEvent": {
    "shortDescription": "The type of the [rowInserted]({basewidgetpath}/Events/#rowInserted) event handler's argument."
  },
  "_ui_data_grid_RowInsertingEvent": {
    "shortDescription": "The type of the [rowInserting]({basewidgetpath}/Events/#rowInserting) event handler's argument."
  },
  "_ui_data_grid_RowPreparedEvent": {
    "shortDescription": "The type of the [rowPrepared]({basewidgetpath}/Events/#rowPrepared) event handler's argument."
  },
  "_ui_data_grid_RowPreparedEvent.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.groupIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.isExpanded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.isNewRow": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.isSelected": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowPreparedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_data_grid_RowRemovedEvent": {
    "shortDescription": "The type of the [rowRemoved]({basewidgetpath}/Events/#rowRemoved) event handler's argument."
  },
  "_ui_data_grid_RowRemovingEvent": {
    "shortDescription": "The type of the [rowRemoving]({basewidgetpath}/Events/#rowRemoving) event handler's argument."
  },
  "_ui_data_grid_RowUpdatedEvent": {
    "shortDescription": "The type of the [rowUpdated]({basewidgetpath}/Events/#rowUpdated) event handler's argument."
  },
  "_ui_data_grid_RowUpdatingEvent": {
    "shortDescription": "The type of the [rowUpdating]({basewidgetpath}/Events/#rowUpdating) event handler's argument."
  },
  "_ui_data_grid_RowValidatingEvent": {
    "shortDescription": "The type of the [rowValidating]({basewidgetpath}/Events/#rowValidating) event handler's argument."
  },
  "_ui_data_grid_SavedEvent": {
    "shortDescription": "The type of the [saved]({basewidgetpath}/Events/#saved) event handler's argument."
  },
  "_ui_data_grid_SavingEvent": {
    "shortDescription": "The type of the [saving]({basewidgetpath}/Events/#saving) event handler's argument."
  },
  "_ui_data_grid_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_data_grid_ToolbarPreparingEvent": {
    "shortDescription": "The type of the [toolbarPreparing]({basewidgetpath}/Events/#toolbarPreparing) event handler's argument."
  },
  "_ui_date_box_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_date_box_ClosedEvent": {
    "shortDescription": "The type of the [closed]({basewidgetpath}/Events/#closed) event handler's argument."
  },
  "_ui_date_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_date_box_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_date_box_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_date_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_date_box_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_date_box_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_date_box_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_date_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_date_box_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_date_box_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_date_box_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_date_box_OpenedEvent": {
    "shortDescription": "The type of the [opened]({basewidgetpath}/Events/#opened) event handler's argument."
  },
  "_ui_date_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_date_box_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_date_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_date_range_box_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_date_range_box_ClosedEvent": {
    "shortDescription": "The type of the [closed]({basewidgetpath}/Events/#closed) event handler's argument."
  },
  "_ui_date_range_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_date_range_box_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_date_range_box_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_date_range_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_date_range_box_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_date_range_box_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_date_range_box_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_date_range_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_date_range_box_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_date_range_box_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_date_range_box_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_date_range_box_OpenedEvent": {
    "shortDescription": "The type of the [opened]({basewidgetpath}/Events/#opened) event handler's argument."
  },
  "_ui_date_range_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_date_range_box_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_date_range_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_defer_rendering_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_defer_rendering_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_defer_rendering_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_defer_rendering_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_defer_rendering_RenderedEvent": {
    "shortDescription": "The type of the [rendered]({basewidgetpath}/Events/#rendered) event handler's argument."
  },
  "_ui_defer_rendering_ShownEvent": {
    "shortDescription": "The type of the [shown]({basewidgetpath}/Events/#shown) event handler's argument."
  },
  "_ui_diagram_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_diagram_CustomCommandEvent": {
    "shortDescription": "The type of the [customCommand]({basewidgetpath}/Events/#customCommand) event handler's argument."
  },
  "_ui_diagram_CustomCommandEvent.component": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_CustomCommandEvent.element": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_CustomCommandEvent.name": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_diagram_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_diagram_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_diagram_ItemClickEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_ItemDblClickEvent": {
    "shortDescription": "The type of the [itemDblClick]({basewidgetpath}/Events/#itemDblClick) event handler's argument."
  },
  "_ui_diagram_ItemDblClickEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_diagram_RequestEditOperationEvent": {
    "shortDescription": "The type of the [requestEditOperation]({basewidgetpath}/Events/#requestEditOperation) event handler's argument."
  },
  "_ui_diagram_RequestEditOperationEvent.allowed": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_RequestEditOperationEvent.args": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_RequestEditOperationEvent.operation": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_RequestEditOperationEvent.reason": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_RequestLayoutUpdateEvent": {
    "shortDescription": "The type of the [requestLayoutUpdate]({basewidgetpath}/Events/#requestLayoutUpdate) event handler's argument."
  },
  "_ui_diagram_RequestLayoutUpdateEvent.allowed": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_RequestLayoutUpdateEvent.changes": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_diagram_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_diagram_SelectionChangedEvent.items": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_draggable_DragEndEvent": {
    "shortDescription": "The type of the [dragEnd]({basewidgetpath}/Events/#dragEnd) event handler's argument."
  },
  "_ui_draggable_DragEndEvent.fromComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragEndEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragEndEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragEndEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragEndEvent.toComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragEndEvent.toData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragMoveEvent": {
    "shortDescription": "The type of the [dragMove]({basewidgetpath}/Events/#dragMove) event handler's argument."
  },
  "_ui_draggable_DragMoveEvent.fromComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragMoveEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragMoveEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragMoveEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragMoveEvent.toComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragMoveEvent.toData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragStartEvent": {
    "shortDescription": "The type of the [dragStart]({basewidgetpath}/Events/#dragStart) event handler's argument."
  },
  "_ui_draggable_DragStartEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragStartEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_DragStartEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_draggable_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_draggable_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_drawer_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_drawer_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_drawer_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_drop_down_box_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_drop_down_box_ClosedEvent": {
    "shortDescription": "The type of the [closed]({basewidgetpath}/Events/#closed) event handler's argument."
  },
  "_ui_drop_down_box_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_drop_down_box_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_drop_down_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_drop_down_box_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_drop_down_box_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_drop_down_box_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_drop_down_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_drop_down_box_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_drop_down_box_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_drop_down_box_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_drop_down_box_OpenedEvent": {
    "shortDescription": "The type of the [opened]({basewidgetpath}/Events/#opened) event handler's argument."
  },
  "_ui_drop_down_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_drop_down_box_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_drop_down_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_drop_down_button_ButtonClickEvent": {
    "shortDescription": "The type of the [buttonClick]({basewidgetpath}/Events/#buttonClick) event handler's argument."
  },
  "_ui_drop_down_button_ButtonClickEvent.selectedItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_drop_down_button_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_drop_down_button_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_drop_down_button_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_drop_down_button_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_drop_down_button_ItemClickEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_drop_down_button_ItemClickEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_drop_down_button_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_drop_down_button_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_drop_down_button_SelectionChangedEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_drop_down_button_SelectionChangedEvent.previousItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_drop_down_editor_ui_drop_down_list_SelectionChangedInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_drop_down_editor_ui_drop_down_list_SelectionChangedInfo.selectedItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_file_manager_ContextMenuItemClickEvent": {
    "shortDescription": "The type of the [contextMenuItemClick]({basewidgetpath}/Events/#contextMenuItemClick) event handler's argument."
  },
  "_ui_file_manager_ContextMenuItemClickEvent.fileSystemItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ContextMenuItemClickEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ContextMenuItemClickEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ContextMenuItemClickEvent.itemIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ContextMenuItemClickEvent.viewArea": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ContextMenuShowingEvent": {
    "shortDescription": "The type of the [contextMenuShowing]({basewidgetpath}/Events/#contextMenuShowing) event handler's argument."
  },
  "_ui_file_manager_ContextMenuShowingEvent.fileSystemItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ContextMenuShowingEvent.targetElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ContextMenuShowingEvent.viewArea": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_CurrentDirectoryChangedEvent": {
    "shortDescription": "The type of the [currentDirectoryChanged]({basewidgetpath}/Events/#currentDirectoryChanged) event handler's argument."
  },
  "_ui_file_manager_CurrentDirectoryChangedEvent.directory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_DirectoryCreatedEvent": {
    "shortDescription": "The type of the [directoryCreated]({basewidgetpath}/Events/#directoryCreated) event handler's argument."
  },
  "_ui_file_manager_DirectoryCreatedEvent.name": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_DirectoryCreatedEvent.parentDirectory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_DirectoryCreatingEvent": {
    "shortDescription": "The type of the [directoryCreating]({basewidgetpath}/Events/#directoryCreating) event handler's argument."
  },
  "_ui_file_manager_DirectoryCreatingEvent.name": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_DirectoryCreatingEvent.parentDirectory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_file_manager_ErrorOccurredEvent": {
    "shortDescription": "The type of the [errorOccurred]({basewidgetpath}/Events/#errorOccurred) event handler's argument."
  },
  "_ui_file_manager_ErrorOccurredEvent.errorCode": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ErrorOccurredEvent.errorText": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ErrorOccurredEvent.fileSystemItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_FileUploadedEvent": {
    "shortDescription": "The type of the [fileUploaded]({basewidgetpath}/Events/#fileUploaded) event handler's argument."
  },
  "_ui_file_manager_FileUploadedEvent.fileData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_FileUploadedEvent.parentDirectory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_FileUploadingEvent": {
    "shortDescription": "The type of the [fileUploading]({basewidgetpath}/Events/#fileUploading) event handler's argument."
  },
  "_ui_file_manager_FileUploadingEvent.destinationDirectory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_FileUploadingEvent.fileData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_FocusedItemChangedEvent": {
    "shortDescription": "The type of the [focusedItemChanged]({basewidgetpath}/Events/#focusedItemChanged) event handler's argument."
  },
  "_ui_file_manager_FocusedItemChangedEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_FocusedItemChangedEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_file_manager_ItemCopiedEvent": {
    "shortDescription": "The type of the [itemCopied]({basewidgetpath}/Events/#itemCopied) event handler's argument."
  },
  "_ui_file_manager_ItemCopiedEvent.itemName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemCopiedEvent.itemPath": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemCopiedEvent.parentDirectory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemCopiedEvent.sourceItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemCopyingEvent": {
    "shortDescription": "The type of the [itemCopying]({basewidgetpath}/Events/#itemCopying) event handler's argument."
  },
  "_ui_file_manager_ItemCopyingEvent.destinationDirectory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemCopyingEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemDeletedEvent": {
    "shortDescription": "The type of the [itemDeleted]({basewidgetpath}/Events/#itemDeleted) event handler's argument."
  },
  "_ui_file_manager_ItemDeletedEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemDeletingEvent": {
    "shortDescription": "The type of the [itemDeleting]({basewidgetpath}/Events/#itemDeleting) event handler's argument."
  },
  "_ui_file_manager_ItemDeletingEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemDownloadingEvent": {
    "shortDescription": "The type of the [itemDownloading]({basewidgetpath}/Events/#itemDownloading) event handler's argument."
  },
  "_ui_file_manager_ItemDownloadingEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemMovedEvent": {
    "shortDescription": "The type of the [itemMoved]({basewidgetpath}/Events/#itemMoved) event handler's argument."
  },
  "_ui_file_manager_ItemMovedEvent.itemName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemMovedEvent.itemPath": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemMovedEvent.parentDirectory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemMovedEvent.sourceItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemMovingEvent": {
    "shortDescription": "The type of the [itemMoving]({basewidgetpath}/Events/#itemMoving) event handler's argument."
  },
  "_ui_file_manager_ItemMovingEvent.destinationDirectory": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemMovingEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemRenamedEvent": {
    "shortDescription": "The type of the [itemRenamed]({basewidgetpath}/Events/#itemRenamed) event handler's argument."
  },
  "_ui_file_manager_ItemRenamedEvent.itemName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemRenamedEvent.sourceItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemRenamingEvent": {
    "shortDescription": "The type of the [itemRenaming]({basewidgetpath}/Events/#itemRenaming) event handler's argument."
  },
  "_ui_file_manager_ItemRenamingEvent.item": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ItemRenamingEvent.newName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_file_manager_SelectedFileOpenedEvent": {
    "shortDescription": "The type of the [selectedFileOpened]({basewidgetpath}/Events/#selectedFileOpened) event handler's argument."
  },
  "_ui_file_manager_SelectedFileOpenedEvent.file": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_file_manager_SelectionChangedEvent.currentDeselectedItemKeys": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_SelectionChangedEvent.currentSelectedItemKeys": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_SelectionChangedEvent.selectedItemKeys": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_SelectionChangedEvent.selectedItems": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ToolbarItemClickEvent": {
    "shortDescription": "The type of the [toolbarItemClick]({basewidgetpath}/Events/#toolbarItemClick) event handler's argument."
  },
  "_ui_file_manager_ToolbarItemClickEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ToolbarItemClickEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_manager_ToolbarItemClickEvent.itemIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_BeforeSendEvent": {
    "shortDescription": "The type of the [beforeSend]({basewidgetpath}/Events/#beforeSend) event handler's argument."
  },
  "_ui_file_uploader_BeforeSendEvent.file": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_BeforeSendEvent.request": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_BeforeSendEvent.uploadInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_file_uploader_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_file_uploader_DropZoneEnterEvent": {
    "shortDescription": "The type of the [dropZoneEnter]({basewidgetpath}/Events/#dropZoneEnter) event handler's argument."
  },
  "_ui_file_uploader_DropZoneEnterEvent.dropZoneElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_DropZoneLeaveEvent": {
    "shortDescription": "The type of the [dropZoneLeave]({basewidgetpath}/Events/#dropZoneLeave) event handler's argument."
  },
  "_ui_file_uploader_DropZoneLeaveEvent.dropZoneElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_FilesUploadedEvent": {
    "shortDescription": "The type of the [filesUploaded]({basewidgetpath}/Events/#filesUploaded) event handler's argument."
  },
  "_ui_file_uploader_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_file_uploader_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_file_uploader_ProgressEvent": {
    "shortDescription": "The type of the [progress]({basewidgetpath}/Events/#progress) event handler's argument."
  },
  "_ui_file_uploader_ProgressEvent.bytesLoaded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_ProgressEvent.bytesTotal": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_ProgressEvent.file": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_ProgressEvent.request": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_ProgressEvent.segmentSize": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadAbortedEvent": {
    "shortDescription": "The type of the [uploadAborted]({basewidgetpath}/Events/#uploadAborted) event handler's argument."
  },
  "_ui_file_uploader_UploadAbortedEvent.file": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadAbortedEvent.message": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadAbortedEvent.request": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadedEvent": {
    "shortDescription": "The type of the [uploaded]({basewidgetpath}/Events/#uploaded) event handler's argument."
  },
  "_ui_file_uploader_UploadedEvent.file": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadedEvent.message": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadedEvent.request": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadErrorEvent": {
    "shortDescription": "The type of the [uploadError]({basewidgetpath}/Events/#uploadError) event handler's argument."
  },
  "_ui_file_uploader_UploadErrorEvent.error": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadErrorEvent.file": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadErrorEvent.message": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadErrorEvent.request": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadStartedEvent": {
    "shortDescription": "The type of the [uploadStarted]({basewidgetpath}/Events/#uploadStarted) event handler's argument."
  },
  "_ui_file_uploader_UploadStartedEvent.file": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_UploadStartedEvent.request": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_file_uploader_ValueChangedEvent.previousValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_file_uploader_ValueChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_filter_builder_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_filter_builder_EditorPreparedEvent": {
    "shortDescription": "The type of the [editorPrepared]({basewidgetpath}/Events/#editorPrepared) event handler's argument."
  },
  "_ui_filter_builder_EditorPreparedEvent.dataField": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.disabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.editorElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.editorName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.filterOperation": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.readOnly": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.rtlEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.setValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.updateValueTimeout": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparedEvent.width": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent": {
    "shortDescription": "The type of the [editorPreparing]({basewidgetpath}/Events/#editorPreparing) event handler's argument."
  },
  "_ui_filter_builder_EditorPreparingEvent.dataField": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.disabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.editorElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.editorName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.editorOptions": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.filterOperation": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.readOnly": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.rtlEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.setValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.updateValueTimeout": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_EditorPreparingEvent.width": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_filter_builder_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_filter_builder_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_filter_builder_ValueChangedEvent.previousValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_filter_builder_ValueChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_form_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_form_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_form_EditorEnterKeyEvent": {
    "shortDescription": "The type of the [editorEnterKey]({basewidgetpath}/Events/#editorEnterKey) event handler's argument."
  },
  "_ui_form_EditorEnterKeyEvent.dataField": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_form_FieldDataChangedEvent": {
    "shortDescription": "The type of the [fieldDataChanged]({basewidgetpath}/Events/#fieldDataChanged) event handler's argument."
  },
  "_ui_form_FieldDataChangedEvent.dataField": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_form_FieldDataChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_form_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_form_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_gallery_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_gallery_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_gallery_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_gallery_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_gallery_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_gallery_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_gallery_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_gallery_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_gallery_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_gantt_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_gantt_ContextMenuPreparingEvent": {
    "shortDescription": "The type of the [contextMenuPreparing]({basewidgetpath}/Events/#contextMenuPreparing) event handler's argument."
  },
  "_ui_gantt_ContextMenuPreparingEvent.component": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ContextMenuPreparingEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ContextMenuPreparingEvent.element": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ContextMenuPreparingEvent.event": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ContextMenuPreparingEvent.items": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ContextMenuPreparingEvent.targetKey": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ContextMenuPreparingEvent.targetType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_CustomCommandEvent": {
    "shortDescription": "The type of the [customCommand]({basewidgetpath}/Events/#customCommand) event handler's argument."
  },
  "_ui_gantt_CustomCommandEvent.component": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_CustomCommandEvent.element": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_CustomCommandEvent.name": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_DependencyDeletedEvent": {
    "shortDescription": "The type of the [dependencyDeleted]({basewidgetpath}/Events/#dependencyDeleted) event handler's argument."
  },
  "_ui_gantt_DependencyDeletedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_DependencyDeletedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_DependencyDeletingEvent": {
    "shortDescription": "The type of the [dependencyDeleting]({basewidgetpath}/Events/#dependencyDeleting) event handler's argument."
  },
  "_ui_gantt_DependencyDeletingEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_DependencyDeletingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_DependencyInsertedEvent": {
    "shortDescription": "The type of the [dependencyInserted]({basewidgetpath}/Events/#dependencyInserted) event handler's argument."
  },
  "_ui_gantt_DependencyInsertedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_DependencyInsertedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_DependencyInsertingEvent": {
    "shortDescription": "The type of the [dependencyInserting]({basewidgetpath}/Events/#dependencyInserting) event handler's argument."
  },
  "_ui_gantt_DependencyInsertingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_gantt_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_gantt_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_gantt_ResourceAssignedEvent": {
    "shortDescription": "The type of the [resourceAssigned]({basewidgetpath}/Events/#resourceAssigned) event handler's argument."
  },
  "_ui_gantt_ResourceAssignedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceAssignedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceAssigningEvent": {
    "shortDescription": "The type of the [resourceAssigning]({basewidgetpath}/Events/#resourceAssigning) event handler's argument."
  },
  "_ui_gantt_ResourceAssigningEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceDeletedEvent": {
    "shortDescription": "The type of the [resourceDeleted]({basewidgetpath}/Events/#resourceDeleted) event handler's argument."
  },
  "_ui_gantt_ResourceDeletedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceDeletedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceDeletingEvent": {
    "shortDescription": "The type of the [resourceDeleting]({basewidgetpath}/Events/#resourceDeleting) event handler's argument."
  },
  "_ui_gantt_ResourceDeletingEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceDeletingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceInsertedEvent": {
    "shortDescription": "The type of the [resourceInserted]({basewidgetpath}/Events/#resourceInserted) event handler's argument."
  },
  "_ui_gantt_ResourceInsertedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceInsertedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceInsertingEvent": {
    "shortDescription": "The type of the [resourceInserting]({basewidgetpath}/Events/#resourceInserting) event handler's argument."
  },
  "_ui_gantt_ResourceInsertingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceManagerDialogShowingEvent": {
    "shortDescription": "The type of the [resourceManagerDialogShowing]({basewidgetpath}/Events/#resourceManagerDialogShowing) event handler's argument."
  },
  "_ui_gantt_ResourceManagerDialogShowingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceUnassignedEvent": {
    "shortDescription": "The type of the [resourceUnassigned]({basewidgetpath}/Events/#resourceUnassigned) event handler's argument."
  },
  "_ui_gantt_ResourceUnassignedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceUnassignedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceUnassigningEvent": {
    "shortDescription": "The type of the [resourceUnassigning]({basewidgetpath}/Events/#resourceUnassigning) event handler's argument."
  },
  "_ui_gantt_ResourceUnassigningEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ResourceUnassigningEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ScaleCellPreparedEvent": {
    "shortDescription": "The type of the [scaleCellPrepared]({basewidgetpath}/Events/#scaleCellPrepared) event handler's argument."
  },
  "_ui_gantt_ScaleCellPreparedEvent.endDate": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ScaleCellPreparedEvent.scaleElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ScaleCellPreparedEvent.scaleIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ScaleCellPreparedEvent.scaleType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ScaleCellPreparedEvent.separatorElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_ScaleCellPreparedEvent.startDate": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_gantt_SelectionChangedEvent.selectedRowKey": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskClickEvent": {
    "shortDescription": "The type of the [taskClick]({basewidgetpath}/Events/#taskClick) event handler's argument."
  },
  "_ui_gantt_TaskClickEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskClickEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskDblClickEvent": {
    "shortDescription": "The type of the [taskDblClick]({basewidgetpath}/Events/#taskDblClick) event handler's argument."
  },
  "_ui_gantt_TaskDblClickEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskDblClickEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskDeletedEvent": {
    "shortDescription": "The type of the [taskDeleted]({basewidgetpath}/Events/#taskDeleted) event handler's argument."
  },
  "_ui_gantt_TaskDeletedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskDeletedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskDeletingEvent": {
    "shortDescription": "The type of the [taskDeleting]({basewidgetpath}/Events/#taskDeleting) event handler's argument."
  },
  "_ui_gantt_TaskDeletingEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskDeletingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskEditDialogShowingEvent": {
    "shortDescription": "The type of the [taskEditDialogShowing]({basewidgetpath}/Events/#taskEditDialogShowing) event handler's argument."
  },
  "_ui_gantt_TaskEditDialogShowingEvent.hiddenFields": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskEditDialogShowingEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskEditDialogShowingEvent.readOnlyFields": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskEditDialogShowingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskInsertedEvent": {
    "shortDescription": "The type of the [taskInserted]({basewidgetpath}/Events/#taskInserted) event handler's argument."
  },
  "_ui_gantt_TaskInsertedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskInsertedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskInsertingEvent": {
    "shortDescription": "The type of the [taskInserting]({basewidgetpath}/Events/#taskInserting) event handler's argument."
  },
  "_ui_gantt_TaskInsertingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskMovingEvent": {
    "shortDescription": "The type of the [taskMoving]({basewidgetpath}/Events/#taskMoving) event handler's argument."
  },
  "_ui_gantt_TaskMovingEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskMovingEvent.newValues": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskMovingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskUpdatedEvent": {
    "shortDescription": "The type of the [taskUpdated]({basewidgetpath}/Events/#taskUpdated) event handler's argument."
  },
  "_ui_gantt_TaskUpdatedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskUpdatedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskUpdatingEvent": {
    "shortDescription": "The type of the [taskUpdating]({basewidgetpath}/Events/#taskUpdating) event handler's argument."
  },
  "_ui_gantt_TaskUpdatingEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskUpdatingEvent.newValues": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_gantt_TaskUpdatingEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_html_editor_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_html_editor_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_html_editor_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_html_editor_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_html_editor_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_html_editor_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_html_editor_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_list_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_list_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_list_GroupRenderedEvent": {
    "shortDescription": "The type of the [groupRendered]({basewidgetpath}/Events/#groupRendered) event handler's argument."
  },
  "_ui_list_GroupRenderedEvent.groupData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_list_GroupRenderedEvent.groupElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_list_GroupRenderedEvent.groupIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_list_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_list_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_list_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_list_ItemDeletedEvent": {
    "shortDescription": "The type of the [itemDeleted]({basewidgetpath}/Events/#itemDeleted) event handler's argument."
  },
  "_ui_list_ItemDeletingEvent": {
    "shortDescription": "The type of the [itemDeleting]({basewidgetpath}/Events/#itemDeleting) event handler's argument."
  },
  "_ui_list_ItemDeletingEvent.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_list_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_list_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_list_ItemReorderedEvent": {
    "shortDescription": "The type of the [itemReordered]({basewidgetpath}/Events/#itemReordered) event handler's argument."
  },
  "_ui_list_ItemReorderedEvent.fromIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_list_ItemReorderedEvent.toIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_list_ItemSwipeEvent": {
    "shortDescription": "The type of the [itemSwipe]({basewidgetpath}/Events/#itemSwipe) event handler's argument."
  },
  "_ui_list_ItemSwipeEvent.direction": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_list_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_list_PageLoadingEvent": {
    "shortDescription": "The type of the [pageLoading]({basewidgetpath}/Events/#pageLoading) event handler's argument."
  },
  "_ui_list_PullRefreshEvent": {
    "shortDescription": "The type of the [pullRefresh]({basewidgetpath}/Events/#pullRefresh) event handler's argument."
  },
  "_ui_list_ScrollEvent": {
    "shortDescription": "The type of the [scroll]({basewidgetpath}/Events/#scroll) event handler's argument."
  },
  "_ui_list_SelectAllValueChangedEvent": {
    "shortDescription": "The type of the [selectAllValueChanged]({basewidgetpath}/Events/#selectAllValueChanged) event handler's argument."
  },
  "_ui_list_SelectAllValueChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_list_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_list_SelectionChangingEvent": {
    "shortDescription": "The type of the [selectionChanging]({basewidgetpath}/Events/#selectionChanging) event handler's argument."
  },
  "_ui_load_indicator_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_load_indicator_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_load_indicator_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_load_indicator_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_load_panel_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_load_panel_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_load_panel_HiddenEvent": {
    "shortDescription": "The type of the [hidden]({basewidgetpath}/Events/#hidden) event handler's argument."
  },
  "_ui_load_panel_HidingEvent": {
    "shortDescription": "The type of the [hiding]({basewidgetpath}/Events/#hiding) event handler's argument."
  },
  "_ui_load_panel_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_load_panel_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_load_panel_ShowingEvent": {
    "shortDescription": "The type of the [showing]({basewidgetpath}/Events/#showing) event handler's argument."
  },
  "_ui_load_panel_ShownEvent": {
    "shortDescription": "The type of the [shown]({basewidgetpath}/Events/#shown) event handler's argument."
  },
  "_ui_lookup_ClosedEvent": {
    "shortDescription": "The type of the [closed]({basewidgetpath}/Events/#closed) event handler's argument."
  },
  "_ui_lookup_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_lookup_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_lookup_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_lookup_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_lookup_OpenedEvent": {
    "shortDescription": "The type of the [opened]({basewidgetpath}/Events/#opened) event handler's argument."
  },
  "_ui_lookup_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_lookup_PageLoadingEvent": {
    "shortDescription": "The type of the [pageLoading]({basewidgetpath}/Events/#pageLoading) event handler's argument."
  },
  "_ui_lookup_PullRefreshEvent": {
    "shortDescription": "The type of the [pullRefresh]({basewidgetpath}/Events/#pullRefresh) event handler's argument."
  },
  "_ui_lookup_ScrollEvent": {
    "shortDescription": "The type of the [scroll]({basewidgetpath}/Events/#scroll) event handler's argument."
  },
  "_ui_lookup_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_lookup_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_map_ClickEvent": {
    "shortDescription": "The type of the [click]({basewidgetpath}/Events/#click) event handler's argument."
  },
  "_ui_map_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_map_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_map_MarkerAddedEvent": {
    "shortDescription": "The type of the [markerAdded]({basewidgetpath}/Events/#markerAdded) event handler's argument."
  },
  "_ui_map_MarkerAddedEvent.options": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_map_MarkerAddedEvent.originalMarker": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_map_MarkerRemovedEvent": {
    "shortDescription": "The type of the [markerRemoved]({basewidgetpath}/Events/#markerRemoved) event handler's argument."
  },
  "_ui_map_MarkerRemovedEvent.options": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_map_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_map_ReadyEvent": {
    "shortDescription": "The type of the [ready]({basewidgetpath}/Events/#ready) event handler's argument."
  },
  "_ui_map_ReadyEvent.originalMap": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_map_RouteAddedEvent": {
    "shortDescription": "The type of the [routeAdded]({basewidgetpath}/Events/#routeAdded) event handler's argument."
  },
  "_ui_map_RouteAddedEvent.options": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_map_RouteAddedEvent.originalRoute": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_map_RouteRemovedEvent": {
    "shortDescription": "The type of the [routeRemoved]({basewidgetpath}/Events/#routeRemoved) event handler's argument."
  },
  "_ui_map_RouteRemovedEvent.options": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_menu_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_menu_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_menu_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_menu_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_menu_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_menu_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_menu_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_menu_SubmenuHiddenEvent": {
    "shortDescription": "The type of the [submenuHidden]({basewidgetpath}/Events/#submenuHidden) event handler's argument."
  },
  "_ui_menu_SubmenuHiddenEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuHiddenEvent.rootItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuHiddenEvent.submenuContainer": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuHidingEvent": {
    "shortDescription": "The type of the [submenuHiding]({basewidgetpath}/Events/#submenuHiding) event handler's argument."
  },
  "_ui_menu_SubmenuHidingEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuHidingEvent.rootItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuHidingEvent.submenuContainer": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuShowingEvent": {
    "shortDescription": "The type of the [submenuShowing]({basewidgetpath}/Events/#submenuShowing) event handler's argument."
  },
  "_ui_menu_SubmenuShowingEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuShowingEvent.rootItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuShowingEvent.submenuContainer": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuShownEvent": {
    "shortDescription": "The type of the [submenuShown]({basewidgetpath}/Events/#submenuShown) event handler's argument."
  },
  "_ui_menu_SubmenuShownEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuShownEvent.rootItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_menu_SubmenuShownEvent.submenuContainer": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_multi_view_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_multi_view_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_multi_view_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_multi_view_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_multi_view_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_multi_view_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_multi_view_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_multi_view_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_multi_view_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_number_box_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_number_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_number_box_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_number_box_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_number_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_number_box_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_number_box_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_number_box_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_number_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_number_box_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_number_box_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_number_box_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_number_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_number_box_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_number_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_pivot_grid_CellClickEvent": {
    "shortDescription": "The type of the [cellClick]({basewidgetpath}/Events/#cellClick) event handler's argument."
  },
  "_ui_pivot_grid_CellClickEvent.area": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellClickEvent.cell": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellClickEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellClickEvent.columnFields": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellClickEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellClickEvent.dataFields": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellClickEvent.rowFields": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellClickEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellPreparedEvent": {
    "shortDescription": "The type of the [cellPrepared]({basewidgetpath}/Events/#cellPrepared) event handler's argument."
  },
  "_ui_pivot_grid_CellPreparedEvent.area": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellPreparedEvent.cell": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellPreparedEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellPreparedEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_CellPreparedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent": {
    "shortDescription": "The type of the [contextMenuPreparing]({basewidgetpath}/Events/#contextMenuPreparing) event handler's argument."
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.area": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.cell": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.columnFields": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.dataFields": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.field": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.items": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.rowFields": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_ContextMenuPreparingEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_pivot_grid_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_ui_pivot_grid_ExportingEvent.fileName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_field_chooser_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent": {
    "shortDescription": "The type of the [contextMenuPreparing]({basewidgetpath}/Events/#contextMenuPreparing) event handler's argument."
  },
  "_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent.area": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent.event": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent.field": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent.items": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_pivot_grid_field_chooser_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_pivot_grid_field_chooser_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_pivot_grid_field_chooser_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_pivot_grid_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_pivot_grid_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_popover_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_popover_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_popover_HiddenEvent": {
    "shortDescription": "The type of the [hidden]({basewidgetpath}/Events/#hidden) event handler's argument."
  },
  "_ui_popover_HidingEvent": {
    "shortDescription": "The type of the [hiding]({basewidgetpath}/Events/#hiding) event handler's argument."
  },
  "_ui_popover_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_popover_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_popover_ShowingEvent": {
    "shortDescription": "The type of the [showing]({basewidgetpath}/Events/#showing) event handler's argument."
  },
  "_ui_popover_ShownEvent": {
    "shortDescription": "The type of the [shown]({basewidgetpath}/Events/#shown) event handler's argument."
  },
  "_ui_popover_TitleRenderedEvent": {
    "shortDescription": "The type of the [titleRendered]({basewidgetpath}/Events/#titleRendered) event handler's argument."
  },
  "_ui_progress_bar_CompleteEvent": {
    "shortDescription": "The type of the [complete]({basewidgetpath}/Events/#complete) event handler's argument."
  },
  "_ui_progress_bar_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_progress_bar_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_progress_bar_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_progress_bar_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_progress_bar_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_radio_group_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_radio_group_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_radio_group_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_radio_group_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_radio_group_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_range_slider_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_range_slider_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_range_slider_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_range_slider_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_range_slider_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_range_slider_ValueChangedEvent.end": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_range_slider_ValueChangedEvent.start": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_range_slider_ValueChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_recurrence_editor_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_recurrence_editor_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_recurrence_editor_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_recurrence_editor_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_recurrence_editor_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_resizable_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_resizable_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_resizable_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_resizable_ResizeEndEvent": {
    "shortDescription": "The type of the [resizeEnd]({basewidgetpath}/Events/#resizeEnd) event handler's argument."
  },
  "_ui_resizable_ResizeEvent": {
    "shortDescription": "The type of the [resize]({basewidgetpath}/Events/#resize) event handler's argument."
  },
  "_ui_resizable_ResizeStartEvent": {
    "shortDescription": "The type of the [resizeStart]({basewidgetpath}/Events/#resizeStart) event handler's argument."
  },
  "_ui_responsive_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_responsive_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_responsive_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_responsive_box_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_responsive_box_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_responsive_box_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_responsive_box_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_responsive_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_scheduler_AppointmentAddedEvent": {
    "shortDescription": "The type of the [appointmentAdded]({basewidgetpath}/Events/#appointmentAdded) event handler's argument."
  },
  "_ui_scheduler_AppointmentAddedEvent.appointmentData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentAddedEvent.error": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentAddingEvent": {
    "shortDescription": "The type of the [appointmentAdding]({basewidgetpath}/Events/#appointmentAdding) event handler's argument."
  },
  "_ui_scheduler_AppointmentAddingEvent.appointmentData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentAddingEvent.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentClickEvent": {
    "shortDescription": "The type of the [appointmentClick]({basewidgetpath}/Events/#appointmentClick) event handler's argument."
  },
  "_ui_scheduler_AppointmentClickEvent.appointmentElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentContextMenuEvent": {
    "shortDescription": "The type of the [appointmentContextMenu]({basewidgetpath}/Events/#appointmentContextMenu) event handler's argument."
  },
  "_ui_scheduler_AppointmentContextMenuEvent.appointmentElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentDblClickEvent": {
    "shortDescription": "The type of the [appointmentDblClick]({basewidgetpath}/Events/#appointmentDblClick) event handler's argument."
  },
  "_ui_scheduler_AppointmentDblClickEvent.appointmentElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentDeletedEvent": {
    "shortDescription": "The type of the [appointmentDeleted]({basewidgetpath}/Events/#appointmentDeleted) event handler's argument."
  },
  "_ui_scheduler_AppointmentDeletedEvent.appointmentData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentDeletedEvent.error": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentDeletingEvent": {
    "shortDescription": "The type of the [appointmentDeleting]({basewidgetpath}/Events/#appointmentDeleting) event handler's argument."
  },
  "_ui_scheduler_AppointmentDeletingEvent.appointmentData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentDeletingEvent.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentFormOpeningEvent": {
    "shortDescription": "The type of the [appointmentFormOpening]({basewidgetpath}/Events/#appointmentFormOpening) event handler's argument."
  },
  "_ui_scheduler_AppointmentFormOpeningEvent.appointmentData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentFormOpeningEvent.form": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentFormOpeningEvent.popup": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentRenderedEvent": {
    "shortDescription": "The type of the [appointmentRendered]({basewidgetpath}/Events/#appointmentRendered) event handler's argument."
  },
  "_ui_scheduler_AppointmentRenderedEvent.appointmentElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentTooltipShowingEvent": {
    "shortDescription": "The type of the [appointmentTooltipShowing]({basewidgetpath}/Events/#appointmentTooltipShowing) event handler's argument."
  },
  "_ui_scheduler_AppointmentTooltipShowingEvent.appointments": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentTooltipShowingEvent.targetElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentUpdatedEvent": {
    "shortDescription": "The type of the [appointmentUpdated]({basewidgetpath}/Events/#appointmentUpdated) event handler's argument."
  },
  "_ui_scheduler_AppointmentUpdatedEvent.appointmentData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentUpdatedEvent.error": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentUpdatingEvent": {
    "shortDescription": "The type of the [appointmentUpdating]({basewidgetpath}/Events/#appointmentUpdating) event handler's argument."
  },
  "_ui_scheduler_AppointmentUpdatingEvent.cancel": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentUpdatingEvent.newData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_AppointmentUpdatingEvent.oldData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_CellClickEvent": {
    "shortDescription": "The type of the [cellClick]({basewidgetpath}/Events/#cellClick) event handler's argument."
  },
  "_ui_scheduler_CellClickEvent.cellData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_CellClickEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_CellContextMenuEvent": {
    "shortDescription": "The type of the [cellContextMenu]({basewidgetpath}/Events/#cellContextMenu) event handler's argument."
  },
  "_ui_scheduler_CellContextMenuEvent.cellData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_CellContextMenuEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_scheduler_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_scheduler_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_scheduler_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_scheduler_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_scroll_view_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_scroll_view_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_scroll_view_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_scroll_view_PullDownEvent": {
    "shortDescription": "The type of the [pullDown]({basewidgetpath}/Events/#pullDown) event handler's argument."
  },
  "_ui_scroll_view_ReachBottomEvent": {
    "shortDescription": "The type of the [reachBottom]({basewidgetpath}/Events/#reachBottom) event handler's argument."
  },
  "_ui_scroll_view_ScrollEvent": {
    "shortDescription": "The type of the [scroll]({basewidgetpath}/Events/#scroll) event handler's argument."
  },
  "_ui_scroll_view_UpdatedEvent": {
    "shortDescription": "The type of the [updated]({basewidgetpath}/Events/#updated) event handler's argument."
  },
  "_ui_select_box_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_select_box_ClosedEvent": {
    "shortDescription": "The type of the [closed]({basewidgetpath}/Events/#closed) event handler's argument."
  },
  "_ui_select_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_select_box_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_select_box_CustomItemCreatingEvent": {
    "shortDescription": "The type of the [customItemCreating]({basewidgetpath}/Events/#customItemCreating) event handler's argument."
  },
  "_ui_select_box_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_select_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_select_box_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_select_box_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_select_box_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_select_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_select_box_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_select_box_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_select_box_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_select_box_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_select_box_OpenedEvent": {
    "shortDescription": "The type of the [opened]({basewidgetpath}/Events/#opened) event handler's argument."
  },
  "_ui_select_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_select_box_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_select_box_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_select_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_slider_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_slider_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_slider_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_slider_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_slider_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_sortable_AddEvent": {
    "shortDescription": "The type of the [add]({basewidgetpath}/Events/#add) event handler's argument."
  },
  "_ui_sortable_AddEvent.component": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.dropInsideItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.element": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.event": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.fromComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.fromIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.model": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.toComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.toData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_AddEvent.toIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_sortable_DragChangeEvent": {
    "shortDescription": "The type of the [dragChange]({basewidgetpath}/Events/#dragChange) event handler's argument."
  },
  "_ui_sortable_DragChangeEvent.dropInsideItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragChangeEvent.fromComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragChangeEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragChangeEvent.fromIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragChangeEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragChangeEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragChangeEvent.toComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragChangeEvent.toData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragChangeEvent.toIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent": {
    "shortDescription": "The type of the [dragEnd]({basewidgetpath}/Events/#dragEnd) event handler's argument."
  },
  "_ui_sortable_DragEndEvent.dropInsideItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent.fromComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent.fromIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent.toComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent.toData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragEndEvent.toIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent": {
    "shortDescription": "The type of the [dragMove]({basewidgetpath}/Events/#dragMove) event handler's argument."
  },
  "_ui_sortable_DragMoveEvent.dropInsideItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent.fromComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent.fromIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent.toComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent.toData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragMoveEvent.toIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragStartEvent": {
    "shortDescription": "The type of the [dragStart]({basewidgetpath}/Events/#dragStart) event handler's argument."
  },
  "_ui_sortable_DragStartEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragStartEvent.fromIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragStartEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_DragStartEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_sortable_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_sortable_RemoveEvent": {
    "shortDescription": "The type of the [remove]({basewidgetpath}/Events/#remove) event handler's argument."
  },
  "_ui_sortable_RemoveEvent.fromComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_RemoveEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_RemoveEvent.fromIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_RemoveEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_RemoveEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_RemoveEvent.toComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_RemoveEvent.toData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_RemoveEvent.toIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent": {
    "shortDescription": "The type of the [reorder]({basewidgetpath}/Events/#reorder) event handler's argument."
  },
  "_ui_sortable_ReorderEvent.dropInsideItem": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.fromComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.fromData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.fromIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.promise": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.toComponent": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.toData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_sortable_ReorderEvent.toIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_speed_dial_action_ClickEvent": {
    "shortDescription": "The type of the [click]({basewidgetpath}/Events/#click) event handler's argument."
  },
  "_ui_speed_dial_action_ClickEvent.actionElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_speed_dial_action_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_speed_dial_action_ContentReadyEvent.actionElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_speed_dial_action_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_speed_dial_action_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_speed_dial_action_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_splitter_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_splitter_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_splitter_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_splitter_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_splitter_ItemCollapsedEvent": {
    "shortDescription": "The type of the [itemCollapsed]({basewidgetpath}/Events/#itemCollapsed) event handler's argument."
  },
  "_ui_splitter_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_splitter_ItemExpandedEvent": {
    "shortDescription": "The type of the [itemExpanded]({basewidgetpath}/Events/#itemExpanded) event handler's argument."
  },
  "_ui_splitter_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_splitter_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_splitter_ResizeEndEvent": {
    "shortDescription": "The type of the [resizeEnd]({basewidgetpath}/Events/#resizeEnd) event handler's argument."
  },
  "_ui_splitter_ResizeEvent": {
    "shortDescription": "The type of the [resize]({basewidgetpath}/Events/#resize) event handler's argument."
  },
  "_ui_splitter_ResizeInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_splitter_ResizeInfo.handleElement": {
    "shortDescription": "A resize handle element."
  },
  "_ui_splitter_ResizeStartEvent": {
    "shortDescription": "The type of the [resizeStart]({basewidgetpath}/Events/#resizeStart) event handler's argument."
  },
  "_ui_switch_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_switch_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_switch_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_switch_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_switch_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_tabs_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_tabs_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_tabs_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_tabs_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_tabs_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_tabs_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_tabs_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_tabs_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_tabs_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_tabs_SelectionChangingEvent": {
    "shortDescription": "The type of the [selectionChanging]({basewidgetpath}/Events/#selectionChanging) event handler's argument."
  },
  "_ui_tab_panel_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_tab_panel_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_tab_panel_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_tab_panel_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_tab_panel_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_tab_panel_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_tab_panel_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_tab_panel_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_tab_panel_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_tab_panel_SelectionChangingEvent": {
    "shortDescription": "The type of the [selectionChanging]({basewidgetpath}/Events/#selectionChanging) event handler's argument."
  },
  "_ui_tab_panel_TitleClickEvent": {
    "shortDescription": "The type of the [titleClick]({basewidgetpath}/Events/#titleClick) event handler's argument."
  },
  "_ui_tab_panel_TitleHoldEvent": {
    "shortDescription": "The type of the [titleHold]({basewidgetpath}/Events/#titleHold) event handler's argument."
  },
  "_ui_tab_panel_TitleRenderedEvent": {
    "shortDescription": "The type of the [titleRendered]({basewidgetpath}/Events/#titleRendered) event handler's argument."
  },
  "_ui_tag_box_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_tag_box_ClosedEvent": {
    "shortDescription": "The type of the [closed]({basewidgetpath}/Events/#closed) event handler's argument."
  },
  "_ui_tag_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_tag_box_CustomItemCreatingEvent": {
    "shortDescription": "The type of the [customItemCreating]({basewidgetpath}/Events/#customItemCreating) event handler's argument."
  },
  "_ui_tag_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_tag_box_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_tag_box_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_tag_box_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_tag_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_tag_box_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_tag_box_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_tag_box_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_tag_box_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_tag_box_MultiTagPreparingEvent": {
    "shortDescription": "The type of the [multiTagPreparing]({basewidgetpath}/Events/#multiTagPreparing) event handler's argument."
  },
  "_ui_tag_box_MultiTagPreparingEvent.multiTagElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tag_box_MultiTagPreparingEvent.selectedItems": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tag_box_MultiTagPreparingEvent.text": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tag_box_OpenedEvent": {
    "shortDescription": "The type of the [opened]({basewidgetpath}/Events/#opened) event handler's argument."
  },
  "_ui_tag_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_tag_box_SelectAllValueChangedEvent": {
    "shortDescription": "The type of the [selectAllValueChanged]({basewidgetpath}/Events/#selectAllValueChanged) event handler's argument."
  },
  "_ui_tag_box_SelectAllValueChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tag_box_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_tag_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_text_area_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_text_area_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_text_area_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_text_area_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_text_area_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_text_area_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_text_area_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_text_area_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_text_area_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_text_area_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_text_area_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_text_area_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_text_area_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_text_area_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_text_area_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_text_box_ChangeEvent": {
    "shortDescription": "The type of the [change]({basewidgetpath}/Events/#change) event handler's argument."
  },
  "_ui_text_box_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_text_box_CopyEvent": {
    "shortDescription": "The type of the [copy]({basewidgetpath}/Events/#copy) event handler's argument."
  },
  "_ui_text_box_CutEvent": {
    "shortDescription": "The type of the [cut]({basewidgetpath}/Events/#cut) event handler's argument."
  },
  "_ui_text_box_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_text_box_EnterKeyEvent": {
    "shortDescription": "The type of the [enterKey]({basewidgetpath}/Events/#enterKey) event handler's argument."
  },
  "_ui_text_box_FocusInEvent": {
    "shortDescription": "The type of the [focusIn]({basewidgetpath}/Events/#focusIn) event handler's argument."
  },
  "_ui_text_box_FocusOutEvent": {
    "shortDescription": "The type of the [focusOut]({basewidgetpath}/Events/#focusOut) event handler's argument."
  },
  "_ui_text_box_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_text_box_InputEvent": {
    "shortDescription": "The type of the [input]({basewidgetpath}/Events/#input) event handler's argument."
  },
  "_ui_text_box_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_text_box_KeyUpEvent": {
    "shortDescription": "The type of the [keyUp]({basewidgetpath}/Events/#keyUp) event handler's argument."
  },
  "_ui_text_box_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_text_box_PasteEvent": {
    "shortDescription": "The type of the [paste]({basewidgetpath}/Events/#paste) event handler's argument."
  },
  "_ui_text_box_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_ui_tile_view_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_tile_view_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_tile_view_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_tile_view_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_tile_view_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_tile_view_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_tile_view_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_tile_view_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_toast_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_toast_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_toast_HiddenEvent": {
    "shortDescription": "The type of the [hidden]({basewidgetpath}/Events/#hidden) event handler's argument."
  },
  "_ui_toast_HidingEvent": {
    "shortDescription": "The type of the [hiding]({basewidgetpath}/Events/#hiding) event handler's argument."
  },
  "_ui_toast_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_toast_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_toast_ShowingEvent": {
    "shortDescription": "The type of the [showing]({basewidgetpath}/Events/#showing) event handler's argument."
  },
  "_ui_toast_ShownEvent": {
    "shortDescription": "The type of the [shown]({basewidgetpath}/Events/#shown) event handler's argument."
  },
  "_ui_toolbar_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_toolbar_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_toolbar_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_toolbar_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_toolbar_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_toolbar_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_toolbar_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_toolbar_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_tooltip_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_tooltip_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_tooltip_HiddenEvent": {
    "shortDescription": "The type of the [hidden]({basewidgetpath}/Events/#hidden) event handler's argument."
  },
  "_ui_tooltip_HidingEvent": {
    "shortDescription": "The type of the [hiding]({basewidgetpath}/Events/#hiding) event handler's argument."
  },
  "_ui_tooltip_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_tooltip_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_tooltip_ShowingEvent": {
    "shortDescription": "The type of the [showing]({basewidgetpath}/Events/#showing) event handler's argument."
  },
  "_ui_tooltip_ShownEvent": {
    "shortDescription": "The type of the [shown]({basewidgetpath}/Events/#shown) event handler's argument."
  },
  "_ui_tree_list_AdaptiveDetailRowPreparingEvent": {
    "shortDescription": "The type of the [adaptiveDetailRowPreparing]({basewidgetpath}/Events/#adaptiveDetailRowPreparing) event handler's argument."
  },
  "_ui_tree_list_CellClickEvent": {
    "shortDescription": "The type of the [cellClick]({basewidgetpath}/Events/#cellClick) event handler's argument."
  },
  "_ui_tree_list_CellDblClickEvent": {
    "shortDescription": "The type of the [cellDblClick]({basewidgetpath}/Events/#cellDblClick) event handler's argument."
  },
  "_ui_tree_list_CellHoverChangedEvent": {
    "shortDescription": "The type of the [cellHoverChanged]({basewidgetpath}/Events/#cellHoverChanged) event handler's argument."
  },
  "_ui_tree_list_CellHoverChangedEvent.eventType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_CellPreparedEvent": {
    "shortDescription": "The type of the [cellPrepared]({basewidgetpath}/Events/#cellPrepared) event handler's argument."
  },
  "_ui_tree_list_CellPreparedEvent.isExpanded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_CellPreparedEvent.isNewRow": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_CellPreparedEvent.isSelected": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_CellPreparedEvent.oldValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_CellPreparedEvent.watch": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_tree_list_ContextMenuPreparingEvent": {
    "shortDescription": "The type of the [contextMenuPreparing]({basewidgetpath}/Events/#contextMenuPreparing) event handler's argument."
  },
  "_ui_tree_list_ContextMenuPreparingEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_ContextMenuPreparingEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_ContextMenuPreparingEvent.items": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_ContextMenuPreparingEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_ContextMenuPreparingEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_ContextMenuPreparingEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_ContextMenuPreparingEvent.targetElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_DataErrorOccurredEvent": {
    "shortDescription": "The type of the [dataErrorOccurred]({basewidgetpath}/Events/#dataErrorOccurred) event handler's argument."
  },
  "_ui_tree_list_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_tree_list_EditCanceledEvent": {
    "shortDescription": "The type of the [editCanceled]({basewidgetpath}/Events/#editCanceled) event handler's argument."
  },
  "_ui_tree_list_EditCancelingEvent": {
    "shortDescription": "The type of the [editCanceling]({basewidgetpath}/Events/#editCanceling) event handler's argument."
  },
  "_ui_tree_list_EditingStartEvent": {
    "shortDescription": "The type of the [editingStart]({basewidgetpath}/Events/#editingStart) event handler's argument."
  },
  "_ui_tree_list_EditingStartEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditingStartEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditingStartEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent": {
    "shortDescription": "The type of the [editorPrepared]({basewidgetpath}/Events/#editorPrepared) event handler's argument."
  },
  "_ui_tree_list_EditorPreparedEvent.dataField": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.disabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.editorElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.parentType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.readOnly": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.rtlEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.setValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.updateValueTimeout": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparedEvent.width": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent": {
    "shortDescription": "The type of the [editorPreparing]({basewidgetpath}/Events/#editorPreparing) event handler's argument."
  },
  "_ui_tree_list_EditorPreparingEvent.dataField": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.disabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.editorElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.editorName": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.editorOptions": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.parentType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.readOnly": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.rtlEnabled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.setValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.updateValueTimeout": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_EditorPreparingEvent.width": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangedEvent": {
    "shortDescription": "The type of the [focusedCellChanged]({basewidgetpath}/Events/#focusedCellChanged) event handler's argument."
  },
  "_ui_tree_list_FocusedCellChangedEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangedEvent.column": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangedEvent.columnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangedEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangingEvent": {
    "shortDescription": "The type of the [focusedCellChanging]({basewidgetpath}/Events/#focusedCellChanging) event handler's argument."
  },
  "_ui_tree_list_FocusedCellChangingEvent.cellElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangingEvent.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangingEvent.isHighlighted": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangingEvent.newColumnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangingEvent.newRowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangingEvent.prevColumnIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangingEvent.prevRowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedCellChangingEvent.rows": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedRowChangedEvent": {
    "shortDescription": "The type of the [focusedRowChanged]({basewidgetpath}/Events/#focusedRowChanged) event handler's argument."
  },
  "_ui_tree_list_FocusedRowChangedEvent.row": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedRowChangedEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedRowChangedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedRowChangingEvent": {
    "shortDescription": "The type of the [focusedRowChanging]({basewidgetpath}/Events/#focusedRowChanging) event handler's argument."
  },
  "_ui_tree_list_FocusedRowChangingEvent.newRowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedRowChangingEvent.prevRowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedRowChangingEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_FocusedRowChangingEvent.rows": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_tree_list_InitNewRowEvent": {
    "shortDescription": "The type of the [initNewRow]({basewidgetpath}/Events/#initNewRow) event handler's argument."
  },
  "_ui_tree_list_KeyDownEvent": {
    "shortDescription": "The type of the [keyDown]({basewidgetpath}/Events/#keyDown) event handler's argument."
  },
  "_ui_tree_list_NodesInitializedEvent": {
    "shortDescription": "The type of the [nodesInitialized]({basewidgetpath}/Events/#nodesInitialized) event handler's argument."
  },
  "_ui_tree_list_NodesInitializedEvent.root": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_tree_list_RowClickEvent": {
    "shortDescription": "The type of the [rowClick]({basewidgetpath}/Events/#rowClick) event handler's argument."
  },
  "_ui_tree_list_RowClickEvent.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.handled": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.isExpanded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.isNewRow": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.isSelected": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.level": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.node": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowClickEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowCollapsedEvent": {
    "shortDescription": "The type of the [rowCollapsed]({basewidgetpath}/Events/#rowCollapsed) event handler's argument."
  },
  "_ui_tree_list_RowCollapsingEvent": {
    "shortDescription": "The type of the [rowCollapsing]({basewidgetpath}/Events/#rowCollapsing) event handler's argument."
  },
  "_ui_tree_list_RowDblClickEvent": {
    "shortDescription": "The type of the [rowDblClick]({basewidgetpath}/Events/#rowDblClick) event handler's argument."
  },
  "_ui_tree_list_RowDblClickEvent.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.isExpanded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.isNewRow": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.isSelected": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowDblClickEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowExpandedEvent": {
    "shortDescription": "The type of the [rowExpanded]({basewidgetpath}/Events/#rowExpanded) event handler's argument."
  },
  "_ui_tree_list_RowExpandingEvent": {
    "shortDescription": "The type of the [rowExpanding]({basewidgetpath}/Events/#rowExpanding) event handler's argument."
  },
  "_ui_tree_list_RowInsertedEvent": {
    "shortDescription": "The type of the [rowInserted]({basewidgetpath}/Events/#rowInserted) event handler's argument."
  },
  "_ui_tree_list_RowInsertingEvent": {
    "shortDescription": "The type of the [rowInserting]({basewidgetpath}/Events/#rowInserting) event handler's argument."
  },
  "_ui_tree_list_RowPreparedEvent": {
    "shortDescription": "The type of the [rowPrepared]({basewidgetpath}/Events/#rowPrepared) event handler's argument."
  },
  "_ui_tree_list_RowPreparedEvent.columns": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.data": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.isExpanded": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.isNewRow": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.isSelected": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.key": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.level": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.node": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.rowElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.rowIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.rowType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowPreparedEvent.values": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_list_RowRemovedEvent": {
    "shortDescription": "The type of the [rowRemoved]({basewidgetpath}/Events/#rowRemoved) event handler's argument."
  },
  "_ui_tree_list_RowRemovingEvent": {
    "shortDescription": "The type of the [rowRemoving]({basewidgetpath}/Events/#rowRemoving) event handler's argument."
  },
  "_ui_tree_list_RowUpdatedEvent": {
    "shortDescription": "The type of the [rowUpdated]({basewidgetpath}/Events/#rowUpdated) event handler's argument."
  },
  "_ui_tree_list_RowUpdatingEvent": {
    "shortDescription": "The type of the [rowUpdating]({basewidgetpath}/Events/#rowUpdating) event handler's argument."
  },
  "_ui_tree_list_RowValidatingEvent": {
    "shortDescription": "The type of the [rowValidating]({basewidgetpath}/Events/#rowValidating) event handler's argument."
  },
  "_ui_tree_list_SavedEvent": {
    "shortDescription": "The type of the [saved]({basewidgetpath}/Events/#saved) event handler's argument."
  },
  "_ui_tree_list_SavingEvent": {
    "shortDescription": "The type of the [saving]({basewidgetpath}/Events/#saving) event handler's argument."
  },
  "_ui_tree_list_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_tree_list_ToolbarPreparingEvent": {
    "shortDescription": "The type of the [toolbarPreparing]({basewidgetpath}/Events/#toolbarPreparing) event handler's argument."
  },
  "_ui_tree_view_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_tree_view_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_tree_view_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_tree_view_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_tree_view_ItemCollapsedEvent": {
    "shortDescription": "The type of the [itemCollapsed]({basewidgetpath}/Events/#itemCollapsed) event handler's argument."
  },
  "_ui_tree_view_ItemContextMenuEvent": {
    "shortDescription": "The type of the [itemContextMenu]({basewidgetpath}/Events/#itemContextMenu) event handler's argument."
  },
  "_ui_tree_view_ItemExpandedEvent": {
    "shortDescription": "The type of the [itemExpanded]({basewidgetpath}/Events/#itemExpanded) event handler's argument."
  },
  "_ui_tree_view_ItemHoldEvent": {
    "shortDescription": "The type of the [itemHold]({basewidgetpath}/Events/#itemHold) event handler's argument."
  },
  "_ui_tree_view_ItemInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_view_ItemInfo.itemData": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_view_ItemInfo.itemElement": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_view_ItemInfo.itemIndex": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_view_ItemInfo.node": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_view_ItemRenderedEvent": {
    "shortDescription": "The type of the [itemRendered]({basewidgetpath}/Events/#itemRendered) event handler's argument."
  },
  "_ui_tree_view_ItemSelectionChangedEvent": {
    "shortDescription": "The type of the [itemSelectionChanged]({basewidgetpath}/Events/#itemSelectionChanged) event handler's argument."
  },
  "_ui_tree_view_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_tree_view_SelectAllValueChangedEvent": {
    "shortDescription": "The type of the [selectAllValueChanged]({basewidgetpath}/Events/#selectAllValueChanged) event handler's argument."
  },
  "_ui_tree_view_SelectAllValueChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_ui_tree_view_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_ui_validation_group_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_validation_group_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_validation_group_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_ui_validation_summary_ContentReadyEvent": {
    "shortDescription": "The type of the [contentReady]({basewidgetpath}/Events/#contentReady) event handler's argument."
  },
  "_ui_validation_summary_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_ui_validation_summary_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_ui_validation_summary_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_ui_validation_summary_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_bar_gauge_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_bar_gauge_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_bar_gauge_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_bar_gauge_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_bar_gauge_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_bar_gauge_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_bar_gauge_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_bar_gauge_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_bar_gauge_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_bar_gauge_TooltipInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_bar_gauge_TooltipInfo.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_bar_gauge_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_base_gauge_TooltipInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_base_gauge_TooltipInfo.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_bullet_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_bullet_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_bullet_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_bullet_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_bullet_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_bullet_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_bullet_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_bullet_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_bullet_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_bullet_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_chart_ArgumentAxisClickEvent": {
    "shortDescription": "The type of the [argumentAxisClick]({basewidgetpath}/Events/#argumentAxisClick) event handler's argument."
  },
  "_viz_chart_ArgumentAxisClickEvent.argument": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_components_base_chart_TooltipInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_components_base_chart_TooltipInfo.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_chart_DoneEvent": {
    "shortDescription": "The type of the [done]({basewidgetpath}/Events/#done) event handler's argument."
  },
  "_viz_chart_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_chart_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_chart_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_chart_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_chart_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_chart_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_chart_LegendClickEvent": {
    "shortDescription": "The type of the [legendClick]({basewidgetpath}/Events/#legendClick) event handler's argument."
  },
  "_viz_chart_LegendClickEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_chart_PointClickEvent": {
    "shortDescription": "The type of the [pointClick]({basewidgetpath}/Events/#pointClick) event handler's argument."
  },
  "_viz_chart_PointHoverChangedEvent": {
    "shortDescription": "The type of the [pointHoverChanged]({basewidgetpath}/Events/#pointHoverChanged) event handler's argument."
  },
  "_viz_chart_PointSelectionChangedEvent": {
    "shortDescription": "The type of the [pointSelectionChanged]({basewidgetpath}/Events/#pointSelectionChanged) event handler's argument."
  },
  "_viz_chart_SeriesClickEvent": {
    "shortDescription": "The type of the [seriesClick]({basewidgetpath}/Events/#seriesClick) event handler's argument."
  },
  "_viz_chart_SeriesClickEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_SeriesHoverChangedEvent": {
    "shortDescription": "The type of the [seriesHoverChanged]({basewidgetpath}/Events/#seriesHoverChanged) event handler's argument."
  },
  "_viz_chart_SeriesInteractionInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_SeriesInteractionInfo.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_SeriesSelectionChangedEvent": {
    "shortDescription": "The type of the [seriesSelectionChanged]({basewidgetpath}/Events/#seriesSelectionChanged) event handler's argument."
  },
  "_viz_chart_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_chart_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_chart_ZoomEndEvent": {
    "shortDescription": "The type of the [zoomEnd]({basewidgetpath}/Events/#zoomEnd) event handler's argument."
  },
  "_viz_chart_ZoomEndEvent.actionType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomEndEvent.axis": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomEndEvent.previousRange": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomEndEvent.range": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomEndEvent.rangeEnd": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomEndEvent.rangeStart": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomEndEvent.shift": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomEndEvent.zoomFactor": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomStartEvent": {
    "shortDescription": "The type of the [zoomStart]({basewidgetpath}/Events/#zoomStart) event handler's argument."
  },
  "_viz_chart_ZoomStartEvent.actionType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomStartEvent.axis": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_chart_ZoomStartEvent.range": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_circular_gauge_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_circular_gauge_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_circular_gauge_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_circular_gauge_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_circular_gauge_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_circular_gauge_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_circular_gauge_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_circular_gauge_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_circular_gauge_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_circular_gauge_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_funnel_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_funnel_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_funnel_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_funnel_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_funnel_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_funnel_HoverChangedEvent": {
    "shortDescription": "The type of the [hoverChanged]({basewidgetpath}/Events/#hoverChanged) event handler's argument."
  },
  "_viz_funnel_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_funnel_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_funnel_ItemClickEvent": {
    "shortDescription": "The type of the [itemClick]({basewidgetpath}/Events/#itemClick) event handler's argument."
  },
  "_viz_funnel_LegendClickEvent": {
    "shortDescription": "The type of the [legendClick]({basewidgetpath}/Events/#legendClick) event handler's argument."
  },
  "_viz_funnel_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_funnel_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_viz_linear_gauge_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_linear_gauge_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_linear_gauge_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_linear_gauge_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_linear_gauge_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_linear_gauge_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_linear_gauge_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_linear_gauge_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_linear_gauge_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_linear_gauge_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_pie_chart_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_pie_chart_DoneEvent": {
    "shortDescription": "The type of the [done]({basewidgetpath}/Events/#done) event handler's argument."
  },
  "_viz_pie_chart_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_pie_chart_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_pie_chart_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_pie_chart_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_pie_chart_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_pie_chart_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_pie_chart_LegendClickEvent": {
    "shortDescription": "The type of the [legendClick]({basewidgetpath}/Events/#legendClick) event handler's argument."
  },
  "_viz_pie_chart_LegendClickEvent.points": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_pie_chart_LegendClickEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_pie_chart_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_pie_chart_PointClickEvent": {
    "shortDescription": "The type of the [pointClick]({basewidgetpath}/Events/#pointClick) event handler's argument."
  },
  "_viz_pie_chart_PointHoverChangedEvent": {
    "shortDescription": "The type of the [pointHoverChanged]({basewidgetpath}/Events/#pointHoverChanged) event handler's argument."
  },
  "_viz_pie_chart_PointSelectionChangedEvent": {
    "shortDescription": "The type of the [pointSelectionChanged]({basewidgetpath}/Events/#pointSelectionChanged) event handler's argument."
  },
  "_viz_pie_chart_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_pie_chart_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_polar_chart_ArgumentAxisClickEvent": {
    "shortDescription": "The type of the [argumentAxisClick]({basewidgetpath}/Events/#argumentAxisClick) event handler's argument."
  },
  "_viz_polar_chart_ArgumentAxisClickEvent.argument": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_polar_chart_DoneEvent": {
    "shortDescription": "The type of the [done]({basewidgetpath}/Events/#done) event handler's argument."
  },
  "_viz_polar_chart_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_polar_chart_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_polar_chart_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_polar_chart_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_polar_chart_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_polar_chart_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_polar_chart_LegendClickEvent": {
    "shortDescription": "The type of the [legendClick]({basewidgetpath}/Events/#legendClick) event handler's argument."
  },
  "_viz_polar_chart_LegendClickEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_polar_chart_PointClickEvent": {
    "shortDescription": "The type of the [pointClick]({basewidgetpath}/Events/#pointClick) event handler's argument."
  },
  "_viz_polar_chart_PointHoverChangedEvent": {
    "shortDescription": "The type of the [pointHoverChanged]({basewidgetpath}/Events/#pointHoverChanged) event handler's argument."
  },
  "_viz_polar_chart_PointSelectionChangedEvent": {
    "shortDescription": "The type of the [pointSelectionChanged]({basewidgetpath}/Events/#pointSelectionChanged) event handler's argument."
  },
  "_viz_polar_chart_SeriesClickEvent": {
    "shortDescription": "The type of the [seriesClick]({basewidgetpath}/Events/#seriesClick) event handler's argument."
  },
  "_viz_polar_chart_SeriesClickEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_SeriesHoverChangedEvent": {
    "shortDescription": "The type of the [seriesHoverChanged]({basewidgetpath}/Events/#seriesHoverChanged) event handler's argument."
  },
  "_viz_polar_chart_SeriesInteractionInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_SeriesInteractionInfo.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_SeriesSelectionChangedEvent": {
    "shortDescription": "The type of the [seriesSelectionChanged]({basewidgetpath}/Events/#seriesSelectionChanged) event handler's argument."
  },
  "_viz_polar_chart_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_polar_chart_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_polar_chart_ZoomEndEvent": {
    "shortDescription": "The type of the [zoomEnd]({basewidgetpath}/Events/#zoomEnd) event handler's argument."
  },
  "_viz_polar_chart_ZoomEndEvent.actionType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_ZoomEndEvent.axis": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_ZoomEndEvent.previousRange": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_ZoomEndEvent.range": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_ZoomEndEvent.shift": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_ZoomEndEvent.zoomFactor": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_ZoomStartEvent": {
    "shortDescription": "The type of the [zoomStart]({basewidgetpath}/Events/#zoomStart) event handler's argument."
  },
  "_viz_polar_chart_ZoomStartEvent.actionType": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_ZoomStartEvent.axis": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_polar_chart_ZoomStartEvent.range": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_range_selector_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_range_selector_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_range_selector_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_range_selector_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_range_selector_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_range_selector_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_range_selector_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_range_selector_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_range_selector_ValueChangedEvent": {
    "shortDescription": "The type of the [valueChanged]({basewidgetpath}/Events/#valueChanged) event handler's argument."
  },
  "_viz_range_selector_ValueChangedEvent.previousValue": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_range_selector_ValueChangedEvent.value": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_sankey_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_sankey_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_sankey_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_sankey_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_sankey_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_sankey_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_sankey_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_sankey_LinkClickEvent": {
    "shortDescription": "The type of the [linkClick]({basewidgetpath}/Events/#linkClick) event handler's argument."
  },
  "_viz_sankey_LinkClickEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_sankey_LinkHoverEvent": {
    "shortDescription": "The type of the [linkHoverChanged]({basewidgetpath}/Events/#linkHoverChanged) event handler's argument."
  },
  "_viz_sankey_LinkHoverEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_sankey_NodeClickEvent": {
    "shortDescription": "The type of the [nodeClick]({basewidgetpath}/Events/#nodeClick) event handler's argument."
  },
  "_viz_sankey_NodeClickEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_sankey_NodeHoverEvent": {
    "shortDescription": "The type of the [nodeHoverChanged]({basewidgetpath}/Events/#nodeHoverChanged) event handler's argument."
  },
  "_viz_sankey_NodeHoverEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_sankey_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_sparkline_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_sparkline_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_sparkline_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_sparkline_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_sparkline_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_sparkline_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_sparkline_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_sparkline_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_sparkline_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_sparkline_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_tree_map_ClickEvent": {
    "shortDescription": "The type of the [click]({basewidgetpath}/Events/#click) event handler's argument."
  },
  "_viz_tree_map_ClickEvent.node": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_tree_map_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_tree_map_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_tree_map_DrillEvent": {
    "shortDescription": "The type of the [drill]({basewidgetpath}/Events/#drill) event handler's argument."
  },
  "_viz_tree_map_DrillEvent.node": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_tree_map_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_tree_map_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_tree_map_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_tree_map_HoverChangedEvent": {
    "shortDescription": "The type of the [hoverChanged]({basewidgetpath}/Events/#hoverChanged) event handler's argument."
  },
  "_viz_tree_map_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_tree_map_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_tree_map_NodesInitializedEvent": {
    "shortDescription": "The type of the [nodesInitialized]({basewidgetpath}/Events/#nodesInitialized) event handler's argument."
  },
  "_viz_tree_map_NodesInitializedEvent.root": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_tree_map_NodesRenderingEvent": {
    "shortDescription": "The type of the [nodesRendering]({basewidgetpath}/Events/#nodesRendering) event handler's argument."
  },
  "_viz_tree_map_NodesRenderingEvent.node": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_tree_map_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_tree_map_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_viz_vector_map_CenterChangedEvent": {
    "shortDescription": "The type of the [centerChanged]({basewidgetpath}/Events/#centerChanged) event handler's argument."
  },
  "_viz_vector_map_CenterChangedEvent.center": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_vector_map_ClickEvent": {
    "shortDescription": "The type of the [click]({basewidgetpath}/Events/#click) event handler's argument."
  },
  "_viz_vector_map_ClickEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_vector_map_DisposingEvent": {
    "shortDescription": "The type of the [disposing]({basewidgetpath}/Events/#disposing) event handler's argument."
  },
  "_viz_vector_map_DrawnEvent": {
    "shortDescription": "The type of the [drawn]({basewidgetpath}/Events/#drawn) event handler's argument."
  },
  "_viz_vector_map_ExportedEvent": {
    "shortDescription": "The type of the [exported]({basewidgetpath}/Events/#exported) event handler's argument."
  },
  "_viz_vector_map_ExportingEvent": {
    "shortDescription": "The type of the [exporting]({basewidgetpath}/Events/#exporting) event handler's argument."
  },
  "_viz_vector_map_FileSavingEvent": {
    "shortDescription": "The type of the [fileSaving]({basewidgetpath}/Events/#fileSaving) event handler's argument."
  },
  "_viz_vector_map_IncidentOccurredEvent": {
    "shortDescription": "The type of the [incidentOccurred]({basewidgetpath}/Events/#incidentOccurred) event handler's argument."
  },
  "_viz_vector_map_InitializedEvent": {
    "shortDescription": "The type of the [initialized]({basewidgetpath}/Events/#initialized) event handler's argument."
  },
  "_viz_vector_map_OptionChangedEvent": {
    "shortDescription": "The type of the [optionChanged]({basewidgetpath}/Events/#optionChanged) event handler's argument."
  },
  "_viz_vector_map_SelectionChangedEvent": {
    "shortDescription": "The type of the [selectionChanged]({basewidgetpath}/Events/#selectionChanged) event handler's argument."
  },
  "_viz_vector_map_SelectionChangedEvent.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_vector_map_TooltipHiddenEvent": {
    "shortDescription": "The type of the [tooltipHidden]({basewidgetpath}/Events/#tooltipHidden) event handler's argument."
  },
  "_viz_vector_map_TooltipInfo": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_vector_map_TooltipInfo.target": {
    "shortDescription": "<!-- Description goes here -->"
  },
  "_viz_vector_map_TooltipShownEvent": {
    "shortDescription": "The type of the [tooltipShown]({basewidgetpath}/Events/#tooltipShown) event handler's argument."
  },
  "_viz_vector_map_ZoomFactorChangedEvent": {
    "shortDescription": "The type of the [zoomFactorChanged]({basewidgetpath}/Events/#zoomFactorChanged) event handler's argument."
  },
  "_viz_vector_map_ZoomFactorChangedEvent.zoomFactor": {
    "shortDescription": "<!-- Description goes here -->"
  }
}